<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>koko's Note - posts</title><link href="https://note.koko.guru/" rel="alternate"></link><link href="https://note.koko.guru/feeds/posts.atom.xml" rel="self"></link><id>https://note.koko.guru/</id><updated>2019-07-13T00:00:00+08:00</updated><subtitle>
Code / Web / Architecture
&lt;br/&gt;
&lt;br/&gt;
你需要非常多的努力
&lt;br/&gt;
才能看起來毫不費力
</subtitle><entry><title>Golang - 使用 GVM 管理器安裝 Golang 在 Mac 上</title><link href="https://note.koko.guru/golang-install-on-mac-with-gvm.html" rel="alternate"></link><published>2019-07-13T00:00:00+08:00</published><updated>2019-07-13T00:00:00+08:00</updated><author><name>kokokuo</name></author><id>tag:note.koko.guru,2019-07-13:/golang-install-on-mac-with-gvm.html</id><summary type="html">&lt;p&gt;最近開始摸 Golang ( 簡稱 Go )，而正所謂預先善其事必先利其器，當然要先把環境安裝好。在 Mac 上安裝 Golang 非常容易，可以直接透過 &lt;code&gt;hombrew&lt;/code&gt; 或是從 Golang 官方下載安裝即可。但是這麼做會使電腦的 Golang 的版本被限縮在某一版，如果今天從 Github 上或是與其他團隊共同開發 Golang 專案時，可能會需要同時存在不同版本，因此本篇介紹使用 Golang 版本管理器 - GVM，來俐落的安裝不同的 Golang 版本。&lt;/p&gt;</summary><content type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;最近開始摸 Golang，而正所謂預先善其事必先利其器，當然要先把環境安裝好。在 Mac 上安裝 Golang 非常容易，可以直接透過 &lt;code&gt;hombrew&lt;/code&gt; 或是從 Golang 官方下載安裝即可。但是這麼做會使電腦的 Golang 的版本被限縮在某一版，如果今天從 Github 上或是與其他團隊共同開發 Golang 專案時，可能會需要同時存在不同版本，因此本篇介紹使用 Golang 版本管理器 - GVM，來俐落的安裝不同的 Golang 版本。&lt;/p&gt;
&lt;h1&gt;透過 GVM 安裝並管理 Go 版本&lt;/h1&gt;
&lt;hr&gt;
&lt;h2&gt;1. 什麼是 GVM ( Go Version Management )&lt;/h2&gt;
&lt;p&gt;GVM 是一套由第三方的開源開發者們共同撰寫的 Go 語言版本管理器，能夠在系統上同時透過這套 GVM 的套件，為我們同時安裝多個不同版本的 Go ，並且可以切換要使用的版本。&lt;/p&gt;
&lt;p&gt;這樣的管理器，如果有寫過其他語言的人一定不陌生，例如 Ruby 的 &lt;a href="https://github.com/rvm/rvm"&gt;RVM&lt;/a&gt;，Python 的 &lt;a href="https://github.com/pyenv/pyenv"&gt;pyenv&lt;/a&gt;，Node.js 的 &lt;a href="https://github.com/nvm-sh/nvm"&gt;nvm&lt;/a&gt; ...等等。&lt;/p&gt;
&lt;p&gt;而在 Go 語言上也有這樣方便好用的版本管理器，安裝非常簡單，以下我們來看一下。&lt;/p&gt;
&lt;h2&gt;2. 安裝 GVM&lt;/h2&gt;
&lt;h3&gt;安裝到 Bash 中&lt;/h3&gt;
&lt;p&gt;輸入以下指令安裝：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bash &amp;lt; &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;透過執行這段指令，GVM 會被安裝到 &lt;code&gt;~/.gvm&lt;/code&gt; 目錄下，此外自動為我們寫入此段指令到 bash 的用戶環境變數中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt; -s &lt;span class="s2"&gt;&amp;quot;/Users/&amp;lt;username&amp;gt;/.gvm/scripts/gvm&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/&amp;lt;username&amp;gt;/.gvm/scripts/gvm&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如下圖是 &lt;code&gt;~/.bash_profile&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190713-install-golang-on-mac/bash-profile-gvm-settings.png" alt="bash-profile-gvm-settings" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;安裝到 Zsh 中&lt;/h3&gt;
&lt;p&gt;然而若是使用 &lt;code&gt;zsh&lt;/code&gt;，則可以改成下載套件並設定到 &lt;code&gt;zsh&lt;/code&gt; 中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ zsh &amp;lt; &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="../images/20190713-install-golang-on-mac/install-gvm-to-zsh.png" alt="install-gvm-to-zsh" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;打開 &lt;code&gt;~/.zshrc&lt;/code&gt; 可以看到 &lt;code&gt;[[ -s "/Users/&amp;lt;username&amp;gt;/.gvm/scripts/gvm" ]] &amp;amp;&amp;amp; source "/Users/&amp;lt;username&amp;gt;/.gvm/scripts/gvm"&lt;/code&gt; 被設定進去。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190713-install-golang-on-mac/zshrc-show-gmv-env-settings.png" alt="zshrc-show-gmv-env-setting" width="480px"/&gt;&lt;/p&gt;
&lt;h2&gt;3. 啟動 GVM 安裝 Golang&lt;/h2&gt;
&lt;p&gt;在上述安裝完並檢查環境變數有指向 GVM 後，接著可以透過重新啟動 Ternimal 或是手動以 &lt;code&gt;source&lt;/code&gt; 指令來啟動 GVＭ：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;source&lt;/span&gt; /Users/&amp;lt;username&amp;gt;/.gvm/scripts/gvm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著輸入 &lt;code&gt;gvm&lt;/code&gt; 便會看到可以開始使用 GVM 版本管理器。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190713-install-golang-on-mac/installed-gvm.png" alt="installed-gvm" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;接著我們要來安裝需要的 Go 版本，在 GVM 有一些指令可以幫助我們檢查目前電腦上的 Go 版本、Go 釋出可以安裝的版本來讓我們選擇安裝：&lt;/p&gt;
&lt;h3&gt;(1.) 查看可以下載安裝的 Go 版本&lt;/h3&gt;
&lt;p&gt;透過 &lt;code&gt;listall&lt;/code&gt; 可以查看遠端可以下載的 Go 版本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gvm listall
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="../images/20190713-install-golang-on-mac/gvm-listall.png" alt="gvm-listall" width="240px"/&gt;&lt;/p&gt;
&lt;h3&gt;(2.) 安奘想要的版本&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gvm install &amp;lt;輸入你想要安裝的版本&amp;gt;

&lt;span class="c1"&gt;# 例如在這邊我安裝了兩個版本：&lt;/span&gt;
$ gvm install go1.12.7
$ gvm install go1.11.12
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;(3.) 查看目前電腦所安裝的版本&lt;/h3&gt;
&lt;p&gt;接著我們可以透過 &lt;code&gt;list&lt;/code&gt; 來得知目前系統上已經安裝的版本號。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gvm list
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如下我們便會看到了已經安裝的版本。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190713-install-golang-on-mac/gvm-list.png" alt="gvm-list" width="240px"/&gt;&lt;/p&gt;
&lt;h3&gt;(4.) 指定使用的 Go 語言版本&lt;/h3&gt;
&lt;p&gt;雖然在上述我們安裝了多個 Go 的版本，但是卻不曉得要使用哪個版本，如果要指定使用的版本 (或切換版本)，可以透過 &lt;code&gt;use&lt;/code&gt; 指令來設定&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gvm use &amp;lt;要指定切換的 Go 版本&amp;gt;
$ gvm use go1.11.12
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;設定好後，我們可以透過 &lt;code&gt;go version&lt;/code&gt; 來檢查是否找得到指定的版本：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190713-install-golang-on-mac/gvm-use-go-for-the-shell.png" alt="gvm-use-go-for-the-shell" width="240px"/&gt;&lt;/p&gt;
&lt;p&gt;此外透過 &lt;code&gt;gvm list&lt;/code&gt; 也可以看到目前我們所使用的版本。&lt;/p&gt;
&lt;p&gt;但是透過 &lt;code&gt;gvm use&lt;/code&gt; 只能針對目前這個 Shell，所以當我們開了一個 Shell 後，便會找不到剛剛設定的 Go，如下圖我開了一個新的 &lt;code&gt;tty&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190713-install-golang-on-mac/new-shell-no-find-go.png" alt="new-shell-no-find-go" width="320px"/&gt;&lt;/p&gt;
&lt;p&gt;輸入 &lt;code&gt;go version&lt;/code&gt; 或 &lt;code&gt;go env&lt;/code&gt; (&lt;code&gt;env&lt;/code&gt; 參數可以看到 Go 所使用的環境變數，例如 Go 被安裝到哪)，你會發現找不到該 Go 版本。&lt;/p&gt;
&lt;p&gt;那麼如果要讓指定的版本永久作用的話要如何是好？&lt;/p&gt;
&lt;h3&gt;(5.) 指定 Go 預設的使用版本&lt;/h3&gt;
&lt;p&gt;我們可以在 &lt;code&gt;gvm use&lt;/code&gt; 後便加上選擇性參數 &lt;code&gt;--default&lt;/code&gt; 來告訴 GVM 這個版本被設為永久性預設的版本，當新開一個 Shell 後也會預設使用這個版本號：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gvm use &amp;lt;要指定切換的 Go 版本&amp;gt; --default
$ gvm use go1.12.7 --default
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="../images/20190713-install-golang-on-mac/gvm-use-go-permanently.png" alt="gvm-use-go-permanently" width="280px"/&gt;&lt;/p&gt;
&lt;p&gt;我們再次開了一個新的 Shell ，你會看到他預設指定 &lt;code&gt;1.12.7&lt;/code&gt; 版。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190713-install-golang-on-mac/new-shell-use-default-go-version.png" alt="new-shell-use-default-go-version" width="280px"/&gt;&lt;/p&gt;
&lt;h3&gt;(6.) GVM 下載安裝的 Go 被放到哪裡&lt;/h3&gt;
&lt;p&gt;另外這些透過 GVM 所安裝的各個 Go 版本，會安放到哪呢？這時我們可以透過先前提到的 &lt;code&gt;go env&lt;/code&gt; 查看與 Go 有關的環境變數：&lt;/p&gt;
&lt;p&gt;如上圖你會看到被下載放置到 &lt;code&gt;~/.gvm/pkgsets&lt;/code&gt; 目錄下。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190713-install-golang-on-mac/go-env-show-installed-path.png" alt="go-env-show-installed-path" width="360px"/&gt;&lt;/p&gt;
&lt;p&gt;進到目錄 &lt;code&gt;~/.gvm/pkgsets&lt;/code&gt; 下後會看到剛剛所安裝的其他版本 Go:&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190713-install-golang-on-mac/all-gvm-go-version-location.png" alt="all-gvm-go-version-location" width="240px"/&gt;&lt;/p&gt;
&lt;h3&gt;(7.) 移除指定的 Go 版本&lt;/h3&gt;
&lt;p&gt;要透過 GVM 移除 Go 很容易，只要透過以下指令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gvm uninstall &amp;lt;要移除的版本&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下透過一個例子來觀看，你會發現後來安裝的 &lt;code&gt;go1.13beta1&lt;/code&gt; 被移除掉。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190713-install-golang-on-mac/gvm-uninstall-go.png" alt="gvm-uninstall-go" width="280px"/&gt;&lt;/p&gt;
&lt;h3&gt;(8.) 移除 GVM&lt;/h3&gt;
&lt;p&gt;如果要把 GVM 整個移除可以透過 &lt;code&gt;implode&lt;/code&gt; 指令移除：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gvm implode
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;當透過這個指令移除 GVM 後，所有透過 GVM 所安裝的 Go 版本也會移除，因為先前提到所有透過 GVM 所安裝的 Go 都會安放在 &lt;code&gt;~/.gvm/pkgsets&lt;/code&gt; 目錄下。&lt;/p&gt;
&lt;p&gt;另外如果發現 &lt;code&gt;gvm implode&lt;/code&gt; 無法移除 GVM ，可以手動刪除 &lt;code&gt;.gvm&lt;/code&gt; 整個目錄，並把一開始安裝時寫入到 &lt;code&gt;zsh&lt;/code&gt; 或 &lt;code&gt;bash&lt;/code&gt; 環境變數中的指令移除即可。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;參考資料&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/moovweb/gvm"&gt;GVM Github Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dryyun.com/2018/11/28/how-to-use-gvm/"&gt;GVM - Go 的多版本管理工具，使用介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://chen-tao.github.io/2017/09/14/Use-gvm-manage-golang-version/"&gt;使用 gvm 管理多版本 golang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://golang.org/doc/devel/release.html"&gt;Go Release History&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Golang"></category><category term="Mac"></category><category term="GVM"></category></entry><entry><title>Pelican - 常用參數設定介紹與功能設定</title><link href="https://note.koko.guru/pelican-settings-parameter-introudction.html" rel="alternate"></link><published>2019-03-18T00:00:00+08:00</published><updated>2019-03-18T00:00:00+08:00</updated><author><name>kokokuo</name></author><id>tag:note.koko.guru,2019-03-18:/pelican-settings-parameter-introudction.html</id><summary type="html">&lt;p&gt;如果你的 Pelican 剛架好，並且正在苦思一些設定，例如 Favicon 、客製化頁面、設定分類與標籤頁面、如何安裝留言板與 Google Analystic 與 robot.txt 等等，那麼此篇非常歡迎你來瞧瞧，介紹一些常用的 Pelican 的設定參數用途。&lt;/p&gt;</summary><content type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;如果你的 Pelican 靜態網站剛架好，並且正在苦思一些設定，例如 Favicon 、客製化頁面、設定分類與標籤頁面、如何安裝留言板與 Google Analystic 與 robot.txt 等等，那麼此篇非常歡迎你來瞧瞧，接著會介紹一些常用的 Pelican 的設定參數用途，希望能幫助到你。&lt;/p&gt;
&lt;p&gt;另外如果你對如何架設 Pelican 、部署網站、使用 Pelican 的主題...等有疑慮的話，也歡迎你閱讀我前幾篇寫的文章，來幫助你更多認識唷。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://note.koko.guru/mac-using-pelican-build-static-website.html"&gt;在 Mac 上使用 Python 的 Pelican 建立靜態個人網誌&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://note.koko.guru/deploy-pelican-static-webiste-to-github-page.html"&gt;使用 Github Page 作為靜態網誌的空間 - 以 Pelican 為例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://note.koko.guru/install-pelican-theme.html"&gt;Python - 安裝 Pelican Theme 來改變你的靜態網站主題&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接著我們來進入正題！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;設定 Favicon&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;在使用 Pelican 時如果有注意到的話，會發現當我們透過 &lt;code&gt;make serve PORT=[number]&lt;/code&gt; 後，每當開啟網頁請求時，都會跳出，找不到 Favicon 的警告，如下圖：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190318-pelican-setting-introduction/warning-not-find-favicon.png" alt="warning-not-find-favicon" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;Favicon 是網站圖示，主要被用在瀏覽器的網址搜尋列圖示或是書籤列圖示等等，尺寸通常在 100 多或 100 以下 Pixel 的大小 ( 更多介紹可以查看 &lt;a href="https://zh.wikipedia.org/wiki/Favicon"&gt;Wiki&lt;/a&gt; )，副檔名為 &lt;code&gt;ico&lt;/code&gt;。 而在 Pelican 中雖然不會影響，但是會被作為不完全的警告，因此我們接著來把 Favicon 加入進去。&lt;/p&gt;
&lt;p&gt;另外 Favicon 有許多網站有在提供免費的圖像格式檔案轉換 ( png, jpg 轉 ico  )，例如我在這邊使用的是 &lt;a href="http://tw.faviconico.org/"&gt;Favicon 線上製作轉換工具&lt;/a&gt;，另外 Favicon 有不同的尺寸，有興趣的可以看此篇 - &lt;a href="https://stackoverflow.com/questions/4014823/does-a-favicon-have-to-be-32x32-or-16x16"&gt;Does a favicon have to be 32x32 or 16x16?&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;接著要開始設定 Pelican 的 Favicon 並顯示，有我們需要借助在 Pelican 文件中提到的 &lt;code&gt;EXTRA_PATH_METADATA&lt;/code&gt; 設定參數：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190318-pelican-setting-introduction/1-extra-path-metadata.png" alt="1-extra-path-metadata" width="360px"/&gt;&lt;/p&gt;
&lt;p&gt;透過 &lt;code&gt;EXTRA_PATH_METADATA&lt;/code&gt; 參數加入想要的特定的檔案到來源目錄 &lt;code&gt;content&lt;/code&gt; 下，並在 &lt;code&gt;make html&lt;/code&gt; 輸出成 HTML 後，自動產生在輸出目錄 &lt;code&gt;output&lt;/code&gt; 指定的位置中。&lt;/p&gt;
&lt;p&gt;不過 &lt;code&gt;EXTRA_PATH_METADATA&lt;/code&gt; 需要與 &lt;code&gt;STATIC_PATHS&lt;/code&gt; 搭配，因為 &lt;code&gt;STATIC_PATHS&lt;/code&gt; 會告知 Pelican 哪些檔案或目錄屬於靜態文件，唯有指定後，才會在輸出時複製檔案並且生效。&lt;/p&gt;
&lt;p&gt;這個原因是因為一般的靜態網站，通常分為 HTML 內容與靜態文件 (Static Files)，這些文件則是資源檔案（圖片、影片、影訊檔案）、CSS 與 JS 檔案，而在 Pelican 中，因為也是靜態網站，所以 Pelican 需要知道哪些檔案或目錄，會被歸類成靜態文件，才能在輸出成 HTML 時作用並複製放到到輸出 HTML 的目錄下。&lt;/p&gt;
&lt;p&gt;如下例子 &lt;code&gt;EXTRA_PATH_METADATA&lt;/code&gt; 中的 &lt;code&gt;'static/robots.txt'&lt;/code&gt; 是指在 &lt;code&gt;content&lt;/code&gt; 下 &lt;code&gt;static&lt;/code&gt; 的檔案，其投射到 HTML 時，被放置在 &lt;code&gt;output&lt;/code&gt; 的根目錄。&lt;/p&gt;
&lt;p&gt;但是因為有指定該來源路徑的內容要被歸類在 &lt;code&gt;STATIC_PATHS&lt;/code&gt; 中，因此輸出才會作用，Pelican 才會複製該檔案，並藉由 &lt;code&gt;EXTRA_PATH_METADATA&lt;/code&gt; 得知要放到根目錄中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;static/robots.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;static/robots.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;robots.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因此接著我們先把 Favicon 放到在 &lt;code&gt;content&lt;/code&gt; 底下建立的 &lt;code&gt;extra&lt;/code&gt; 目錄中（如果沒有建立直接建立此目錄）:&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190318-pelican-setting-introduction/favicon-in-the-content.png" alt="favicon-in-the-content" width="240px"/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 設定哪些目錄或檔案，要被視為靜態文件，並且放置到輸出目錄下&lt;/span&gt;
&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;extra/favicon.ico&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# 用來設定複製到輸出目錄時，該 extra/favicon.ico 會被投放對應的位置，這邊設定在根目錄下&lt;/span&gt;
&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;extra/favicon.ico&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;favicon.ico&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因為 Pelican 預設會把 &lt;code&gt;images&lt;/code&gt; 目錄視為靜態文件放置輸出目錄下，所以在設定 &lt;code&gt;extra/favicon.ico&lt;/code&gt; 時不能省略。&lt;/p&gt;
&lt;p&gt;之後設定 &lt;code&gt;EXTRA_PATH_METADATA&lt;/code&gt;，並指定要求輸出目錄後，放到根目錄下，如此在 HTML 輸出目錄後便會出現在根目錄當中。&lt;/p&gt;
&lt;p&gt;接著我們 &lt;code&gt;make clean&lt;/code&gt; 後再輸入 &lt;code&gt;make html &amp;amp;&amp;amp; make serve PORT=[number]&lt;/code&gt; 執行，便會看到原本在 &lt;code&gt;content/extra/&lt;/code&gt; 的 &lt;code&gt;favicon.ico&lt;/code&gt; 也出現在 &lt;code&gt;output&lt;/code&gt; 下：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190318-pelican-setting-introduction/show-favicon-in-the-root.png" alt="show-favicon-in-the-root" width="240px"/&gt;&lt;/p&gt;
&lt;p&gt;之所以會放到根目錄的原因是因為在 Pelican 中有提到像 &lt;code&gt;favicon.ico&lt;/code&gt;、&lt;code&gt;robot.txt&lt;/code&gt; 可以放在根目錄會直接作用，所以在上述的 &lt;code&gt;favicon.ico&lt;/code&gt; 在使用 &lt;code&gt;EXTRA_PATH_METADATA&lt;/code&gt; 設定路徑時，&lt;code&gt;path&lt;/code&gt; 直接放在最上層，所以在 &lt;code&gt;make html&lt;/code&gt; 時才會直接出現在 &lt;code&gt;output&lt;/code&gt; 下，接著透過 &lt;code&gt;make serve&lt;/code&gt; 執行後也會顯示該 &lt;code&gt;favicon.ico&lt;/code&gt; :&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190318-pelican-setting-introduction/show-favicon.png" alt="show-favicon" width="240px"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;設定回首頁&lt;/h1&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;參考資料&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/31270373/how-to-add-a-favicon-to-a-pelican-blog"&gt;How to add a favicon to a Pelican blog?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/4014823/does-a-favicon-have-to-be-32x32-or-16x16"&gt;Does a favicon have to be 32x32 or 16x16?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.getpelican.com/en/3.6.0/tips.html?highlight=favicon"&gt;Pelican - Tips&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Pelican"></category><category term="Python"></category></entry><entry><title>如何客製化 Pelican Theme 的 Flex 樣式</title><link href="https://note.koko.guru/custom-pelican-theme-flex-style.html" rel="alternate"></link><published>2019-03-15T00:00:00+08:00</published><updated>2019-03-15T00:00:00+08:00</updated><author><name>kokokuo</name></author><id>tag:note.koko.guru,2019-03-15:/custom-pelican-theme-flex-style.html</id><summary type="html">&lt;p&gt;如果你使用 Pelican 靜態產生器，剛好也選擇 Flex 這個主題，你可能會想要對該主題做一些調整。例如 Flex 主題預設的樣式，在文字的排版上，行與行之間會比較擠，文字會比較小會顯得比較擠，因此如果你想要調整一下預設的樣式的話，那你可以參考此篇。&lt;/p&gt;</summary><content type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;在前一篇 &lt;a href="https://note.koko.guru/install-pelican-theme.html"&gt;Python - 安裝 Pelican Theme 來改變你的靜態網站主題&lt;/a&gt;，分享了如何在 Pelican 上安裝主題，而如果你使用 Pelican 靜態產生器，剛好也選擇 Flex 這個主題，你可能會想要對該主題做一些調整。例如 Flex 主題預設的樣式，在文字的排版上，行與行之間會比較擠，文字會比較小會顯得比較擠，因此如果你想要調整一下預設的樣式的話，那你可以參考此篇。&lt;/p&gt;
&lt;h1&gt;讓 Flex Theme 讀取客製化樣式&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;在 Flex 主題提供的 &lt;a href="https://github.com/alexandrevicenzi/Flex/wiki"&gt;Wiki&lt;/a&gt; 文件中， Custom Settings 有提及一個 &lt;code&gt;CUSTOM_CSS&lt;/code&gt; 設定參數，該參數的意思如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Path to a CSS file. Need to be used with &lt;a href="http://docs.getpelican.com/en/stable/settings.html#path-metadata"&gt;EXTRA_PATH_METADATA&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以讓你指定你要客製化的 CSS 檔案位置，而且 &lt;code&gt;CUSTOM_CSS&lt;/code&gt; 的位置是指在輸出 HTML 的目錄下位置，但是該參數與要與 Pelican 本身的 &lt;code&gt;EXTRA_PATH_METADATA&lt;/code&gt; 搭配使用：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190315-pelican-flex-theme-custom-css/1-extra-path-metadata.png" alt="1-extra-path-metadata" /&gt;&lt;/p&gt;
&lt;p&gt;關於 &lt;code&gt;EXTRA_PATH_METADATA&lt;/code&gt; 有在 &lt;a href="https://note.koko.guru/pelican-settings-parameter-introudction.html"&gt;Pelican - 常用參數設定介紹與功能設定&lt;/a&gt; 介紹到。&lt;/p&gt;
&lt;p&gt;透過 &lt;code&gt;EXTRA_PATH_METADATA&lt;/code&gt; 參數加入想要的特定的檔案到來源目錄 &lt;code&gt;content&lt;/code&gt; 下，並在 &lt;code&gt;make html&lt;/code&gt; 輸出成 HTML 後，自動產生在輸出目錄 &lt;code&gt;output&lt;/code&gt; 指定的位置中。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;EXTRA_PATH_METADATA&lt;/code&gt; 需要需要與 &lt;code&gt;STATIC_PATHS&lt;/code&gt; 搭配使用，藉由 &lt;code&gt;STATIC_PATHS&lt;/code&gt; 告知 Pelican 哪些檔案或目錄屬於靜態文件，並在指定後才會在輸出時複製檔案並且生效。&lt;/p&gt;
&lt;p&gt;藉由在 &lt;a href="https://note.koko.guru/pelican-settings-parameter-introudction.html"&gt;Pelican - 常用參數設定介紹與功能設定&lt;/a&gt; 提到 &lt;code&gt;favicon.ico&lt;/code&gt; 與 &lt;code&gt;robot.txt&lt;/code&gt; 的例子參考。&lt;/p&gt;
&lt;p&gt;把接下來要客製化的 CSS 檔案 &lt;code&gt;custom.css&lt;/code&gt; 一同放置 &lt;code&gt;content&lt;/code&gt; 下的 &lt;code&gt;extra&lt;/code&gt; 子目錄並在該檔案中編輯要修改的 CSS，例如我的是：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190315-pelican-flex-theme-custom-css/2-extra-custom-css-path.png" alt="2-extra-custom-css-path" width="380px"/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.02&lt;/span&gt;&lt;span class="kt"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.8&lt;/span&gt;&lt;span class="kt"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;h6&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.8&lt;/span&gt;&lt;span class="kt"&gt;em&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.52&lt;/span&gt;&lt;span class="kt"&gt;em&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.36&lt;/span&gt;&lt;span class="kt"&gt;em&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h4&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.2&lt;/span&gt;&lt;span class="kt"&gt;em&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h5&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="kt"&gt;em&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h6&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.08&lt;/span&gt;&lt;span class="kt"&gt;em&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="nt"&gt;article&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="o"&gt;)&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;code&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.9&lt;/span&gt;&lt;span class="kt"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;white-space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;nowrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#c25&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#f7f7f9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="kc"&gt;solid&lt;/span&gt; &lt;span class="mh"&gt;#e1e1e8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.2&lt;/span&gt;&lt;span class="kt"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;完成後，接著到 &lt;code&gt;pelicanconf.py&lt;/code&gt; 中設定剛剛提到的參數：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 設定哪些目錄或檔案，要被視為靜態文件，並且放置到輸出目錄下&lt;/span&gt;
&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;images&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="s2"&gt;&amp;quot;extra/favicon.ico&amp;quot;&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;extra/custom.css&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# 用來設定複製到輸出目錄時，該 extra/custom.css 會被投放對應的位置，這邊設定在 static&lt;/span&gt;
&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;extra/favicon.ico&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;static/favicon.ico&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;extra/custom.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;static/custom.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# CUSTOM_CSS 是輸出成 HTML 時的該客製化 CSS 檔案的位置&lt;/span&gt;
&lt;span class="n"&gt;CUSTOM_CSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;static/custom.css&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之後設定 &lt;code&gt;EXTRA_PATH_METADATA&lt;/code&gt;，並指定要求輸出目錄後，放到 &lt;code&gt;static&lt;/code&gt; 下，設定 &lt;code&gt;CUSTOM_CSS&lt;/code&gt; 參數時在指定此 &lt;code&gt;custom.css&lt;/code&gt; 在 HTML 輸出目錄下的所在位置。&lt;/p&gt;
&lt;p&gt;最後再透過 &lt;code&gt;make html&lt;/code&gt; 與 &lt;code&gt;make serve [port]&lt;/code&gt; 測試，如下圖，你會看到該 &lt;code&gt;custom.css&lt;/code&gt; 被複製到了 &lt;code&gt;output&lt;/code&gt; 目錄下，並且放在指定的 &lt;code&gt;static&lt;/code&gt; 目錄中：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190315-pelican-flex-theme-custom-css/3-output-mapping-path.png" alt="3-output-mapping-path" width="360px"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;接著開啟網站看預覽畫面，如下圖 &lt;code&gt;custom.css&lt;/code&gt; 生效囉！&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190315-pelican-flex-theme-custom-css/4-custom-css-review.png" alt="4-custom-css-review" /&gt;&lt;/p&gt;
&lt;p&gt;之後喜歡這個主題的人就可以開始對這個 CSS 大改特改了。&lt;/p&gt;
&lt;p&gt;對了，由於先前我們把 &lt;code&gt;custom.css&lt;/code&gt; 與 &lt;code&gt;favicon.ico&lt;/code&gt; 都放在 &lt;code&gt;extra&lt;/code&gt; 底下，因此當有多個檔案時，如果這些檔案未來都是要顯示設為靜態文件，可以直接對 &lt;code&gt;STATIC_PATHS&lt;/code&gt; 改成指定目錄 ( 如同 &lt;code&gt;images&lt;/code&gt; ) ：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;images&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;extra&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;調整 Flex 內文中的圖像樣式&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;由於在 Markdown 中，預設並沒有可以直接調整圖像的參數，因此若要調整大小或置中的效果，因此需要另外的設定。&lt;/p&gt;
&lt;p&gt;首先對於圖片的置中部分，我們一樣可以透過 Flex 主題提供的 &lt;code&gt;CUSTOM_CSS&lt;/code&gt; 設定，開啟 &lt;code&gt;custom.css&lt;/code&gt; 檔案，並貼上，設定置中的段落：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;/* 調整文章的圖片置中 */&lt;/span&gt;
&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="nt"&gt;article&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;完成後再次輸出 HTML 查看：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190315-pelican-flex-theme-custom-css/5-custom-image-css-preview.png" alt="5-custom-image-css-preview" /&gt;&lt;/p&gt;
&lt;p&gt;然而圖片的尺寸大小部分，雖然也有一些 Pelican 的 Plugin 有提供，但是都沒有辦法個別調整尺寸，因此還是要回歸到透過 HTML 的 &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 標籤，並對每張圖片透過屬性個別設定會是比較好的方式。&lt;/p&gt;
&lt;p&gt;此外由於 Flex 對於圖片只有設定 &lt;code&gt;max-width: 100%;&lt;/code&gt; ，因此如果如果圖片尺寸太大的話，會整個版面佔滿被放大，所以透過 &lt;code&gt;@media&lt;/code&gt; 來設定不同尺寸下各自的設定模式，以下是讓尺寸在寬小於 480 時， &lt;code&gt;max-width&lt;/code&gt; 為預設的 &lt;code&gt;100%&lt;/code&gt;，若不是，則依照各個寬度縮放。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="c"&gt;/* Media Query ，也就是當寬度 &amp;gt; 769 px 時將載入下面這段 CSS : */&lt;/span&gt;
 &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;media&lt;/span&gt; &lt;span class="nt"&gt;only&lt;/span&gt; &lt;span class="nt"&gt;screen&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;min-width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;769px&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* 調整文章的圖片置中 */&lt;/span&gt;
  &lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="nt"&gt;article&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="kt"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="c"&gt;/* Media Query ，也就是當 481px &amp;lt; 寬度 &amp;lt; 768px 時將載入下面這段 CSS : */&lt;/span&gt;
 &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;media&lt;/span&gt; &lt;span class="nt"&gt;only&lt;/span&gt; &lt;span class="nt"&gt;screen&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;min-width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;481px&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;max-width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;768px&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* 調整文章的圖片置中 */&lt;/span&gt;
  &lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="nt"&gt;article&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="kt"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="c"&gt;/* Media Query ，也就是當寬度 &amp;lt; 480 px 時將載入下面這段 CSS : */&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;media&lt;/span&gt; &lt;span class="nt"&gt;only&lt;/span&gt; &lt;span class="nt"&gt;screen&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;max-width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;480px&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* 調整文章的圖片置中 */&lt;/span&gt;
  &lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="nt"&gt;article&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;若是仍有圖片過大，在各自調整 &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 中的 &lt;code&gt;width&lt;/code&gt; 尺寸，最後如下：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190315-pelican-flex-theme-custom-css/6-custom-html-image-tag-width-preview.png" alt="6-custom-html-image-tag-width-preview" /&gt;&lt;/p&gt;
&lt;p&gt;當把瀏覽器拉窄後，畫面會看到 &lt;code&gt;@media&lt;/code&gt; 變為適用寬度小於 &lt;code&gt;max-width&lt;/code&gt; 為 480px：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190315-pelican-flex-theme-custom-css/7-rwd-custom-css-image-preview.png" alt="7-rwd-custom-css-image-preview.png" width="320px"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;指定 Favicon 輸出路徑&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;在 &lt;a href="https://note.koko.guru/pelican-settings-parameter-introudction.html"&gt;Pelican - 常用參數設定介紹與功能設定&lt;/a&gt; 中有介紹到如何設定 Favicon 並讓瀏覽器搜尋與書籤列顯示圖示，但是 Pelican 預設只能放在根目錄下，因此若不想放在根目錄下，就要看不同的 Theme 是否可以指定目錄（ 否則就要額外寫一些腳本程式 ）。&lt;/p&gt;
&lt;p&gt;而剛好的 &lt;code&gt;Flex&lt;/code&gt; 這套 Theme 就可以在 &lt;code&gt;pelicanconf.py&lt;/code&gt; 中設定參數 &lt;code&gt;FAVICON&lt;/code&gt;，參考 &lt;a href="https://github.com/alexandrevicenzi/Flex/wiki/Custom-Settings"&gt;Flex - Custom Settings&lt;/a&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 設定哪些目錄或檔案，要被視為靜態文件，並且放置到輸出目錄下&lt;/span&gt;
&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;extra/favicon.ico&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# 用來設定複製到輸出目錄時，該 favicon.ico 會被投放對應的位置，這邊設定在根目錄下&lt;/span&gt;
&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;extra/favicon.ico&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;static/favicon.ico&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如上這次把 &lt;code&gt;favicon&lt;/code&gt; 指定在輸出時放到 &lt;code&gt;static&lt;/code&gt; 目錄下，並再次清除並重新輸出 HTML 與執行 Server，會看到 &lt;code&gt;favicon.ico&lt;/code&gt; 放在 &lt;code&gt;static&lt;/code&gt; 目錄下了，並且也會發現瀏覽器上沒有顯示 &lt;code&gt;favicon&lt;/code&gt; 的圖案。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190318-pelican-setting-introduction/favicon-in-the-output.png" alt="favicon-in-the-output" width="240px"/&gt;&lt;/p&gt;
&lt;p&gt;此時要怎麼辦呢？ 如果使用 &lt;code&gt;Flex&lt;/code&gt; 樣板，我們可以直接指定所在目錄下，就會再次看到。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;FAVICON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/static/favicon.ico&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;指定 Flex 樣式使用本地端的 Logo&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;在前一篇 &lt;a href="https://note.koko.guru/install-pelican-theme.html"&gt;Python - 安裝 Pelican Theme 來改變你的靜態網站主題&lt;/a&gt; 文章安裝 &lt;code&gt;Flex&lt;/code&gt; 時，因為 &lt;code&gt;Flex&lt;/code&gt; 可以透過 &lt;code&gt;SITELOGO&lt;/code&gt; 參數設定個人的大頭貼，因此當時直接使用了放置在雲端的路徑路徑。&lt;/p&gt;
&lt;p&gt;但是因為我們現在知道了 &lt;code&gt;EXTRA_PATH_METADATA&lt;/code&gt; 與 &lt;code&gt;STATIC_PATHS&lt;/code&gt; ，所以我們也可以存取網站的資源目錄下要用的 LOGO，在這邊我準備了原先的大頭貼並放到 &lt;code&gt;content/extra&lt;/code&gt; 目錄下，並接著使用 &lt;code&gt;EXTRA_PATH_METADATA&lt;/code&gt; 與 &lt;code&gt;STATIC_PATHS&lt;/code&gt; 來把檔案輸出到 HTML 的 &lt;code&gt;static&lt;/code&gt; 目錄下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 設定哪些目錄或檔案，要被視為靜態文件，並且放置到輸出目錄下&lt;/span&gt;
&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;images&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="s2"&gt;&amp;quot;extra&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# 用來設定複製到輸出目錄時，該 extra/koko-logo.png 會被投放對應的位置，這邊設定在 static&lt;/span&gt;
&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;extra/favicon.ico&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;static/favicon.ico&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
     &lt;span class="s2"&gt;&amp;quot;extra/koko-logo.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;static/koko-logo.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;extra/custom.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;static/custom.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著設定原先的 &lt;code&gt;SITELOGO&lt;/code&gt; 參數指向 &lt;code&gt;static/koko-logo.png&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SITELOGO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/static/koko-logo.png&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;make clean&lt;/code&gt; 後再次輸入 &lt;code&gt;make html &amp;amp;&amp;amp; make serve PORT=[number]&lt;/code&gt; 執行：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190315-pelican-flex-theme-custom-css/koko-logo-local-resource.png" alt="koko-logo-local-resource.png" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;完成。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;後記&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;雖然樣式調整設定好了，但是在 Pelican 中還有許多可以設定的參數，以後若是會使用新的參數會再跟大家分享。&lt;/p&gt;
&lt;p&gt;到此 Pelican 相關的靜態網站主題會告一段落，若有想要詢問的人歡迎來在詢問。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;參考文章&lt;/h1&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://docs.getpelican.com/en/stable/settings.html#metadata"&gt;Pelican Settings - Metadata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.game18.net/posts/2015/10/li-yong-pelicanhe-github-pagesda-zao-ge-xing-hua-bo-ke-er/"&gt;利用 Pelican 和 GitHub Pages 打造个性化博客(二)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://maxwell-nc.github.io/blog/pelicanBuildBlog.html"&gt;Windows 下使用 Pelican 搭建静态博客&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Pelican"></category><category term="Python"></category></entry><entry><title>Python - 安裝 Pelican Theme 來改變你的靜態網站主題</title><link href="https://note.koko.guru/install-pelican-theme.html" rel="alternate"></link><published>2019-03-15T00:00:00+08:00</published><updated>2019-03-15T00:00:00+08:00</updated><author><name>kokokuo</name></author><id>tag:note.koko.guru,2019-03-15:/install-pelican-theme.html</id><summary type="html">&lt;p&gt;由於使用 Pelican 靜態網站產生器架設好的網誌所提供的預設版面與外觀並不好看，因此想要更換，但是要怎麼更換呢？ Pelican 會不會有像 Wordpress 一樣能夠更換的功能了？ 還是...難不成要用程式寫一個？&lt;/p&gt;</summary><content type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;在前兩篇 &lt;a href="https://note.koko.guru/mac-using-pelican-build-static-website.html"&gt;在 Mac 上使用 Python 的 Pelican 建立靜態個人網誌&lt;/a&gt; 與 &lt;a href="20190205-deploy-pelican-static-website-to-github-page.md"&gt;使用 Github Page 作為靜態網誌的空間 - 以 Pelican 為例&lt;/a&gt; 我們知道了要如何使用 Pelican 來架設靜態網站。&lt;/p&gt;
&lt;p&gt;但由於使用 Pelican 靜態網站產生器架設好的網誌所提供的預設版面與外觀並不好看，因此想要更換，但是要怎麼更換呢？ Pelican 會不會有像 Wordpress 一樣能夠更換的功能了？ 還是...難不成要用程式寫一個？&lt;/p&gt;
&lt;p&gt;放心，Pelican 有提供給我們更換網誌外觀的功能哦，以下我們接著來設定。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;安裝與設定 Pelican Theme&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;在 Pelican 中提供了許多可以更換你靜態網站的樣式外觀，這些樣式與外觀被稱作 &lt;strong&gt;「主題」( Theme )&lt;/strong&gt;，許多的靜態產生器或是網站可能也都使用相同的詞彙。&lt;/p&gt;
&lt;p&gt;而在 Pelican 中要安裝與設定非常容易，讓我們來執行以下步驟。&lt;/p&gt;
&lt;h2&gt;1. 挑選你喜歡的 Pelican Theme&lt;/h2&gt;
&lt;p&gt;有許多設計師設計了許多出色的主題，並且統一放在 &lt;a href="http://www.pelicanthemes.com/"&gt;Pelican 官網的 Theme 頁面中&lt;/a&gt;，如下圖：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190315-install-pelican-theme/1-pelican-themes-website.png" alt="1-pelican-themes-website" /&gt;&lt;/p&gt;
&lt;p&gt;當你從中挑選了你喜歡的主題，你可以點擊此主題的名稱連結，該連結多半會導到其主題的個人設計師官網或是這些主題所存放的 Github Repository，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190315-install-pelican-theme/2-other-designer-repository.png" alt="2-other-designer-repository" width="480px" /&gt;&lt;/p&gt;
&lt;p&gt;除此之外這些主題的 Repository 也有提供一個連結讓 &lt;a href="https://github.com/getpelican/pelican-themes"&gt;Pelican Themes 的 Repository&lt;/a&gt; 統一管理，這個 Repository 你可以從 Pelican Themes 的官網中找到其連結。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190315-install-pelican-theme/3-pelican-themes-repository.png" alt="3-pelican-themes-repository" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;進入到挑選的主題的 Repository 後，透過 &lt;code&gt;git clone&lt;/code&gt; 或是點擊 &lt;strong&gt;Clone or download&lt;/strong&gt; 下載檔案解壓縮。&lt;/p&gt;
&lt;h2&gt;2. 安裝 Theme 到你的 Pelican 網站中&lt;/h2&gt;
&lt;h3&gt;(1.) 下載想要的 Theme&lt;/h3&gt;
&lt;p&gt;下載後先把下載的位置與目錄記錄下來。例如選擇了 &lt;a href="https://github.com/alexandrevicenzi/Flex"&gt;Flex&lt;/a&gt; 這個主題，並透過 &lt;code&gt;git clone&lt;/code&gt; 放在家目錄下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~/&amp;gt; git clone https://github.com/alexandrevicenzi/Flex
~/&amp;gt; &lt;span class="nb"&gt;cd&lt;/span&gt; Flex
~/&lt;span class="o"&gt;(&lt;/span&gt;master&lt;span class="o"&gt;)&lt;/span&gt;Flex/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="../images/20190315-install-pelican-theme/4-clone-or-download-candidate-theme.png" alt="4-clone-or-download-candidate-theme" width="480px"/&gt;&lt;/p&gt;
&lt;h3&gt;(2.) 安裝已下載的 Theme 到 Pelican 網站中&lt;/h3&gt;
&lt;p&gt;之後回到自己的 Pelican 網站，並且進入你的虛擬環境後確保 Pelican 的套件有安裝，Pelican 的指令能夠作用下，輸入以下指令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;)&lt;/span&gt;kokokuo-note/&amp;gt; pelican-themes -h
usage: pelican-themes &lt;span class="o"&gt;[&lt;/span&gt;-h&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-l &lt;span class="p"&gt;|&lt;/span&gt; -p &lt;span class="p"&gt;|&lt;/span&gt; -V&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-i theme path &lt;span class="o"&gt;[&lt;/span&gt;theme path ...&lt;span class="o"&gt;]]&lt;/span&gt;
                      &lt;span class="o"&gt;[&lt;/span&gt;-r theme name &lt;span class="o"&gt;[&lt;/span&gt;theme name ...&lt;span class="o"&gt;]]&lt;/span&gt;
                      &lt;span class="o"&gt;[&lt;/span&gt;-U theme path &lt;span class="o"&gt;[&lt;/span&gt;theme path ...&lt;span class="o"&gt;]]&lt;/span&gt;
                      &lt;span class="o"&gt;[&lt;/span&gt;-s theme path &lt;span class="o"&gt;[&lt;/span&gt;theme path ...&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-c&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-v&lt;span class="o"&gt;]&lt;/span&gt;

Install themes &lt;span class="k"&gt;for&lt;/span&gt; Pelican

optional arguments:
  -h, --help            show this &lt;span class="nb"&gt;help&lt;/span&gt; message and &lt;span class="nb"&gt;exit&lt;/span&gt;
  -l, --list            Show the themes already installed and &lt;span class="nb"&gt;exit&lt;/span&gt;
  -p, --path            Show the themes path and &lt;span class="nb"&gt;exit&lt;/span&gt;
  -V, --version         Print the version of this script
  -i theme path &lt;span class="o"&gt;[&lt;/span&gt;theme path ...&lt;span class="o"&gt;]&lt;/span&gt;, --install theme path &lt;span class="o"&gt;[&lt;/span&gt;theme path ...&lt;span class="o"&gt;]&lt;/span&gt;
                        The themes to install
  -r theme name &lt;span class="o"&gt;[&lt;/span&gt;theme name ...&lt;span class="o"&gt;]&lt;/span&gt;, --remove theme name &lt;span class="o"&gt;[&lt;/span&gt;theme name ...&lt;span class="o"&gt;]&lt;/span&gt;
                        The themes to remove
  -U theme path &lt;span class="o"&gt;[&lt;/span&gt;theme path ...&lt;span class="o"&gt;]&lt;/span&gt;, --upgrade theme path &lt;span class="o"&gt;[&lt;/span&gt;theme path ...&lt;span class="o"&gt;]&lt;/span&gt;
                        The themes to upgrade
  -s theme path &lt;span class="o"&gt;[&lt;/span&gt;theme path ...&lt;span class="o"&gt;]&lt;/span&gt;, --symlink theme path &lt;span class="o"&gt;[&lt;/span&gt;theme path ...&lt;span class="o"&gt;]&lt;/span&gt;
                        Same as &lt;span class="sb"&gt;`&lt;/span&gt;--install&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;, but create a symbolic link
                        instead of copying the theme. Useful &lt;span class="k"&gt;for&lt;/span&gt; theme
                        development
  -c, --clean           Remove the broken symbolic links of the theme path
  -v, --verbose         Verbose output
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上是 Pelican 套件提供的主題指令，協助你查詢你用 Pelican 架設的靜態網站中，你如你可以透過 &lt;code&gt;pelican-themes -l&lt;/code&gt; 來查詢你目前所有安裝的套件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;)&lt;/span&gt;kokokuo-note/&amp;gt; pelican-themes -l
simple
notmyidea
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你會發現原來 Pelican 有預設幫你安裝了兩個主題，並且設定使用其中一個，所以你再啟動網站時才會看到，而在指令中也有提到安裝主題，這也是我們剛剛下載主題的原因，因為 &lt;strong&gt;pelican-themes 是需要指定安裝的路徑來源，因此不能從網路上指定，需要先下載那來才行&lt;/strong&gt;，所以如下我們指令他的路徑，並安裝：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;)&lt;/span&gt;kokokuo-note/&amp;gt; pelican-themes --install ~/Flex --verbose &lt;span class="c1"&gt;# 使用 --verbose 查看細節過程資訊&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;透過 &lt;code&gt;--verbose&lt;/code&gt; 參數來查看安裝的過程資訊，如果沒有這個參數的話，安裝時你會看不到安裝的過程與安裝到哪裡，除此之外你也可以透過縮寫指令來安裝：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;)&lt;/span&gt;kokokuo-note/&amp;gt; pelican-themes -vi ~/Flex # --install 與 --verbose 的簡短輸入方式
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然後安裝完，你可以透過 &lt;code&gt;pelican-themes -l&lt;/code&gt; 查看是否有安裝，只不過如果你想知道他安裝在哪裡，你可以也加入 &lt;code&gt;--verbose&lt;/code&gt; 或 &lt;code&gt;-v&lt;/code&gt; 看到：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190315-install-pelican-theme/5-pelican-theme-install-command.png" alt="5-pelican-theme-install-command" /&gt;&lt;/p&gt;
&lt;p&gt;你會發現，不管是預設的主題，還是安裝的主題，都會被放置到虛擬環境下 &lt;code&gt;pelican/themes/&lt;/code&gt; 的位置。&lt;/p&gt;
&lt;h3&gt;(3.) 移除安裝的 Theme&lt;/h3&gt;
&lt;p&gt;另外，如果你要移除主題，你可以使用 &lt;code&gt;--remove&lt;/code&gt; 或是 &lt;code&gt;-r&lt;/code&gt; 短指令來指定你要移除的主題名稱移除：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190315-install-pelican-theme/6-remove-pelican-theme-command.png" alt="6-remove-pelican-theme-command" /&gt;&lt;/p&gt;
&lt;h2&gt;3. 設定 Pelican 網站使用的主題&lt;/h2&gt;
&lt;p&gt;當你安裝好主題後，此時我們需要讓我們的 Pelican 網站採用此主題才行，打開 &lt;code&gt;pelicanconf.py&lt;/code&gt;，並添加此行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Flex&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# Flex 是你透過 pelican-themes 指令安裝的主題名稱&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此參數的設定來自 &lt;a href="https://docs.getpelican.com/en/stable/settings.html#themes"&gt;Pelican Setttings&lt;/a&gt; 文件中的介紹，在 Pelican 的教學文件中有列出對於安裝的主題，有哪些參數可以使用。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;pelicanconf.py&lt;/code&gt; 加上 &lt;code&gt;Theme = 'Flex'&lt;/code&gt; 後，再來我們就可以重新輸出一次 HTML 網頁並來預覽查看，透過 &lt;code&gt;make html&lt;/code&gt; 與 &lt;code&gt;make serve [port]&lt;/code&gt; 指令來生出新的 HTML 檔案，並開啟一個測試用的簡易伺服器協助測試與預覽：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;)&lt;/span&gt;kokokuo-note/&amp;gt; make html &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make serve &lt;span class="m"&gt;8000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如下圖，你會看到修改後的畫面，成功！&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190315-install-pelican-theme/7-flex-theme-result.png" alt="7-flex-theme-result" /&gt;&lt;/p&gt;
&lt;p&gt;如果你對 Flex 這個主題有興趣，你可以去查看 Flex 主題提供的 &lt;a href="https://github.com/alexandrevicenzi/Flex/wiki"&gt;文件 wiki&lt;/a&gt;，在其中有 &lt;a href="https://github.com/alexandrevicenzi/Flex/wiki/Custom-Settings"&gt;Custom Settings&lt;/a&gt;) 的參數是 Flex 有提供可以設定的部分。&lt;/p&gt;
&lt;p&gt;例如以下是我的一些簡易設定：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Flex&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;SITETITLE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello Titile&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;SITESUBTITLE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;This is sample&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;SITELOGO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://avatars3.githubusercontent.com/u/5389253?s=460&amp;amp;v=4&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;SOCIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;github&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://github.com/kokokuo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;linkedin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;www.linkedin.com/in/easonkuo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這些參數有些是 Pelican Settings 中提到的，有些是 Flex 這個主題客製化提供的，然後讓我們再次透過 &lt;code&gt;make html&lt;/code&gt; 與 &lt;code&gt;make serve [port]&lt;/code&gt; 指令來生出新的 HTML 檔案並測試：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190315-install-pelican-theme/8-flex-add-custom-settings.png" alt="8-flex-add-custom-settings" /&gt;&lt;/p&gt;
&lt;p&gt;大功告成！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;後記&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;除了這個範本教學的 Theme，在 Pelican 中還有許多其他的 Theme 有興趣的話可以都下載來體驗看看。&lt;/p&gt;
&lt;p&gt;另外在 Pelican 中除了主題以下，還有許多其他的插件可以使用，如果後續有機會，會在撰寫文章分享給大家，以及如何在 Github Page 上設定個人買的網域這件事。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;參考連結&lt;/h1&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://docs.getpelican.com/en/stable/pelican-themes.html"&gt;Pelican Documents - pelican-themes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.getpelican.com/en/stable/settings.html#themes"&gt;Pelican Settings - Theme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pelicanthemes.com/"&gt;Pelican Theme Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alexandrevicenzi/Flex/tree/master"&gt;Flex - Github Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alexandrevicenzi/Flex/wiki"&gt;Flex - Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alexandrevicenzi/blog/blob/master/pelicanconf.py"&gt;Flex - pelicanconf.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2015/09/blog-internals/"&gt;設定部落格筆記&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Python"></category><category term="Mac"></category><category term="Python3"></category></entry><entry><title>安裝 Python 2 在 Mac 上 (Python2.7.15 為例）</title><link href="https://note.koko.guru/python-install-python2-on-mac.html" rel="alternate"></link><published>2019-03-12T00:00:00+08:00</published><updated>2019-03-12T00:00:00+08:00</updated><author><name>kokokuo</name></author><id>tag:note.koko.guru,2019-03-12:/python-install-python2-on-mac.html</id><summary type="html">&lt;p&gt;對於使用 Mac 的開發者而言，雖然 Python 都會有內建在系統中，但是可能因為 Mac 出產時間，所以版本會過舊，如果想要自己安裝 Python 的話，可以參考此篇文章，如何在 Mac 上安裝 Python 2 到系統中，並且可以被讀取到安裝的 Python 版本，而不是系統原本內建的。&lt;/p&gt;</summary><content type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;對於使用 Mac 的開發者而言，雖然 Python 都會有內建在系統中，但是可能因為 Mac 出產時間，所以版本會過舊，如果想要自己安裝 Python 的話，可以參考此篇文章，如何在 Mac 上安裝 Python 2 到系統中，並且可以被讀取到安裝的 Python 版本，而不是系統原本內建的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;安裝步驟&lt;/h1&gt;
&lt;hr&gt;
&lt;h2&gt;步驟一：安裝 XCode 或 Xcode 命名行工具&lt;/h2&gt;
&lt;p&gt;這是開發 Mac 或 iPhone 等 iOS 程式所用的開發工具，安裝此工具的原因是因為，在安裝 XCode 時， 也會依同安裝 C 編譯器，而 Python 的底層是以 C 編寫成，所以會需要 C 的 Compiler 來驅動。&lt;/p&gt;
&lt;p&gt;開啟 Terminal App ，並且輸入以下指令安裝 Xcode 的命名行工具：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&amp;gt; xcode-select --install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="../images/20190312-python-install-python2-on-mac/1-Install-XCode-Tool.png" alt="1-Install-XCode-Tool" /&gt;&lt;/p&gt;
&lt;p&gt;除了上述的方式，也可以透過 Mac 上的 App Store 安裝完全版的 XCode 開發工具。&lt;/p&gt;
&lt;h2&gt;步驟二：安裝 Homebrew&lt;/h2&gt;
&lt;p&gt;Homebrew 是 Mac 專用的套件管理工具，如同 Linux 中的 &lt;code&gt;apt&lt;/code&gt; 或是 &lt;code&gt;yum&lt;/code&gt; 工具，後續透過 Homebrew 來安裝 Python ，進入 Homebrew 官網，依照步驟，在 Terminal 輸入下列此串：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&amp;gt; /usr/bin/ruby -e &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="../images/20190312-python-install-python2-on-mac/2-Install-Homebrew.png" alt="2-Install-Homebrew" /&gt;&lt;/p&gt;
&lt;h2&gt;步驟三：設定讀取 Homebrew 指令的環境變數&lt;/h2&gt;
&lt;p&gt;安裝完後，為了要使 Homebrew 的指令可以被 Mac 的 Terminal 中的 Bash 程式讀取到，需要設定 &lt;code&gt;/usr/local/bin&lt;/code&gt; 與 &lt;code&gt;/usr/local/sbin&lt;/code&gt; 至環境變數。&lt;/p&gt;
&lt;p&gt;建立一個 &lt;code&gt;.bash_profile&lt;/code&gt; 或是 &lt;code&gt;.profile&lt;/code&gt; （如果已有其中一個檔案則不需再次建立）並且在檔案中新增此行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/bin:/usr/local/sbin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或是可以透過 Shell 的另一種語法雙引號來設定&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;PATH=/usr/local/bin:/usr/local/sbin:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;設定完成後，關閉 Terminal 應用程式重開 或是直接在 Terminal 中輸入以下指令啟動 &lt;code&gt;.bash_profile&lt;/code&gt; 或 &lt;code&gt;.profile&lt;/code&gt; 啟動即可（以下以 &lt;code&gt;.bash_pofile&lt;/code&gt; 為例 ）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&amp;gt; &lt;span class="nb"&gt;source&lt;/span&gt; ~/.bash_pofile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著便可以透過輸入 &lt;code&gt;brew&lt;/code&gt; 來做所有跟 Homebrew 有關的套件管理操作行為了！ &lt;/p&gt;
&lt;p&gt;例如要對 Homrbew 診斷可以輸入以下指令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&amp;gt; brew doctor
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更詳細的 Hombrew 安裝可以參考 &lt;a href="https://note.koko.guru/mac-install-homebrew.html"&gt;Homebrew (1) - Mac 上安裝 Homebrew 套件管理工具&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;步驟四：透過 Homebrew 安裝 Python&lt;/h2&gt;
&lt;p&gt;安裝 Python 其實除了透過 Homebrew 的方式外，也可以透過 Python 官方網站，下載 &lt;code&gt;.pkg&lt;/code&gt; 的安裝包，但是因為安裝完後檔案的路徑會分別在：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;位置一：&lt;/strong&gt; &lt;code&gt;/Library/Frameworks/Python.framework&lt;/code&gt;
&lt;strong&gt;位置二：&lt;/strong&gt; &lt;code&gt;/usr/local/bin/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;這兩個位置，位置二是一個 symlink。另外，安裝包也會附帶 IDLE、PythonLauncher 這兩個軟體，安裝在 Application 資料夾。&lt;/p&gt;
&lt;p&gt;因此需要除了自己紀錄位置外，刪除時，也要自己去找尋上述兩個位置與 IDLE、PythonLauncher 分別刪除，所以不推薦。&lt;/p&gt;
&lt;p&gt;而透過 Homebrew 安裝除了， Homebrew 會列出 Python 的安裝位置外，也會把其他未來安裝的套件放在同一處，移除與升級都可以透過指令達成，因此非常便利，所以推薦在 Mac 上使用 Homebrew 安裝。&lt;/p&gt;
&lt;p&gt;在 Homebrew 中， 目前 Python 2 會以 &lt;code&gt;python@2&lt;/code&gt; 的套件名稱呈現，如下執行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&amp;gt; brew install python@2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Homebrew 會一同連 &lt;code&gt;pip&lt;/code&gt; 也安裝進去，如下安裝完的結果與訊息：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python-install-python2-on-mac/3-install-python2-by-homebrew.png" alt="3-install-python2-by-homebrew" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;安裝完後 Homebrew 會自動為放在 &lt;code&gt;Cellar&lt;/code&gt; 的 &lt;code&gt;Python@2&lt;/code&gt; 在 Mac 的 &lt;code&gt;/usr/local/opt&lt;/code&gt; 與 &lt;code&gt;/usr/local/bin&lt;/code&gt; 分別建置 link 檔案，如下為 &lt;code&gt;/usr/local/opt&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python-install-python2-on-mac/4-installed-python2-location-1.png" alt="4-installed-python2-location-1" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/usr/local/bin&lt;/code&gt; 也有：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python-install-python2-on-mac/4-installed-python2-location-2.png" alt="4-installed-python2-location-2" /&gt;&lt;/p&gt;
&lt;p&gt;因此，雖然在另一篇在 &lt;a href="http://pythonguidecn.readthedocs.io/zh/latest/starting/install/osx.html"&gt;Mac OS X 上安装 Python 2&lt;/a&gt; 有提及需要設定以下 &lt;code&gt;/usr/local/opt/python@2&lt;/code&gt; 在環境變數：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/local/opt/python@2/libexec/bin:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但因為 Homebrew 也會在 &lt;code&gt;/usr/local/bin&lt;/code&gt; 中建立 Python2 的 Link 環境，因此其實不需要再去設定 &lt;code&gt;/usr/local/opt/python@2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;除非今天環境中也有安裝 Python 3 ，並且希望可以透過 &lt;code&gt;.bash_profile&lt;/code&gt; 明確區分 Mac 優先以 python 讀取的指令是來自 Python 3 或 Python 2 時，可以放進去，參考 &lt;a href="https://note.koko.guru/python2-python3-run-on-mac.html"&gt;Python2 與 Python 3 共存的設定 (以 Mac 為例)&lt;/a&gt; 中文章&lt;/p&gt;
&lt;p&gt;而當安裝完後， 重新開啟 Terminal 直接輸入 Python 時，會讀取到 Homebrew 安裝的 Python 嗎？ &lt;/p&gt;
&lt;p&gt;答案是根據在 &lt;code&gt;~/.bash_profile&lt;/code&gt; 中 PATH 設定的順序。&lt;/p&gt;
&lt;p&gt;因為再設定環境變數時，系統內建的環境變數 &lt;code&gt;$PATH&lt;/code&gt; 是放在後頭， /&lt;code&gt;usr/local/bin&lt;/code&gt; 是在前面，因此輸入 Python 指令時 Bash 讀取 &lt;code&gt;~/.bash_profile&lt;/code&gt; 會先讀到 &lt;code&gt;/usr/local/bin&lt;/code&gt; 底下 &lt;code&gt;python@2&lt;/code&gt; 的 &lt;code&gt;python&lt;/code&gt; 指令 Link 檔，因而找到 Homebrew 安裝的 Python 2。&lt;/p&gt;
&lt;p&gt;因此我們透過透過 &lt;code&gt;python -h&lt;/code&gt; 查看後會發現目前的確讀到 Homebrew 安裝的 Python：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python-install-python2-on-mac/5-python2-help-command.png" alt="5-python2-help-command"/&gt;&lt;/p&gt;
&lt;p&gt;至此已經完成 Python2 的安裝。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;參考文章&lt;/h1&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://medium.com/denix-daily/macos%E4%B8%8A%E7%9A%84python%E8%B7%AF%E5%BE%91%E5%95%8F%E9%A1%8C-%E5%AE%89%E8%A3%9D%E6%96%B9%E6%B3%95-a10c01cc42a"&gt;MacOS 上的 Python 路徑問題＆安裝方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonguidecn.readthedocs.io/zh/latest/starting/install/osx.html"&gt;在 Mac OS X 上安装 Python 2&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Python"></category><category term="Mac"></category><category term="Python2"></category></entry><entry><title>Python - 安裝 Python3 在 Mac 上 (Python 3.6.5 為例）</title><link href="https://note.koko.guru/python-install-python3-on-mac.html" rel="alternate"></link><published>2019-03-12T00:00:00+08:00</published><updated>2019-03-12T00:00:00+08:00</updated><author><name>kokokuo</name></author><id>tag:note.koko.guru,2019-03-12:/python-install-python3-on-mac.html</id><summary type="html">&lt;p&gt;由於 Python 2.7 的核心開發團隊公布 2020 年確定會捨棄 2.7 版本，因此會有越來越多人開始轉移到 Python 3 版本，所以下面我們來介紹安裝 Python 3 在 Mac 的話如何處理。&lt;/p&gt;</summary><content type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;由於 Python 2.7 的核心開發團隊公布 2020 年確定會捨棄 2.7 版本，因此會有越來越多人開始轉移到 Python 3 版本，所以下面我們來介紹安裝 Python 3 在 Mac 的話如何處理。&lt;/p&gt;
&lt;h1&gt;安裝步驟&lt;/h1&gt;
&lt;hr&gt;
&lt;h2&gt;步驟一：安裝 XCode 或 Xcode 命名行工具&lt;/h2&gt;
&lt;p&gt;這是開發 Mac 或 iPhone 等 iOS 程式所用的開發工具，安裝此工具的原因是因為，在安裝 XCode 時， 也會依同安裝 C 編譯器，而 Python 的底層是以 C 編寫成，所以會需要 C 的 Compiler 來驅動。&lt;/p&gt;
&lt;p&gt;開啟 Terminal App ，並且輸入以下指令安裝 Xcode 的命名行工具：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&amp;gt; xcode-select --install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="../images/20190312-python-install-python3-on-mac/1-Install-XCode-Tool.png" alt="1-Install-XCode-Tool" /&gt;&lt;/p&gt;
&lt;p&gt;除了上述的方式，也可以透過 Mac 上的 App Store 安裝完全版的 XCode 開發工具。&lt;/p&gt;
&lt;h2&gt;步驟二：安裝 Homebrew&lt;/h2&gt;
&lt;p&gt;Homebrew 是 Mac 專用的套件管理工具，如同 Linux 中的 &lt;code&gt;apt&lt;/code&gt; 或是 &lt;code&gt;yum&lt;/code&gt; 工具，後續透過 Homebrew 來安裝 Python ，進入 Homebrew 官網，依照步驟，在 Terminal 輸入下列此串：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&amp;gt; /usr/bin/ruby -e &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="../images/20190312-python-install-python3-on-mac/2-Install-Homebrew.png" alt="2-Install-Homebrew"/&gt;&lt;/p&gt;
&lt;h2&gt;步驟三：設定讀取 Homebrew 指令的環境變數&lt;/h2&gt;
&lt;p&gt;安裝完後，為了要使 Homebrew 的指令可以被 Mac 的 Terminal 中的 Bash 程式讀取到，需要設定 &lt;code&gt;/usr/local/bin&lt;/code&gt; 與 &lt;code&gt;/usr/local/sbin&lt;/code&gt; 至環境變數。&lt;/p&gt;
&lt;p&gt;建立一個 &lt;code&gt;.bash_profile&lt;/code&gt; 或是 &lt;code&gt;.profile&lt;/code&gt; （如果已有其中一個檔案則不需再次建立）並且在檔案中新增此行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/bin:/usr/local/sbin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或是可以透過 Shell 的另一種語法雙引號來設定&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;PATH=/usr/local/bin:/usr/local/sbin:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;設定完成後，關閉 Terminal 應用程式重開 或是直接在 Terminal 中輸入以下指令啟動 &lt;code&gt;.bash_profile&lt;/code&gt; 或 &lt;code&gt;.profile&lt;/code&gt; 啟動即可（以下以 &lt;code&gt;.bash_pofile&lt;/code&gt; 為例 ）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&amp;gt; &lt;span class="nb"&gt;source&lt;/span&gt; ~/.bash_pofile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著便可以透過輸入 &lt;code&gt;brew&lt;/code&gt; 來做所有跟 Homebrew 有關的套件管理操作行為了！ &lt;/p&gt;
&lt;p&gt;例如要對 Homrbew 診斷可以輸入以下指令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&amp;gt; brew doctor
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更詳細的 Hombrew 安裝可以參考 &lt;a href="https://note.koko.guru/mac-install-homebrew.html"&gt;Homebrew (1) - Mac 上安裝 Homebrew 套件管理工具&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;步驟四：透過 Homebrew 安裝 Python3&lt;/h2&gt;
&lt;p&gt;安裝 Python 其實除了透過 Homebrew 的方式外，也可以透過 Python 官方網站，下載 &lt;code&gt;.pkg&lt;/code&gt; 的安裝包，但是因為安裝完後檔案的路徑會分別在：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;位置一：&lt;/strong&gt; &lt;code&gt;/Library/Frameworks/Python3.framework&lt;/code&gt;
&lt;strong&gt;位置二：&lt;/strong&gt; &lt;code&gt;/usr/local/bin/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;這兩個位置，位置二是一個 symlink。另外，安裝包也會附帶 IDLE、PythonLauncher 這兩個軟體，安裝在 Application 資料夾。&lt;/p&gt;
&lt;p&gt;因此需要除了自己紀錄位置外，刪除時，也要自己去找尋上述兩個位置與 IDLE、PythonLauncher 分別刪除，所以不推薦。&lt;/p&gt;
&lt;p&gt;而透過 Homebrew 安裝除了， Homebrew 會列出 Python 的安裝位置外，也會把其他未來安裝的套件放在同一處，移除與升級都可以透過指令達成，因此非常便利，所以推薦在 Mac 上使用 Homebrew 安裝。&lt;/p&gt;
&lt;p&gt;在 Homebrew 中， 目前 Python 3 會以 python 的套件名稱呈現，如下執行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&amp;gt; brew install python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Homebrew 會一同連 &lt;code&gt;pip&lt;/code&gt; 也安裝進去，而在 Python3 中 &lt;code&gt;pip&lt;/code&gt; 名稱為 &lt;code&gt;pip3&lt;/code&gt;，如下安裝完的結果與訊息：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python-install-python3-on-mac/3-python-install-python3-by-homebrew.png" alt="3-python-install-python3-by-homebrew"/&gt;&lt;/p&gt;
&lt;p&gt;安裝完後 Homebrew 會自動為放在 &lt;code&gt;Cellar&lt;/code&gt; 的 Python 3，並在 Mac 的 &lt;code&gt;/usr/local/opt&lt;/code&gt; 與 &lt;code&gt;/usr/local/bin&lt;/code&gt; 分別建置 link 檔案，如下為 &lt;code&gt;/usr/local/opt&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python-install-python3-on-mac/4-installed-python3-location-1.png" alt="4-installed-python3-location-1"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/usr/local/bin&lt;/code&gt; 也有：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python-install-python3-on-mac/4-installed-python3-location-2.png" alt="4-installed-python3-location-2"/&gt;&lt;/p&gt;
&lt;h2&gt;步驟五：設定 Python 3 作為預設執行的指令&lt;/h2&gt;
&lt;p&gt;若先前沒有以 Homebrew 安裝 Python 2 的話，那麼當下安裝 Python 3 時，如果從 Terminal 中直接輸入 &lt;code&gt;python&lt;/code&gt;，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&amp;gt; python 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;會出現的是內建的 Mac Python 2.7，這是為何呢？&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python-install-python3-on-mac/4-python2-mac-default-version.png" alt="4-python2-mac-default-version"/&gt;&lt;/p&gt;
&lt;p&gt;我們來查看 &lt;code&gt;/usr/local/bin&lt;/code&gt; 目錄下，你會發現並沒有  Python 3 提供的  &lt;code&gt;python&lt;/code&gt; 可執行檔，而只有 &lt;code&gt;python3&lt;/code&gt; 執行檔，因此當你輸入 &lt;code&gt;python&lt;/code&gt; 時， Mac 因為來到 &lt;code&gt;/usr/local/bin&lt;/code&gt; 目錄下沒有找到 &lt;code&gt;python&lt;/code&gt; 可執行檔，才會保持原先的狀態，近一步往下一個位置找，並找到內建的版本，直接使用內建的 python 2.7。&lt;/p&gt;
&lt;p&gt;只有當輸入 &lt;code&gt;python3&lt;/code&gt;，你才會顯示 Homebrew 的 Python3.6.5&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&amp;gt; python3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果想要讓 Mac Terminal 在輸入 &lt;code&gt;python&lt;/code&gt; 指令時，會自動開啟 Homebrew 安裝的 Python 3，解決辦法是設定 &lt;code&gt;/usr/local/opt&lt;/code&gt; 下的 Homebrew Python 3 來源到系統環境變數前，使 PATH 先讀到 Homebrew 的 Python3：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python-install-python3-on-mac/5-python3-system-path-setting.png" alt="5-python3-system-path-setting" width="480px"/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/local/opt/python/libexec/bin:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;完成後重開 Terminal 或透過 &lt;code&gt;source&lt;/code&gt; 執行，即可成功，如下圖。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python-install-python3-on-mac/6-python3-command.png" alt="6-python3-command"/&gt;&lt;/p&gt;
&lt;p&gt;到此，因為先讀取到的 &lt;code&gt;/usr/local/opt/python/libexec/bin&lt;/code&gt; 下方有提供 Python 3 的 &lt;code&gt;python&lt;/code&gt; 可執行檔案，即可以透過原本的 &lt;code&gt;python3&lt;/code&gt; 或設定好的 &lt;code&gt;python&lt;/code&gt; 指令啟動 Python 3 。另外此設定也會影響到 &lt;code&gt;pip&lt;/code&gt; 指令：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python-install-python3-on-mac/7-show-pip-cource-in-python3.png" alt="7-show-pip-cource-in-python3"/&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;a href="https://note.koko.guru/python2-python3-run-on-mac.html"&gt;Python2 與 Python 3 共存的設定 (以 Mac 為例)&lt;/a&gt; 此篇中亦有介紹如何設定預設 Mac 的 &lt;code&gt;python&lt;/code&gt; 指令讀取來源。&lt;/p&gt;
&lt;h1&gt;參考文章&lt;/h1&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://medium.com/denix-daily/macos%E4%B8%8A%E7%9A%84python%E8%B7%AF%E5%BE%91%E5%95%8F%E9%A1%8C-%E5%AE%89%E8%A3%9D%E6%96%B9%E6%B3%95-a10c01cc42a"&gt;MacOS 上 的 Python 路徑問題＆安裝方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonguidecn.readthedocs.io/zh/latest/starting/install3/osx.html"&gt;在 Mac OS X 上安装 Python 3&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Python"></category><category term="Mac"></category><category term="Python3"></category></entry><entry><title>Python2 與 Python 3 共存的設定 (以 Mac 為例）</title><link href="https://note.koko.guru/python2-python3-run-on-mac.html" rel="alternate"></link><published>2019-03-12T00:00:00+08:00</published><updated>2019-03-12T00:00:00+08:00</updated><author><name>kokokuo</name></author><id>tag:note.koko.guru,2019-03-12:/python2-python3-run-on-mac.html</id><summary type="html">&lt;p&gt;當你的 Mac 系統要同時使用到 Python 2 與 Python 3 的專案時，就會遇到需要同時安裝多個 Python 版本在電腦中，可是此時要如何設定透過指令啟動不同的版本，以下我們以 &lt;strong&gt;Python 2.7.15&lt;/strong&gt; 與 &lt;strong&gt;Python 3.6.5&lt;/strong&gt; 為例子，並舉出兩個常見的 Python 2 與 Python 3 例子。&lt;/p&gt;</summary><content type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;當你的 Mac 系統要同時使用到 Python 2 與 Python 3 的專案時，就會遇到需要同時安裝多個 Python 版本在電腦中，可是此時要如何設定透過指令啟動不同的版本，以下我們以 &lt;strong&gt;Python 2.7.15&lt;/strong&gt; 與 &lt;strong&gt;Python 3.6.5&lt;/strong&gt; 為例子，並舉出兩個常見的 Python 2 與 Python 3 例子。&lt;/p&gt;
&lt;h1&gt;解決方法&lt;/h1&gt;
&lt;hr&gt;
&lt;h2&gt;例子一：Mac 內建 Python 2 與 安裝 Homebrew 的 Python 3&lt;/h2&gt;
&lt;p&gt;若先前沒有以 Homebrew 安裝 Python 2 的話，那麼當下安裝 Python 3 時，如果從 Terminal 中直接輸入 &lt;code&gt;python&lt;/code&gt;，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&amp;gt; python 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;會出現的是內建的 Mac Python 2.7：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python2-python3-run-on-mac/1-python2-command.png" alt="1-python2-command"/&gt;&lt;/p&gt;
&lt;p&gt;這是為何呢？&lt;/p&gt;
&lt;p&gt;我們來查看 &lt;code&gt;/usr/local/bin&lt;/code&gt; 目錄下，你會發現並沒有  Python 3 提供的  &lt;code&gt;python&lt;/code&gt; 可執行檔，而只有 &lt;code&gt;python3&lt;/code&gt; 執行檔，因此當你輸入 &lt;code&gt;python&lt;/code&gt; 時， Mac 因為來到 &lt;code&gt;/usr/local/bin&lt;/code&gt; 目錄下沒有找到 &lt;code&gt;python&lt;/code&gt; 可執行檔，才會保持原先的狀態，近一步往下一個位置找，並找到內建的版本，直接使用內建的 python 2.7。&lt;/p&gt;
&lt;p&gt;只有當輸入 &lt;code&gt;python3&lt;/code&gt;，你才會顯示 Homebrew 的 Python3.6.5&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&amp;gt; python3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="../images/20190312-python2-python3-run-on-mac/2-python3-command.png" alt="2-python3-command"/&gt;&lt;/p&gt;
&lt;p&gt;如果想要讓 Mac Terminal 在輸入 &lt;code&gt;python&lt;/code&gt; 指令時，會自動開啟 Homebrew 安裝的 Python 3，解決辦法是設定 &lt;code&gt;/usr/local/opt&lt;/code&gt; 下的 Homebrew Python 3 來源到系統環境變數前，使 PATH 先讀到 Homebrew 的 Python3：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python2-python3-run-on-mac/3-python3-system-path-setting.png" alt="3-python3-system-path-setting" width="480px"/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/local/opt/python/libexec/bin:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;完成後重開 Terminal 或透過 &lt;code&gt;source&lt;/code&gt; 執行，即可成功，如下圖。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python2-python3-run-on-mac/4-python3-command.png" alt="4-python3-command"/&gt;&lt;/p&gt;
&lt;p&gt;到此，可以透過 &lt;code&gt;python3&lt;/code&gt; 或設定好的 &lt;code&gt;python&lt;/code&gt; 指令啟動 Python 3 。&lt;/p&gt;
&lt;h2&gt;例子二： Homebrew 安裝 Python 2 與 Python 3 時&lt;/h2&gt;
&lt;p&gt;當透過 Homebrew 安裝了 Python2 與 Python 3 後，分別查看 &lt;code&gt;/usr/local/bin&lt;/code&gt; 與 &lt;code&gt;/usr/local/opt&lt;/code&gt; 時會發現 &lt;code&gt;/usr/local/bin&lt;/code&gt; 下的 &lt;code&gt;python&lt;/code&gt; 是導向 Homebrew 安裝 Python 2.7.15，如下圖：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python2-python3-run-on-mac/5-python2-and-python3-location.png" alt="5-python2-and-python3-location"/&gt;&lt;/p&gt;
&lt;p&gt;然而 &lt;code&gt;/usr/local/opt&lt;/code&gt; 則是 &lt;code&gt;python&lt;/code&gt; 位置導向 Python3：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python2-python3-run-on-mac/6-opt-location-python-link.png" alt="6-opt-location-python-link"/&gt;&lt;/p&gt;
&lt;p&gt;因此當我們分別輸入以下三種指令情況&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&amp;gt; python
$&amp;gt; python2
$&amp;gt; python3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;會發現內建的 Python 指令會指定 Homebrew 安裝的 Python 2.7.15:&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python2-python3-run-on-mac/7-test-python2-python3-command.png" alt="7-test-python2-python3-command"/&gt;&lt;/p&gt;
&lt;p&gt;此原因透過 &lt;code&gt;export&lt;/code&gt; 會發現， 因為系統 &lt;code&gt;PATH&lt;/code&gt;中會先讀取到的 &lt;code&gt;/usr/local/bin&lt;/code&gt; ，因此 Homebrew 的 Python 會取代掉 Mac 內建的 Python 。
再來因為  &lt;code&gt;/usr/local/bin&lt;/code&gt; 下的 &lt;code&gt;python&lt;/code&gt; 指令是 Link 到 Homebrew 的 &lt;code&gt;python@2&lt;/code&gt; ，因此會是執行 Python 2.7 而非 Python 3。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python2-python3-run-on-mac/8-system-path-order.png" alt="8-system-path-order"/&gt;&lt;/p&gt;
&lt;p&gt;此時，如果想要把預設的 python 替換成 Homebrew 的 Python3 ，那麼便是如同例子一依樣設定 Python 3 所在的位置 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/local/opt/python/libexec/bin:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;到環境變數中，如下後再重新開啟 Terminal 或是透過 &lt;code&gt;source&lt;/code&gt; 啟動即可。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python2-python3-run-on-mac/9-python3-order-first-system-path.png" alt="9-python3-order-first-system-path" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;此時 &lt;code&gt;PATH&lt;/code&gt; 環境變數會先讀取到 Python 3 的位置，並抓取 &lt;code&gt;python&lt;/code&gt; 可執行檔。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python2-python3-run-on-mac/10-python3-order-first-system-path-2.png" alt="10-python3-order-first-system-path-2"/&gt;&lt;/p&gt;
&lt;p&gt;因此當再次測試 &lt;code&gt;python&lt;/code&gt; 指令會發現預設的 &lt;code&gt;python&lt;/code&gt; 已經變為 Python 3 的位置。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&amp;gt; python
$&amp;gt; python2
$&amp;gt; python3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="../images/20190312-python2-python3-run-on-mac/11-python3-command-first.png" alt="11-python3-command-first"/&gt;&lt;/p&gt;
&lt;p&gt;可以透過 &lt;code&gt;python -h&lt;/code&gt; 查看路徑：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python2-python3-run-on-mac/12-python-command-show-python3-path.png" alt="12-python-command-show-python3-path"/&gt;&lt;/p&gt;
&lt;p&gt;即可設定完成。&lt;/p&gt;
&lt;h1&gt;預設 python 指令對 pip 的影響&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;上述的 &lt;code&gt;python&lt;/code&gt; 指令同時也會對 &lt;code&gt;pip&lt;/code&gt; 造成影響，如果現在預設的 &lt;code&gt;python&lt;/code&gt; 是讀取 Python 3 那麼 &lt;code&gt;pip&lt;/code&gt; 也會是 Python 3 的 &lt;code&gt;pip&lt;/code&gt;，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python2-python3-run-on-mac/13-show-pip-path.png" alt="13-show-pip-path"/&gt;&lt;/p&gt;
&lt;p&gt;如果預設的 &lt;code&gt;python&lt;/code&gt; 是讀取 Python 2 ，那麼 &lt;code&gt;pip&lt;/code&gt; 則會是 Python 2 的 &lt;code&gt;pip&lt;/code&gt; 。&lt;/p&gt;
&lt;h2&gt;明確區分 Homebrew Python 2 的來源&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;上述的設定中，如果想要明確區分  &lt;code&gt;python&lt;/code&gt; 指令加入環境變數的來源，也可以對 Homebrew 的 &lt;code&gt;python@2&lt;/code&gt; 加入環境變數，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/local/opt/python@2/libexec/bin:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因此未來便可以透過修改 &lt;code&gt;.bash_profile&lt;/code&gt; 去做預設 &lt;code&gt;python&lt;/code&gt; 指令讀取設定的開關：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python2-python3-run-on-mac/14-bash-profile-setting.png" alt="14-bash-profile-setting" width="480px" /&gt;&lt;/p&gt;
&lt;p&gt;最後觀察一下環境變數，分別設定完成。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python2-python3-run-on-mac/15-readable-system-path.png" alt="15-readable-system-path"/&gt;&lt;/p&gt;</content><category term="Python2"></category><category term="Mac"></category><category term="Python3"></category></entry><entry><title>Python - 透過 .venv 管理 Pipenv 虛擬環境的來源</title><link href="https://note.koko.guru/pipenv-use-dot-venv-folder.html" rel="alternate"></link><published>2019-03-11T00:00:00+08:00</published><updated>2019-03-11T00:00:00+08:00</updated><author><name>kokokuo</name></author><id>tag:note.koko.guru,2019-03-11:/pipenv-use-dot-venv-folder.html</id><summary type="html">&lt;p&gt;在前一篇 &lt;a href="https://note.koko.guru/python-pipenv-install-and-usage.html"&gt;Python - 結合 pip 與 virtualenv 的虛擬環境與套件管理的二合一新利器 Pipenv&lt;/a&gt; 中提到透過 Pipenv 建立好的虛擬環境都會放在家目錄下的隱藏路徑統一管理，但是開發時如果使用編輯器像是 VSCode ，則需要一個一個設定以外，如果想要查看檔案也不方，所以能不能夠把建立好的專案虛擬目錄放在自己的專案下呢？答案是可以的，如果你正需要的話可以參考此篇。&lt;/p&gt;</summary><content type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;在前一篇 &lt;a href="https://note.koko.guru/python-pipenv-install-and-usage.html"&gt;Python - 結合 pip 與 virtualenv 的虛擬環境與套件管理的二合一新利器 Pipenv&lt;/a&gt; 中提到透過 Pipenv 建立好的虛擬環境都會放在用戶家目錄下的 &lt;code&gt;.local/share/ virtualenvs/&lt;/code&gt; 路徑，並且統一管理。&lt;/p&gt;
&lt;p&gt;但是如果用編輯器像是 VSCode 開發時，還要設定虛擬目錄的來源很麻煩（因為每個虛擬目錄的命名都不同）所以能不能夠把建立好的專案虛擬目錄放在自己的專案下呢？答案是可以的，如果你正需要的話可以參考此篇。&lt;/p&gt;
&lt;h1&gt;建立 &lt;code&gt;.venv&lt;/code&gt; 管理你的虛擬環境目錄&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;作法很簡單，只要在建立虛擬環境前，先在你的專案目錄下建立一個 &lt;code&gt;.venv&lt;/code&gt; 的目錄，在照一般建立虛擬環境的方式就好，不管你是用 &lt;code&gt;pipenv install&lt;/code&gt;, &lt;code&gt;pipenv shell&lt;/code&gt; 或是其他指令讓 Pipenv 偵測沒有虛擬環境而建立都可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;parser/&amp;gt; mkdir .venv
parser/&amp;gt; pipenv shell
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如下圖，你會看到虛擬環境被建立在 &lt;code&gt;parser&lt;/code&gt; 這個專案下的 &lt;code&gt;.venv&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190311-pipenv-use-dot-venv-folder/1-pipenv-mkdir-dot.venv-create-virtualenv.png" alt="1-pipenv-mkdir-dot.venv-create-virtualenv" /&gt;&lt;/p&gt;
&lt;p&gt;因為 &lt;code&gt;pipenv shell&lt;/code&gt; 只會建立 &lt;code&gt;Pipfile&lt;/code&gt;，所以我們再透過 &lt;code&gt;pipenv install&lt;/code&gt; 或是 &lt;code&gt;pipenv lock&lt;/code&gt; 建立 &lt;code&gt;Pipfile.lock&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190311-pipenv-use-dot-venv-folder/2-pipenv-show-dot-venv.png" alt="2-pipenv-show-dot-venv" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;此時你會虛擬環境的檔案被建置在 &lt;code&gt;.venv&lt;/code&gt; 下。&lt;/p&gt;
&lt;h1&gt;參考資料&lt;/h1&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://qiita.com/youkidkk/items/b6a6e39ee3a109001c75"&gt;Windows + Python 3.6 + PipEnv + Visual Studio Code でPython 開発環境&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Python"></category><category term="Pipenv"></category><category term="Virtualenv"></category></entry><entry><title>Python - 結合 pip 與 virtualenv 的虛擬環境與套件管理的二合一新利器 Pipenv</title><link href="https://note.koko.guru/python-pipenv-install-and-usage.html" rel="alternate"></link><published>2019-03-08T00:00:00+08:00</published><updated>2019-03-08T00:00:00+08:00</updated><author><name>kokokuo</name></author><id>tag:note.koko.guru,2019-03-08:/python-pipenv-install-and-usage.html</id><summary type="html">&lt;p&gt;使用 Python 做開發的人，多數都會使用虛擬環境，特別是 &lt;code&gt;virtualenv&lt;/code&gt; 作為建立開發並隔離環境的方式，但是使用一段時間後都會遇到一些管理或是協作上的問題，為了解決這些困擾，新的套件 &lt;strong&gt;Pipenv&lt;/strong&gt; 誕生了，不僅解決了所有問題，在使用上還非常方便，此篇就來深入了解與學習如何使用  &lt;strong&gt;Pipenv&lt;/strong&gt;  吧&lt;/p&gt;</summary><content type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;使用 Python 做開發的人，多數都會使用虛擬環境，特別是 &lt;code&gt;virtualenv&lt;/code&gt; 作為建立開發並隔離環境的方式，而且這個工作的流程不外乎就是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;透過建立虛擬環境 &lt;code&gt;virtualenv&lt;/code&gt; 來隔離 Python 的開發環境&lt;/li&gt;
&lt;li&gt;進入虛擬環境後，透過 &lt;code&gt;pip&lt;/code&gt; 下載套件&lt;/li&gt;
&lt;li&gt;為了方便後續專案的保存、上版控與移轉，透過建立 &lt;code&gt;requirements.txt&lt;/code&gt; 來保存虛擬環境中透過 &lt;code&gt;pip&lt;/code&gt; 所安裝的套件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但是現有透過建立虛擬環境隔離與產生 &lt;code&gt;requirements.txt&lt;/code&gt; 保存該虛擬環境中所安裝的套件都會有一些問題：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;requirements.txt&lt;/code&gt; 是需要手動更新的，所以當透過 &lt;code&gt;pip&lt;/code&gt; 下載或更新套件後，&lt;code&gt;requirements.txt&lt;/code&gt; 是不會自動更新。因此專案移轉時，若忘記更新 &lt;code&gt;requirements.txt&lt;/code&gt; 會導致新安裝的套件或是更新的套件都沒有被記錄下來，拿到你專案的人也會無法跑起來。
&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;你安裝的套件 A 與套件 B 都相依了套件 C 的 &lt;code&gt;1.1&lt;/code&gt; 版，但某一天你更新了套件 B ，因為套件 B 需要套件 C 的 &lt;code&gt;1.2&lt;/code&gt; 版，所以一併更新了相依的套件 C 到 &lt;code&gt;1.2&lt;/code&gt; 版，但是你的套件 A 卻仍相依套件 C 的 &lt;code&gt;1.1&lt;/code&gt; 版，導致套件 A 反而無法使用。
&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;你透過 &lt;code&gt;pip&lt;/code&gt; 所安裝的套件，並不會特別紀錄哪些是屬於該套件的相依套件，例如今天你下載了一個套件 D ，而套件 D 因為相依所以也下載安裝了套件 E 與 F，但是當你透過 &lt;code&gt;pip list&lt;/code&gt; 查閱時，&lt;code&gt;pip&lt;/code&gt; 卻不會告知你他是相依套件，所以若是此套件的相依一多就無法整理。
&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;因此同事協作開發時，同事若想要查詢你所安裝的套件的文件與手冊，也會因為無法知道你所用的主要套件是哪些，因此難以查尋該套件的相關文章協助開發。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此雖然 &lt;code&gt;virtualenv&lt;/code&gt; 是一個可以幫助我們在開發 Python 專案時，隔離主系統與其他專案環境的好工具，但是 &lt;code&gt;virtualenv&lt;/code&gt; 依然不夠好用。&lt;/p&gt;
&lt;p&gt;所以 &lt;strong&gt;&lt;a href="https://pipenv.readthedocs.io/en/latest/"&gt;Pipenv&lt;/a&gt;&lt;/strong&gt; 便隨之誕生了，一套更強的虛擬環境與套件管理的工具利器。&lt;/p&gt;
&lt;h1&gt;什麼是 Pipenv&lt;/h1&gt;
&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/pipenv-icon.png" alt="pipenv-icon" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://pipenv.readthedocs.io/en/latest/"&gt;Pipenv&lt;/a&gt;&lt;/strong&gt;  是為了解決上述所有現存套件管理與虛擬環境的問題而誕生了，正如其名，Pipenv 整合了 &lt;code&gt;pip&lt;/code&gt; 與 &lt;code&gt;virtualenv&lt;/code&gt;，是一套具備了建立虛擬環境同時能管理件的利器，他能做到並解決原本存在的問題：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;只需要 &lt;code&gt;pipenv&lt;/code&gt; 指令，不在需要分別使用 &lt;code&gt;pip&lt;/code&gt; 與 &lt;code&gt;virtualenv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;改透過 &lt;code&gt;Pipfile&lt;/code&gt; 與 &lt;code&gt;Pipfile.lock&lt;/code&gt; 來自動更新並維護安裝的套件，完全取代原先不完善的 &lt;code&gt;requirements.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;透過對套件做 hash 來做安全性檢查確認，當 hash 的結果不相同，跳出錯誤，防止惡意套件透過安裝侵入你的程式碼。&lt;/li&gt;
&lt;li&gt;可以透過建立一份 &lt;code&gt;.env&lt;/code&gt; 檔案在專案目錄下，來自動載入不同環境變數為你的專案直接使用。&lt;/li&gt;
&lt;li&gt;你安裝的套件 A 與套件 B 即便都相依了套件 C 的 &lt;code&gt;1.1&lt;/code&gt; 版，這個套件 C 也會被隔離成兩份，即便套件 B 的更新連帶更新了套件 C，也不會影響套件 A 所相依安裝的套件 C。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不過上述的感動都沒有親自看到來的高潮，所以讓我們接著來安裝與使用 Pipenv 套件吧！&lt;/p&gt;
&lt;h1&gt;安裝 Pipenv&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;讓我們先在 Python 系統環境下安裝 &lt;code&gt;pipenv&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~/&amp;gt; pip install pipenv
Usage: pipenv &lt;span class="o"&gt;[&lt;/span&gt;OPTIONS&lt;span class="o"&gt;]&lt;/span&gt; COMMAND &lt;span class="o"&gt;[&lt;/span&gt;ARGS&lt;span class="o"&gt;]&lt;/span&gt;...

Options:
  --where             Output project home information.
  --venv              Output virtualenv information.
  --py                Output Python interpreter information.
  --envs              Output Environment Variable options.
  --rm                Remove the virtualenv.
  --bare              Minimal output.
  --completion        Output completion &lt;span class="o"&gt;(&lt;/span&gt;to be eval&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;d&lt;span class="o"&gt;)&lt;/span&gt;.
  --man               Display manpage.
  --support           Output diagnostic information &lt;span class="k"&gt;for&lt;/span&gt; use in GitHub issues.
  --site-packages     Enable site-packages &lt;span class="k"&gt;for&lt;/span&gt; the virtualenv.  &lt;span class="o"&gt;[&lt;/span&gt;env var:
                      PIPENV_SITE_PACKAGES&lt;span class="o"&gt;]&lt;/span&gt;
  --python TEXT       Specify which version of Python virtualenv should use.
  --three / --two     Use Python &lt;span class="m"&gt;3&lt;/span&gt;/2 when creating virtualenv.
  --clear             Clears caches &lt;span class="o"&gt;(&lt;/span&gt;pipenv, pip, and pip-tools&lt;span class="o"&gt;)&lt;/span&gt;.  &lt;span class="o"&gt;[&lt;/span&gt;env var:
                      PIPENV_CLEAR&lt;span class="o"&gt;]&lt;/span&gt;
  -v, --verbose       Verbose mode.
  --pypi-mirror TEXT  Specify a PyPI mirror.
  --version           Show the version and exit.
  -h, --help          Show this message and exit.

Commands:
  check      Checks &lt;span class="k"&gt;for&lt;/span&gt; security vulnerabilities and against PEP &lt;span class="m"&gt;508&lt;/span&gt; markers
             provided in Pipfile.
  clean      Uninstalls all packages not specified in Pipfile.lock.
  graph      Displays currently-installed dependency graph information.
  install    Installs provided packages and adds them to Pipfile, or &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; no
             packages are given&lt;span class="o"&gt;)&lt;/span&gt;, installs all packages from Pipfile.
  lock       Generates Pipfile.lock.
  open       View a given module in your editor.
  run        Spawns a &lt;span class="nb"&gt;command&lt;/span&gt; installed into the virtualenv.
  shell      Spawns a shell within the virtualenv.
  sync       Installs all packages specified in Pipfile.lock.
  uninstall  Un-installs a provided package and removes it from Pipfile.
  update     Runs lock, &lt;span class="k"&gt;then&lt;/span&gt; sync.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;由於 Pipenv 會依賴 &lt;code&gt;virtualenv&lt;/code&gt; 與 &lt;code&gt;pip&lt;/code&gt; 套件，所以若是你沒有安裝 &lt;code&gt;virtualenv&lt;/code&gt; 也會一併安裝下來（ &lt;code&gt;pip&lt;/code&gt; 是原本已經內建在 Python 的套件 )&lt;/p&gt;
&lt;h1&gt;使用 Pipenv&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;Pipenv 是一套強大但入手時卻容易混淆的套件，由於 Pipenv 會很貼心的檢查許多狀況，所以使用時許多指令都會連貫性的完成其他單一動作的指令功能，因此你會發現許多指令都會 &lt;strong&gt;達到相同的結果&lt;/strong&gt;，如建置虛擬環境、產生 &lt;code&gt;Pipfile.lock&lt;/code&gt; 等等，導致反而對於指令原有的用途產生混淆。&lt;/p&gt;
&lt;p&gt;以下我們透過一個 &lt;code&gt;parser&lt;/code&gt; 專案做來例子來介紹 Pipenv 中常用的指令，以及觀察 Pipenv 為我們做了什麼神奇的現象。&lt;/p&gt;
&lt;h2&gt;1. 建立虛擬環境&lt;/h2&gt;
&lt;p&gt;進入要開發並準備建立虛擬環境的專案，透過 &lt;code&gt;pipenv install&lt;/code&gt; 來建立虛擬環境，此時 &lt;code&gt;pipenv install&lt;/code&gt; 會偵測你系統預設的 Python 版本環境，並且依照此版本建立虛擬環境：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~/&amp;gt; &lt;span class="nb"&gt;cd&lt;/span&gt; parser
parser/&amp;gt; pipenv install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如下圖你會看到在建置虛擬環境的過程中，Pipenv 使用了系統所提供的 &lt;code&gt;3.7.1&lt;/code&gt; 版，並且建立了虛擬環境出來，只不過與 &lt;code&gt;virtualenv&lt;/code&gt; 不同的是，Pipenv 會自動產生一個 &lt;code&gt;.local/share/ virtualenvs/&lt;/code&gt; 在你的家目錄下，並且把所有專案的虛擬環境統一放置在其中管理，例如 &lt;code&gt;parser&lt;/code&gt; 的虛擬目錄是 &lt;code&gt;parser-hvDw_3KS&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/1-create-virtualenv-by-pipenv.png" alt="1-create-virtualenv-by-pipenv" /&gt;&lt;/p&gt;
&lt;h3&gt;查詢虛擬環境所在位置&lt;/h3&gt;
&lt;p&gt;如果往後你忘了你的虛擬目錄所在位置，可以透過 &lt;code&gt;--venv&lt;/code&gt; 指令查詢哦，進到該目錄看，裡面放了從系統中複製過來 Python 的核心。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/2-virtualenv-path-by-pipenv.png" alt="2-virtualenv-path-by-pipenv" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;當虛擬環境完成後，你會接著發現，&lt;code&gt;pipenv install&lt;/code&gt; 這個指令自動產生了兩個檔案在你的專案中，分別是 &lt;code&gt;Pipfile&lt;/code&gt; 與 &lt;code&gt;Pipfile.lock&lt;/code&gt;，這兩個檔案是圍繞著 Pipenv 的整個核心，以下分別來介紹。&lt;/p&gt;
&lt;h3&gt;Pipfile&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Pipfile&lt;/code&gt; 取代了過去的 &lt;code&gt;requirements.txt&lt;/code&gt;，採用 &lt;a href="https://zh.wikipedia.org/zh-tw/TOML"&gt;TOML&lt;/a&gt; 語法格式，讓紀錄安裝過的套件資訊可以更豐富。&lt;/p&gt;
&lt;p&gt;開頭的 &lt;code&gt;[source]&lt;/code&gt; 記錄了套件安裝的網路來源位置，預設為 PyPI 官網來源，但是也意味著你可以取代成你團隊自己的私有 PyPI 位置，並且可以設定是否使用 SSL 加密協定。下方的 &lt;code&gt;[dev-packages]&lt;/code&gt; 紀錄了只有開發才會用到的安裝套件。 &lt;code&gt;[packages]&lt;/code&gt; 則如同過去我們開發與部署都需要用到的套件，並且紀錄的版本號。最後 &lt;code&gt;[requires]&lt;/code&gt; 紀錄了 Python 的版本號，因此 &lt;code&gt;Pipfile&lt;/code&gt; 的主要目的是用來幫助 Pipenv 紀錄套件的來源與下載的套件版本資訊以及 Python 的環境等設置檔案。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/3-pipenv-create-pipfile.png" alt="3-pipenv-create-pipfile" width="480px"/&gt;&lt;/p&gt;
&lt;h3&gt;Pipfile.lock&lt;/h3&gt;
&lt;p&gt;一般而言當 &lt;code&gt;Pipfile&lt;/code&gt; 產生或是更新後，Pipenv 也會自動也更新 &lt;code&gt;Pipfile.lock&lt;/code&gt;，這是因為 &lt;code&gt;Pipfile.lock&lt;/code&gt; 會依據 &lt;code&gt;Pipfile&lt;/code&gt; 紀錄的套件來源來抓取套件下來，並計算 Hash 值保存和記錄目前的版本號，同時也會把相依而下載的套件一併記錄在此，作為往後再次建立環境抓取套件安裝的依據。&lt;/p&gt;
&lt;p&gt;透過 Hash 計算紀錄作為安全性驗證，避免未來再次下載時，因遠端來源被竄改下載使用入侵系統，同時也能作為往後是否下載新版本的比較依據。這個 Hash 的機制以 pip  8.0 版後的 &lt;a href="https://pip.pypa.io/en/stable/reference/pip_install/#hash-checking-mode"&gt;Hash-Checking Mode&lt;/a&gt; 為基礎實現，可以參考 &lt;a href="https://pipenv.readthedocs.io/en/latest/basics/#pipfile-lock-security-features"&gt;Pipfile.lock Security Features&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/4-pipenv-create-pipfile-lock.png" alt="4-pipenv-create-pipfile-lock" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;2. 啟動虛擬環境&lt;/h2&gt;
&lt;p&gt;當建立好虛擬環境以及 &lt;code&gt;Pipfile&lt;/code&gt;, &lt;code&gt;Pipfile.lock&lt;/code&gt; 後，接著就是要進入虛擬環境中來在環境之下操作，在 Pipenv 中提供了 &lt;code&gt;pipenv shell&lt;/code&gt; 這個指令能使用我進入環境中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;parser/&amp;gt; pipenv shell
&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;進入後會以 &lt;code&gt;(專案名稱)&lt;/code&gt; 為前綴字表示在虛擬環境中，如下圖顯示的是 &lt;code&gt;(parser)parser/&lt;/code&gt; ，此時我們使用 &lt;code&gt;pip list&lt;/code&gt; 可以查閱到該環境下尚未安裝套件。&lt;/p&gt;
&lt;p&gt;然而系統的 Python 環境實際上是安裝了許多套件：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/5-pipenv-shell-enter-virtualenv.png" alt="5-pipenv-shell-enter-virtualenv" /&gt;&lt;/p&gt;
&lt;h3&gt;以 &lt;code&gt;pipenv shell&lt;/code&gt; 指令建立與進入虛擬環境&lt;/h3&gt;
&lt;p&gt;其實，&lt;code&gt;pipenv shell&lt;/code&gt; 這個指令會檢查目前的專案是否有建立虛擬環境，如果沒有的話是會為你的專案直接建立好，並且進入環境中，如下圖：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/6-pipenv-shell-to-install-virtualenv.png" alt="6-pipenv-shell-to-install-virtualenv" /&gt;&lt;/p&gt;
&lt;p&gt;不過比較特別的是，他不會為你也產生 &lt;code&gt;Pipfile.lock&lt;/code&gt;，因為 &lt;code&gt;shell&lt;/code&gt; 的主要動作是進入虛擬環境，所以他最多只會產生 &lt;code&gt;Pipfile&lt;/code&gt; 而已，需要你透過其他指令，來生成 &lt;code&gt;Pipfile.lock&lt;/code&gt; 檔案。&lt;/p&gt;
&lt;h3&gt;退出虛擬環境&lt;/h3&gt;
&lt;p&gt;如果你在虛擬環境中，想要退出的話，可以輸入 &lt;code&gt;deactivate&lt;/code&gt; 或是按下 &lt;code&gt;Ctrl + D&lt;/code&gt; 即可。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;deactivate&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; deactivate
parser/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;按下 &lt;code&gt;Ctrl + D&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt;
parser/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;3. 安裝套件在虛擬環境中&lt;/h2&gt;
&lt;p&gt;在一開頭我們提到了 &lt;code&gt;pipenv install&lt;/code&gt; 這個指令，其實這個指令還夠安裝套件，只要下 &lt;code&gt;pipenv install [套件名稱]&lt;/code&gt; 便可以幫助我們安裝想要的套件到虛擬環境中，以下我們以安裝 &lt;code&gt;requests&lt;/code&gt; 與 &lt;code&gt;beautifulsoup4&lt;/code&gt; 為例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pipenv install requests
&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pipenv install beautifulsoup4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pipenv 也能夠一次對多個操件做相同的行爲，如下一次對多個套件安裝：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pipenv install requests beautifulsoup4
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Pipfile 與 Pipfile.lock 的變化&lt;/h3&gt;
&lt;p&gt;接著打開 Pipfile， 你會在 &lt;code&gt;[packages]&lt;/code&gt; 看見剛剛安裝的 &lt;code&gt;requests&lt;/code&gt; 與 &lt;code&gt;beautifulsoup4&lt;/code&gt; 都記錄在此並包含版本號：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/12-pipenv-pipfile-installed-package.png" alt="12-pipenv-pipfile-installed-package" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;而且和以往的 &lt;code&gt;requirements.txt&lt;/code&gt; 眾不同的是，這次他不會再把相依的套件資訊也記錄上去，你會發現 &lt;code&gt;requests&lt;/code&gt; 安裝時會下載的相依套件不在此，這讓我們更一目瞭然的區分哪些才是我們開發與部署都會使用到的套件，並且提升協作時查閱套件的文件效率。&lt;/p&gt;
&lt;p&gt;相依的套件會被詳細記錄在 &lt;code&gt;Pipfile.lock&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/13-pipenv-pipfile-lock-installed-dependance-package.png" alt="13-pipenv-pipfile-lock-installed-dependance-package" /&gt;&lt;/p&gt;
&lt;h3&gt;透過 &lt;code&gt;--dev&lt;/code&gt; 安裝開發環境需要的套件&lt;/h3&gt;
&lt;p&gt;在 Pipenv 中，我們還能區分並安裝只有在開發時才會用到的套件，以避免部署時下載了不需要的套件在其中使專案容量變大，例如 &lt;code&gt;mypy&lt;/code&gt;, &lt;code&gt;pytest&lt;/code&gt; 等套件都是只有開發時才會使用到：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pipenv install pytest --dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/14-pipenv-install-dev-package.png" alt="14-pipenv-install-dev-package" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;只要透過 &lt;code&gt;pipenv install [套件名稱] --dev&lt;/code&gt; 就可以告訴 Pipenv 這個套件我只會在開發時使用，因此安裝後，該套件也會被記錄在 &lt;code&gt;Pipfile&lt;/code&gt; 中的 &lt;code&gt;[dev-packages]&lt;/code&gt; 區塊：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/15-pipfile-dev-package-update.png" alt="15-pipfile-dev-package-update" width="480px"/&gt;&lt;/p&gt;
&lt;h3&gt;更多的認識 &lt;code&gt;pipenv install&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;從前面使用 &lt;code&gt;pipenv install&lt;/code&gt; 這個指令觀察下來，你會注意到這個指令的功用是其實有兩個：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安裝套件到虛擬環境中&lt;/li&gt;
&lt;li&gt;當指令後面不寫套件名稱時，就會檢查是否有 &lt;code&gt;Pipfile&lt;/code&gt; 存在，並且讀取 &lt;code&gt;Pipfile&lt;/code&gt; 更新 &lt;code&gt;Pipfile.lock&lt;/code&gt; ( &lt;code&gt;Pipfile.lock&lt;/code&gt; 不存在則建立 ) 安裝到虛擬環境中；如果沒有 &lt;code&gt;Pipfile&lt;/code&gt; 則會檢查是否有 &lt;code&gt;requirements.txt&lt;/code&gt;，所的話也會讀取安裝的套件並轉換到 &lt;code&gt;Pipfile&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果上述行為，虛擬環境原本就不存在便會建立環境，若是都沒有 &lt;code&gt;Pipefile&lt;/code&gt;, &lt;code&gt;Pipfile.lock&lt;/code&gt; 與虛擬環境目錄，就會建立全新的虛擬環境。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/11-pipenv-install-process.png" alt="11-pipenv-install-process" width="480"/&gt;&lt;/p&gt;
&lt;p&gt;若你不希望 &lt;code&gt;requirements.txt&lt;/code&gt; 因為 &lt;code&gt;pipenv install&lt;/code&gt; 而被讀取安裝到 &lt;code&gt;Pipfile&lt;/code&gt; 的話，建議你先把該檔案移到外面哦！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;4. 查看安裝的套件&lt;/h2&gt;
&lt;p&gt;在 Pipenv 中查看安裝的套件很簡單，只要透過 &lt;code&gt;pipenv graph&lt;/code&gt; 即可，而且還會顯示套件以及相依套件的關聯：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pipenv graph
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/16-pipenv-graph.png" alt="16-pipenv-graph" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;而且你會看到 &lt;code&gt;Flask-SQLAlchemy&lt;/code&gt; 與 &lt;code&gt;Flask-Restful&lt;/code&gt; 都有依賴 &lt;code&gt;Flask&lt;/code&gt;，但是他們安裝的 &lt;code&gt;Flask&lt;/code&gt; 是彼此獨立的，因此這也是開頭提到的，Pipenv 解決了套件彼此相依所產生的版本升級時困擾。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;5. 更新套件&lt;/h2&gt;
&lt;p&gt;如果你要檢查有無新的套件並更新，可以輸入 &lt;code&gt;pipenv update&lt;/code&gt;。 此時 &lt;code&gt;pipenv update&lt;/code&gt; 會先執行 &lt;code&gt;lock&lt;/code&gt; 指令，檢查是否有新的套件，如果有那麼 &lt;code&gt;Pipfile&lt;/code&gt; 與 &lt;code&gt;Pipfile.lock&lt;/code&gt; 都會更新為新的套件紀錄，並且接著透過 &lt;code&gt;sync&lt;/code&gt; 同步下載新套件到虛擬環境中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pipenv update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;6. 解除安裝的套件&lt;/h2&gt;
&lt;p&gt;如果今天想要解除安裝過的套件怎麼辦？ 我們可以透過 &lt;code&gt;pipenv uninstall [套件名稱]&lt;/code&gt; 來做：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pipenv uninstall Flask-SQLAlchemy 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你也可以一次解安裝多個：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pipenv uninstall Flask-SQLAlchemy Flask-Restful
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不過相依的套件並不會一併被移除，所以需要一個一個解掉。&lt;/p&gt;
&lt;h3&gt;移除 &lt;code&gt;--dev&lt;/code&gt; 的套件&lt;/h3&gt;
&lt;p&gt;如果你想要移除從 &lt;code&gt;Pipfile&lt;/code&gt; 中的 &lt;code&gt;[dev-packages]&lt;/code&gt; 區塊的套件，可以輸入 &lt;code&gt;pipenv uninstall [套件名稱] --dev&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pipenv uninstall pytest --dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/17-pipenv-uninstall-dev-packages.png" alt="17-pipenv-uninstall-dev-packages" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;7. 還原安裝過套件到虛擬環境&lt;/h2&gt;
&lt;p&gt;如果手上拿到了別人的專案，或是專案要重新建立虛擬環境，只要有 &lt;code&gt;Pipefile&lt;/code&gt;，就能透過 &lt;code&gt;pipenv install&lt;/code&gt; 讀取 &lt;code&gt;Pipefile&lt;/code&gt; 、產生或更新 &lt;code&gt;Pipfile.lock&lt;/code&gt; 後安裝套件還原環境。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 如果 parser 專案是&lt;/span&gt;
parser/&amp;gt; ls
Pipfile Pipfile.lock
parser/&amp;gt; pipenv install &lt;span class="c1"&gt;# 讀取 Pipfile 並且安裝套件還原虛擬環境&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這也就是 &lt;code&gt;Pipefile&lt;/code&gt; 取代 &lt;code&gt;requiremnets.txt&lt;/code&gt; 的好處。&lt;/p&gt;
&lt;p&gt;過往的 &lt;code&gt;requiremnets.txt&lt;/code&gt; 在安裝新套件後也要下指令手動更新，建立環境時，也要下指令來讀取 &lt;code&gt;requiremnets.txt&lt;/code&gt; 建立與還原，但是這些步驟都會因為遺忘而漏掉；但是 &lt;code&gt;pipenv install [套件名稱]&lt;/code&gt; 安裝套件時不用怕忘記手動更新，因為 &lt;code&gt;Pipfile&lt;/code&gt; 會自動更新，並連同產生與更新&lt;code&gt;Pipfile.lock&lt;/code&gt;，要建立環境時只要有 &lt;code&gt;Pipfile&lt;/code&gt; 也不用在像過去下指令讀取讀取建立。&lt;/p&gt;
&lt;p&gt;順帶一題，使用 &lt;code&gt;pipenv install&lt;/code&gt; 只會讀取 &lt;code&gt;Pipfile&lt;/code&gt; 中 &lt;code&gt;[packages]&lt;/code&gt; 區塊的套件，如果你要為你的專案安裝 &lt;code&gt;[dev-packages]&lt;/code&gt; 的套件到虛擬環境，你要下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;parser/&amp;gt; pipenv install --dev
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;執行 &lt;code&gt;Pipfile&lt;/code&gt; 與 &lt;code&gt;Pipfile.lock&lt;/code&gt; 的過程&lt;/h3&gt;
&lt;p&gt;建立虛擬環境時，如果有 &lt;code&gt;Pipfile&lt;/code&gt; 、 &lt;code&gt;Pipfile.lock&lt;/code&gt; ，那麼 Pipenv 會有一個讀取與執行的順序：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;如果沒有 &lt;code&gt;Pipfile&lt;/code&gt; 而只有 &lt;code&gt;Pipfile.lock&lt;/code&gt;，那麼建立虛擬環境時，會因為沒有 &lt;code&gt;Pipfile&lt;/code&gt; 產生了新的 &lt;code&gt;Pipfile&lt;/code&gt; 並把沒有安裝套件的 &lt;code&gt;Pipfile&lt;/code&gt; 資訊更新覆蓋掉原本有安裝套件資訊的 &lt;code&gt;Pipfile.lock&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果有 &lt;code&gt;Pipfile&lt;/code&gt; 卻沒有 &lt;code&gt;Pipfile.lock&lt;/code&gt;，那麼建立虛擬環境時，會從 &lt;code&gt;Pipfile&lt;/code&gt; 的資訊中讀取下載套件產生 Pipfile.lock ，所以資訊會保留。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;8. 移除虛擬環境&lt;/h2&gt;
&lt;p&gt;在 Pipenv 中有提供 &lt;code&gt;--rm&lt;/code&gt; 這個參數給 Pipenv 可以直接移除建立的虛擬環境，只要輸入 &lt;code&gt;pipenv --rm&lt;/code&gt; 即可，但是若你在虛擬環境之中，需要先退出才會正常。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; deactivate
parser/&amp;gt; --venv
parser/&amp;gt; pipenv --rm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/19-pipenv-remove-virtualenv.png" alt="19-pipenv-remove-virtualenv" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;9. 使用與產生 requirements.txt&lt;/h2&gt;
&lt;p&gt;前面篇幅提到的都是 &lt;code&gt;Pipfile&lt;/code&gt; 與 &lt;code&gt;Pipfile.lock&lt;/code&gt; ，那如果今天想要從原本的 &lt;code&gt;virtualenv&lt;/code&gt; 換成 &lt;code&gt;pipenv&lt;/code&gt; 指令來使用的話，有沒有辦法讀取原本的 &lt;code&gt;requirements.txt&lt;/code&gt; 來建立 &lt;strong&gt;Pipenv&lt;/strong&gt; 的虛擬環境又能還原本來的套件呢？&lt;/p&gt;
&lt;p&gt;這是可以的，前面提到若是你在執行 &lt;code&gt;pipenv install&lt;/code&gt; 建立虛擬環境時，專案有 &lt;code&gt;requirements.txt&lt;/code&gt; 便會自動被讀取安裝，不過 &lt;strong&gt;Pipenv&lt;/strong&gt; 也提供了 &lt;code&gt;-r&lt;/code&gt; 參數讓你透過 &lt;code&gt;pipenv install&lt;/code&gt; 來指定你要讀取的 &lt;code&gt;requirements.txt&lt;/code&gt; 檔案來還原虛擬環境，並轉移記錄到 &lt;code&gt;Pipfile&lt;/code&gt; 與 &lt;code&gt;Pipfile.lock&lt;/code&gt; 中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;parser/&amp;gt; pipenv install -r &lt;span class="o"&gt;[&lt;/span&gt;你的 &lt;span class="sb"&gt;`&lt;/span&gt;requirements.txt&lt;span class="sb"&gt;`&lt;/span&gt; 路徑位置&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;相反的，如果你想要透過 Pipenv 產生 &lt;code&gt;requirements.txt&lt;/code&gt;，可以透過 &lt;code&gt;pipenv lock -r requirements.txt&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;parser/&amp;gt; pipenv lock -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用 &lt;code&gt;pipenv lock&lt;/code&gt; 是因為 &lt;code&gt;lock&lt;/code&gt; 這個指令原本的用途就是拿來產生 &lt;code&gt;Pipfile.lock&lt;/code&gt; 而 &lt;code&gt;Pipfile.lock&lt;/code&gt; 會包含安裝且正確的套件資訊，所以才會使用此指令生成。&lt;/p&gt;
&lt;h2&gt;10. 直接根據虛擬環境執行 Python 指令&lt;/h2&gt;
&lt;p&gt;如果想要測試專案的某個檔案，或是直接進入虛擬環境的 Python 中測試，可以使用 &lt;code&gt;pipenv run [指令]&lt;/code&gt; 來執行。&lt;/p&gt;
&lt;p&gt;例如我要進入虛擬環境中的 Ｐython 下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pipenv run python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我要查看虛擬環境中的 Python 版本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pipenv run python &lt;span class="c1"&gt;# 進入虛擬環境中的 Python&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pipenv --py &lt;span class="c1"&gt;# Pipenv 提供的方式&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/18-pipenv-run-python-sample.png" alt="18-pipenv-run-python-sample" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;11. 指定 Python 版本建立虛擬環境&lt;/h2&gt;
&lt;p&gt;如果你的系統中有安裝了多個 Python 版本，例如 &lt;code&gt;Python 2.7.10&lt;/code&gt;, &lt;code&gt;Python 2.7.15&lt;/code&gt;, &lt;code&gt;Python 3.7.1&lt;/code&gt;，如下圖：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/7-pipenv-install-indicate-python-version.png" alt="7-pipenv-install-indicate-python-version" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;因此今天想要指定該專案虛擬環境所用的 Python 版本的話，可以在 &lt;code&gt;pipenv install&lt;/code&gt; 後面透過子參數來設定：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;parser&amp;gt; pipenv install --two &lt;span class="c1"&gt;# 指定系統有安裝，優先使用的 Python 2&lt;/span&gt;
parser&amp;gt; pipenv install --three &lt;span class="c1"&gt;# 指定系統有安裝，優先使用的 Python 3&lt;/span&gt;
parser&amp;gt; pipenv install --python &lt;span class="m"&gt;2&lt;/span&gt;.7.10 &lt;span class="c1"&gt;# 指定系統有安裝，明確的 Python 版本&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在上述中 &lt;code&gt;--two&lt;/code&gt; 與 &lt;code&gt;--three&lt;/code&gt; 會分別尋找你系統中，優先指定的 Python 2 與 Python 3 版本，因為我的 Python 3 只有一個版本號所以會是 &lt;code&gt;3.7.1&lt;/code&gt;，如下圖：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/9-pipenv-install-indicate-python-version-by-three.png" alt="9-pipenv-install-indicate-python-version-by-three" /&gt;&lt;/p&gt;
&lt;p&gt;但是 Python 2 在我的主系統中就有 &lt;code&gt;Python 2.7.10&lt;/code&gt;, &lt;code&gt;Python 2.7.15&lt;/code&gt; 兩個版本，因此 &lt;code&gt;pipenv&lt;/code&gt; 會去抓取我系統中我設定優先讀取的 Python 2 版本：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/8-pipenv-install-indicate-python-version-by-two.png" alt="8-pipenv-install-indicate-python-version-by-two" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;而如果你想要明確指定版本號，可以透過 &lt;code&gt;--python [系統存在的版本號]&lt;/code&gt; 來指定：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/10-pipenv-install-indicate-python-version-by-python-para.png" alt="10-pipenv-install-indicate-python-version-by-python-para" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;除此之外，因為前面提到了 &lt;code&gt;pipenv shell&lt;/code&gt; 也會偵測你的專案中有無虛擬環境並自動為你建立，因此你也可以拿 &lt;code&gt;pipenv shell&lt;/code&gt; 建立虛擬環境並指定版本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;parser&amp;gt; pipenv shell --two &lt;span class="c1"&gt;# 指定系統有安裝，優先使用的 Python 2&lt;/span&gt;
parser&amp;gt; pipenv shell --three &lt;span class="c1"&gt;# 指定系統有安裝，優先使用的 Python 3&lt;/span&gt;
parser&amp;gt; pipenv shell --python &lt;span class="m"&gt;2&lt;/span&gt;.7.10 &lt;span class="c1"&gt;# 指定系統有安裝，明確的 Python 版本&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;甚至 Pipenv 來能讓你不用下 &lt;code&gt;install&lt;/code&gt; 或 &lt;code&gt;shell&lt;/code&gt; ，而是直接指定 &lt;code&gt;--two&lt;/code&gt;, &lt;code&gt;--three&lt;/code&gt;, &lt;code&gt;--python [系統存在的版本號]&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;parser&amp;gt; pipenv --two &lt;span class="c1"&gt;# 指定系統有安裝，優先使用的 Python 2&lt;/span&gt;
parser&amp;gt; pipenv --three &lt;span class="c1"&gt;# 指定系統有安裝，優先使用的 Python 3&lt;/span&gt;
parser&amp;gt; pipenv --python &lt;span class="m"&gt;2&lt;/span&gt;.7.10 &lt;span class="c1"&gt;# 指定系統有安裝，明確的 Python 版本&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;虛擬環境和 &lt;code&gt;Pipfile&lt;/code&gt;, &lt;code&gt;Pipfile.lock&lt;/code&gt; 建立法則&lt;/h2&gt;
&lt;p&gt;看到了這裡可能有些人為疑惑，這樣子指令的功用不就有些重複了嗎？ 前面的 &lt;code&gt;pipenv install&lt;/code&gt; 與 &lt;code&gt;pipenv shell&lt;/code&gt; 也是，甚至指定版本的部分不需要有 &lt;code&gt;install&lt;/code&gt; 與 &lt;code&gt;shell&lt;/code&gt;，只要直接帶版本號也行？&lt;/p&gt;
&lt;p&gt;這樣的感覺對我當初來說，每個指令的行為非常沒有職責分一的感覺。&lt;/p&gt;
&lt;p&gt;這也就是我在一開頭提到的，Pipenv 很強大，但是對於剛上手的人會在使用中容易混淆。&lt;/p&gt;
&lt;p&gt;其實建立虛擬環境而言，在 Pipenv 中，&lt;strong&gt;&lt;em&gt;除了 &lt;code&gt;pipenv graph&lt;/code&gt; 這個指令外，所有其他的指令在執行時，都會檢查現有的專案目錄下有沒有虛擬環境存在，如果沒有就會為你建立。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以指定版本號也是，除了 &lt;code&gt;pipenv graph&lt;/code&gt; 這個指令外，所有其他的指令在執行時也能指定版本號，那麼沒有虛擬環境時，就會為你建立這個版本的虛擬環境。&lt;/p&gt;
&lt;p&gt;而且呢，對於建立虛擬環境（或是還原虛擬環境），每個指令也不會都產生 &lt;code&gt;Pipfile.lock&lt;/code&gt; 就像 &lt;code&gt;pipenv shell&lt;/code&gt; 的情況一樣。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;會更新與產生 &lt;code&gt;Pipfile&lt;/code&gt;,  &lt;code&gt;Pipfile.lock&lt;/code&gt; 的指令有 &lt;code&gt;install&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, &lt;code&gt;uninstall&lt;/code&gt;, &lt;code&gt;lock&lt;/code&gt;, &lt;code&gt;clean&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;只會產生 &lt;code&gt;Pipfile&lt;/code&gt; 的有 &lt;code&gt;shell&lt;/code&gt;, &lt;code&gt;check&lt;/code&gt;, &lt;code&gt;run&lt;/code&gt;, &lt;code&gt;open&lt;/code&gt; , &lt;code&gt;sync&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;個人習慣模式&lt;/h2&gt;
&lt;p&gt;因為上述有許多種方式建立虛擬環境，所以可能有人看完會不太知道自己想要怎麼做，因此分享一下自己的做法，個人習慣使用 &lt;code&gt;pipenv shell&lt;/code&gt; 建立虛擬環境，同時進入到虛擬環境中，再透過 &lt;code&gt;pipenv install [套件名稱]&lt;/code&gt; 安裝名稱，並且透過 &lt;code&gt;pipenv install&lt;/code&gt; 指令直接產生 &lt;code&gt;Pipfile.lock&lt;/code&gt;；如果本身有 &lt;code&gt;Pipfile&lt;/code&gt;，則透過 &lt;code&gt;pipenv install&lt;/code&gt; 來安裝與產生 &lt;code&gt;Pipfile.lock&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pipenv shell
&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pipenv install &lt;span class="c1"&gt;# 如果已經存在 Pipfile&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pipenv install &lt;span class="o"&gt;[&lt;/span&gt;套件名稱 &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# 如果不存在Pipfile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;後記&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;寫這篇文章真的花了很多心思 ＠＠ ，因為 &lt;strong&gt;Pipenv&lt;/strong&gt; 雖然貼心與強大，但是也因為指令中很多相似的行為都能做到，導致在思考文章結構與流程上花了很多心思，因為彷彿從任何地方都能切入說，但是很容易迷失在其中，如果有一個順序，又會因為許多方式都能做到，導致越看越模糊。&lt;/p&gt;
&lt;p&gt;雖然還是完成了，但很美中不足啊，不過也希望或多或少能幫助到他人或是未來忘記的自己，對了一但使用 &lt;strong&gt;Pipenv&lt;/strong&gt; 後，建議不要在使用 &lt;code&gt;pip&lt;/code&gt; 指令又在 &lt;strong&gt;Pipenv&lt;/strong&gt; 建立好的虛擬環境下安裝或移除套件，那會讓 Pipenv 的環境管理與 &lt;code&gt;pip&lt;/code&gt; 不同步，也混淆自己哦。&lt;/p&gt;
&lt;h1&gt;參考文章&lt;/h1&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://realpython.com/pipenv-guide/"&gt;Pipenv: A Guide to the New Python Packaging Tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codinganimal.info/%E7%94%A8-pipenv-%E4%BE%86%E7%AE%A1%E7%90%86-python-%E9%96%8B%E7%99%BC%E7%92%B0%E5%A2%83-ce9f619825a2"&gt;用 pipenv 來管理 Python 開發環境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@chihsuan/pipenv-%E6%9B%B4%E7%B0%A1%E5%96%AE-%E6%9B%B4%E5%BF%AB%E9%80%9F%E7%9A%84-python-%E5%A5%97%E4%BB%B6%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-135a47e504f4"&gt;Pipenv 更簡單、更快速的 Python 套件管理工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pipenv.readthedocs.io/en/latest/basics/#pipfile-lock-security-features"&gt;Pipfile.lock Security Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/reference/pip_install/#hash-checking-mode"&gt;Hash-Checking Mode in pip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jianshu.com/p/8c6ae288ba48"&gt;pipenv 的高级用法了解一下&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://crazygit.wiseturtles.com/2018/01/08/pipenv-tour/"&gt;pipenv 使用指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.windrunner.me/python/pip.html"&gt;pip 与 Pipfile&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Python"></category><category term="Pipenv"></category><category term="Virtualenv"></category></entry><entry><title>Python - 隔離開發環境的利器，安裝虛擬環境工具 virtualenv</title><link href="https://note.koko.guru/python-virtualenv-install-and-usage.html" rel="alternate"></link><published>2019-03-07T00:00:00+08:00</published><updated>2019-03-07T00:00:00+08:00</updated><author><name>kokokuo</name></author><id>tag:note.koko.guru,2019-03-07:/python-virtualenv-install-and-usage.html</id><summary type="html">&lt;p&gt;在開發 Python 的程式時，時不時就會透過 &lt;code&gt;pip&lt;/code&gt; 從 PyPI 上安許多的套件來 &lt;code&gt;import&lt;/code&gt; 使用，但是因為 Python 是裝在整個電腦的系統環境的，所以當我們之後寫的專案變多，每個不同的專案都因為有各自的需要 &lt;code&gt;pip install&lt;/code&gt; 了不同的套件，最後整個 Python 的系統環境所安裝的套件就會非常多且雜亂！ 那麼要如何讓每個專案安裝的套件都只有自己的專案擁有，且不會弄亂系統的 Python 環境呢？ 這時候就需要虛擬環境了！&lt;/p&gt;</summary><content type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;在開發 Python 的程式時，時不時就會透過 &lt;code&gt;pip&lt;/code&gt; 從 PyPI 上安許多的套件來 &lt;code&gt;import&lt;/code&gt; 使用，但是因為 Python 是裝在整個電腦的系統環境的，所以當我們之後寫的專案變多，每個不同的專案都因為有各自的需要 &lt;code&gt;pip install&lt;/code&gt; 了不同的套件，最後整個 Python 的系統環境所安裝的套件就會非常多且雜亂！ 那麼要如何讓每個專案安裝的套件都只有自己的專案擁有，且不會弄亂系統的 Python 環境呢？ 這時候就需要虛擬環境了！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;虛擬環境介紹&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;虛擬環境的目的使我們可以依據我們每個專案為一個單位，建立出不同虛擬的 Python 環境，來隔離系統的主 Python 環境以及其他專案的 Python 環境。因此當我們在開發不同的專案時，只要進入每個專案所屬的虛擬環境中，接下來所有安裝的插件都會只裝在這個環境中並且被作用，下圖為示意圖：&lt;/p&gt;
&lt;p&gt;&lt;img alt="python-virtualenv-diagram" src="../images/20190307-python-virtualenv-install-and-usage/python-virtualenv-diagram.png"&gt;&lt;/p&gt;
&lt;p&gt;我的主系統 Python 環境中只有安裝 &lt;code&gt;pip&lt;/code&gt; 與 &lt;code&gt;virtualenv&lt;/code&gt; 這個虛擬環境工具套件，而透過 &lt;code&gt;virtualenv&lt;/code&gt; 所分別在這三個專案產生的 &lt;code&gt;env1&lt;/code&gt;, &lt;code&gt;env2&lt;/code&gt;, &lt;code&gt;env3&lt;/code&gt; 除了都有各自獨立的 Python 環境與各自的 &lt;code&gt;pip&lt;/code&gt; 套件外，也都安裝彼此所屬專案在開發上所需要的插件。&lt;/p&gt;
&lt;p&gt;另外若是你的電腦主環境有兩種不同的 Python 版本，例如 &lt;code&gt;Python 2.7&lt;/code&gt; 與 &lt;code&gt;Python 3.7&lt;/code&gt;，那麼在建立虛擬環境時，還可以指定要產生的虛擬環境要以哪個 Python 版本為基底哦！&lt;/p&gt;
&lt;p&gt;另外虛擬環境這個概念不是只有在 Python 中才有，每個程式語言都有類似或自己的虛擬環境工具，而在 Python 中目前最熱門的就是 &lt;code&gt;virtualenv&lt;/code&gt; 以及之後會介紹在 &lt;code&gt;virtualenv&lt;/code&gt; 之後新推出的 &lt;code&gt;pipenv&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;安裝與使用 virtualenv&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;首先透過 Python 內建的 &lt;code&gt;pip&lt;/code&gt; 套件指令下 &lt;code&gt;pip install&lt;/code&gt; 來安裝 &lt;code&gt;virtualenv&lt;/code&gt; 套件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&amp;gt; pip install virtualenv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安裝完後要怎麼使用呢？ 以下一個例子，我的專案是一個爬蟲的專案叫 &lt;code&gt;parser&lt;/code&gt;，我會在這個專案中安裝 &lt;code&gt;requests&lt;/code&gt;, &lt;code&gt;beautifulsoup4&lt;/code&gt; 這兩個套件，那麼首先進入到你要開發的專案目錄下。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~/&amp;gt; mkdir parser
~/&amp;gt; &lt;span class="nb"&gt;cd&lt;/span&gt; parser
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再透過 &lt;code&gt;virtualenv&lt;/code&gt; 指令來建立一個存放 Python 虛擬環境的目錄，例如下面我透過 &lt;code&gt;virtualenv&lt;/code&gt; 建立了一個 &lt;code&gt;venv&lt;/code&gt; 的目錄，那麼 &lt;code&gt;virtualenv&lt;/code&gt; 就會在這個目錄中把系統的 Python 且是乾淨沒有安裝其他套件的 Python 環境複製裝進去，如此這個虛擬環境就誕生了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;parser/&amp;gt; virtualenv venv &lt;span class="c1"&gt;# 這個 venv 是用來存放虛擬環境建立的 Python 虛擬環境的目錄&lt;/span&gt;
parser/&amp;gt; ls
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="../images/20190307-python-virtualenv-install-and-usage/create-virtualenv.png" alt="create-virtualenv" /&gt;&lt;/p&gt;
&lt;p&gt;你會看到在 &lt;code&gt;venv&lt;/code&gt; 中是安裝 Python 時產生的目錄與檔案。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;使用 virtualenv&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;建立好 &lt;code&gt;parser&lt;/code&gt; 專用的虛擬環境後，此時先不要太快直接透過 &lt;code&gt;pip&lt;/code&gt; 安裝套件，因為我們只是建立好環境，但我們「還未進入」到這個虛擬環境中，因此若此時直接安裝，還是會以系統中使用 Python 的 &lt;code&gt;pip&lt;/code&gt; 插件安裝下去。我們要先進入到虛擬環境中，也就是 &lt;code&gt;venv&lt;/code&gt; 所建立的 Python 下，再用虛擬環境中內建的 &lt;code&gt;pip&lt;/code&gt; 安裝套件，這些套件才會被裝在虛擬環境下。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;parser/&amp;gt; source/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pip list
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="../images/20190307-python-virtualenv-install-and-usage/source-virtualenv-pip-list.png" alt="source-virtualenv-pip-list" width="320px"/&gt;&lt;/p&gt;
&lt;p&gt;如上圖你會看到這個 &lt;code&gt;pip list&lt;/code&gt; 出來的套件都是一開始安裝 Python 時最乾淨的環境，即便你作業系統中安裝的 Python 已經有裝了其他套件，在這裡都會以最乾淨的方式呈現，因為 &lt;code&gt;virtualenv&lt;/code&gt; 只會複製一份 Python 核心，不會連作業系統中的 Python 所安裝的套件也一併抓過來，此時我們可以透過 &lt;code&gt;python --version&lt;/code&gt; 來看看 Python 的路徑以及版本，以下我的 Python 是安裝 &lt;code&gt;3.7.1&lt;/code&gt; 版本的，此時透過進入 Python 環境下，透過 &lt;code&gt;sys.path&lt;/code&gt; 就可以看到來源是 &lt;code&gt;venv&lt;/code&gt; 中：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190307-python-virtualenv-install-and-usage/show-virtualenv-python-path.png" alt="show-virtualenv-python-path" /&gt;&lt;/p&gt;
&lt;p&gt;接著回過頭來，我們來安裝套件 &lt;code&gt;requests&lt;/code&gt; 與 &lt;code&gt;beautifulsoup4&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pip install requests
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pip install beautifulsoup4
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pip list
Package        Version
-------------- ----------
beautifulsoup4 &lt;span class="m"&gt;4&lt;/span&gt;.7.1
certifi        &lt;span class="m"&gt;2018&lt;/span&gt;.11.29
chardet        &lt;span class="m"&gt;3&lt;/span&gt;.0.4
idna           &lt;span class="m"&gt;2&lt;/span&gt;.8
pip            &lt;span class="m"&gt;19&lt;/span&gt;.0.3
requests       &lt;span class="m"&gt;2&lt;/span&gt;.21.0
setuptools     &lt;span class="m"&gt;40&lt;/span&gt;.8.0
soupsieve      &lt;span class="m"&gt;1&lt;/span&gt;.8
urllib3        &lt;span class="m"&gt;1&lt;/span&gt;.24.1
wheel          &lt;span class="m"&gt;0&lt;/span&gt;.33.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;大功告成囉！對了對了如果我們使用完專案想要離開怎麼辦？那麼我們只需要透過 &lt;code&gt;deactivate&lt;/code&gt; 退出虛擬環境就好囉。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; deactivate
parser/&amp;gt; pip list
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;退出後你就會看到 &lt;code&gt;(venv)&lt;/code&gt; 的標示不存在了，就是退出虛擬環境成功，此時你可以在透過 &lt;code&gt;pip list&lt;/code&gt; 看看，就會發現虛擬環境中安裝的套件不在了：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190307-python-virtualenv-install-and-usage/system-pip-list.png" alt="system-pip-list" width="320px"/&gt;&lt;/p&gt;
&lt;p&gt;但是因為他好好的放在 &lt;code&gt;venv&lt;/code&gt; 目錄下，所以下次要使用只要再透過 &lt;code&gt;source venv/bin/activate&lt;/code&gt; 進入即可囉！&lt;/p&gt;
&lt;p&gt;另外若是你今天在使用虛擬環境時完髒了，要刪除要怎麼做呢？ 我們只要先用 &lt;code&gt;deactivate&lt;/code&gt; 退出虛擬環境後，在做 &lt;code&gt;rm -rf&lt;/code&gt; 把虛擬環境的目錄刪掉就好，豈不是很容易？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; deactivate
parser/&amp;gt; rm -rf venv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;紀錄專案在 virtualenv 中所安裝的所有套件&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;安裝了 Python 的套件在虛擬環境中雖然很好，但是如果要做版本控制放到 Github, Bitbucket, GitLab 上，又或是專案的檔案要攜帶著走、分享給別人，那麼這些安裝好的環境要如何也攜帶走呢？ 可能你會說，那我們把剛剛建立放置虛擬環境的目錄 &lt;code&gt;venv&lt;/code&gt; 也一起丟到版本控管空間呀，轉移專案目錄時也是一起帶著走就好了，但是這是不行的，因為兩個原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;虛擬環境目錄認「絕對路徑」&lt;/strong&gt;：換句話說，即便你有一起把 &lt;code&gt;venv&lt;/code&gt; 帶著走，但若你的專案目錄改名了、把自己的目錄檔案放到別的位置下或複製傳給別人，都會因為絕對位置跑掉，導致下次再透過 &lt;code&gt;source&lt;/code&gt; 進入虛擬環境時找不到路徑而失敗！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;虛擬環境目錄檔案太大&lt;/strong&gt;：虛擬環境目錄因為要保存隔離 Python 的整個核心檔案以及未來安裝的 Python 套件，會導致目錄的檔案越來越多，所以一般來說就算路徑都不改，我們也不會攜帶走或丟到版本控管空間，因為會很大很肥。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那麼不帶著虛擬環境的目錄走，要怎麼保有這些安裝套件的紀錄呢？ 這裡就要仰賴到 &lt;code&gt;pip freeze&lt;/code&gt; 這個指令了！ 透過 &lt;code&gt;pip freeze &amp;gt; 保存的檔名&lt;/code&gt; 來建立一份所有該虛擬環境所安裝的套件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pip freeze &amp;gt; requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="../images/20190307-python-virtualenv-install-and-usage/pip-freeze-requirements.png" alt="pip-freeze-requirements" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;如上圖，會建立了 &lt;code&gt;requriements.txt&lt;/code&gt; 檔案，這個檔名可以隨意命名，不過一般在使用 &lt;code&gt;virtualenv&lt;/code&gt; 中，使用 &lt;code&gt;requriements.txt&lt;/code&gt; 已經變成 Python 的一種 Convention ，所以若是去瀏覽大多是 Github 的 Reposiotry 都會看到。&lt;/p&gt;
&lt;p&gt;當我們產生了 &lt;code&gt;requriements.txt&lt;/code&gt; 後，專案變只要帶著這個 &lt;code&gt;requriements.txt&lt;/code&gt; 即可，上傳版控也一樣，並可以用 &lt;code&gt;.gitignore&lt;/code&gt; 過濾掉 &lt;code&gt;venv&lt;/code&gt; 目錄。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;使用 &lt;code&gt;requirements.txt&lt;/code&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;當該專案來到新的環境下或從 Github 上 Clone 下來時，要使用虛擬環境並再次安裝套件的話，就只要再次把虛擬環境的目錄建立，進入後，透過以下指令，就可以還原該專案原先所以用的 Python 套件囉，以下再次以乾淨的 &lt;code&gt;parser&lt;/code&gt; 專案為例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 假設目前在新的環境下，先建立虛擬環境，在安裝套件&lt;/span&gt;
parser/&amp;gt; virtualenv venv
parser/&amp;gt; &lt;span class="nb"&gt;source&lt;/span&gt; venv/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="../images/20190307-python-virtualenv-install-and-usage/pip-install-by-requirments.png" alt="pip-install-by-requirments" /&gt;&lt;/p&gt;
&lt;p&gt;如上圖，再次安裝 Python 套件完成囉。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;指定 Python 版本的虛擬環境&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;如果今天你的作業系統中有多個 Python 版本，例如我一開頭提到的 &lt;code&gt;Python 2.7&lt;/code&gt; 與 &lt;code&gt;Python 3.7&lt;/code&gt;，那麼在建立虛擬環境時，還可以指定要產生的虛擬環境要以哪個 Python 版本為基底哦！ 以下接著介紹如何設定：&lt;/p&gt;
&lt;p&gt;首先先看到一下範例：以下是我的 &lt;code&gt;Python 2.7.15&lt;/code&gt; 版本以及 &lt;code&gt;Python 3.7.1&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190307-python-virtualenv-install-and-usage/system-multi-python-version.png" alt="system-multi-python-version" /&gt;&lt;/p&gt;
&lt;p&gt;在上述因為我預設的優先讀取版本是 Python 3.7.1 ，所以輸入 &lt;code&gt;python&lt;/code&gt; 會是呈現 &lt;code&gt;3.7.1&lt;/code&gt; 版本（因此我的系統下 &lt;code&gt;pip&lt;/code&gt; 時出來的也會是以放在預設的 &lt;code&gt;Python 3.7.1&lt;/code&gt; 中套件)&lt;/p&gt;
&lt;p&gt;除此之外當我在創建虛擬環境時，也因此我的預設 Python 環境會是 &lt;code&gt;3.7.1&lt;/code&gt;，例如先前的 &lt;code&gt;partser&lt;/code&gt; 專案。&lt;/p&gt;
&lt;p&gt;那麼今天如果要指定虛擬環境中要用的 Python 版本要如何設定？ 很容易地只要透過 &lt;code&gt;-p&lt;/code&gt; 參數後面帶入你指定的 Python 執行檔所在的路徑就好，不過因為路徑往往不好記。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190307-python-virtualenv-install-and-usage/virtualenv-python2-path.png" alt="virtualenv-python2-path" /&gt;&lt;/p&gt;
&lt;p&gt;所以只要以指令代替即可，例如因為我的環境只有 &lt;code&gt;2.7.15&lt;/code&gt; 與 &lt;code&gt;3.7.1&lt;/code&gt; ，因此執行的 Python 指令就只有 &lt;code&gt;python2&lt;/code&gt; 與 &lt;code&gt;python3&lt;/code&gt; 而已，因此我要指定 &lt;code&gt;Python 2.7.15&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190307-python-virtualenv-install-and-usage/virtualenv-python2-command.png" alt="virtualenv-python2-command" /&gt;&lt;/p&gt;
&lt;p&gt;最後以 &lt;code&gt;parser&lt;/code&gt; 專案以及另外一個新建的 &lt;code&gt;flask-sample&lt;/code&gt; 專案作為作為不同專案各有自己的虛擬環境的例子，如下 &lt;code&gt;parser&lt;/code&gt; 以 &lt;code&gt;python 2.7.15&lt;/code&gt; 為環境安裝了 &lt;code&gt;requests&lt;/code&gt; 與 &lt;code&gt;beautifulsoup4&lt;/code&gt; ；而 &lt;code&gt;flask-sample&lt;/code&gt; 以 &lt;code&gt;Python 3.7.1&lt;/code&gt; 為環境並安裝了 &lt;code&gt;flask&lt;/code&gt;，如下圖：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190307-python-virtualenv-install-and-usage/multi-virtualenv.png" alt="multi-virtualenv" /&gt;&lt;/p&gt;</content><category term="Python"></category><category term="虛擬環境"></category></entry><entry><title>Homebrew (1) - Mac 上安裝 Homebrew 套件管理工具</title><link href="https://note.koko.guru/mac-install-homebrew.html" rel="alternate"></link><published>2019-03-06T00:00:00+08:00</published><updated>2019-03-06T00:00:00+08:00</updated><author><name>kokokuo</name></author><id>tag:note.koko.guru,2019-03-06:/mac-install-homebrew.html</id><summary type="html">&lt;p&gt;Homebrew 是 Mac 專用的套件管理工具，如同 Linux 中的 apt 或是 yum 工具，許多的套件工具都可以透過 Homebrew 安裝，並且管理（如列出安裝的套件、更新套件、修正套件、移除套件等等）上非常方便，即便要尋找也都會放在相同的目錄下。&lt;/p&gt;</summary><content type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;Homebrew 是 Mac 專用的套件管理工具，如同 Linux 中的 apt 或是 yum 工具，許多的套件工具都可以透過 Homebrew 安裝，並且管理（如列出安裝的套件、更新套件、修正套件、移除套件等等）上非常方便，即便要尋找也都會放在相同的目錄下。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;安裝步驟&lt;/h1&gt;
&lt;hr&gt;
&lt;h2&gt;步驟一：下載 Homebrew&lt;/h2&gt;
&lt;p&gt;安裝步驟非常簡單，進入 &lt;a href="https://brew.sh/index_zh-tw"&gt;Homebrew 官網&lt;/a&gt;，依照步驟，在 Terminal 輸入下列此串：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190306-mac-install-homebrew/homebrew-website.png" alt="homebrew-website" /&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&amp;gt; /usr/bin/ruby -e &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安裝過程如下圖：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190306-mac-install-homebrew/terminal-install-message.png" alt="terminal-install-message" /&gt;&lt;/p&gt;
&lt;h2&gt;步驟二：建立環境變數&lt;/h2&gt;
&lt;p&gt;安裝完後，為了要使 Homebrew 的指令可以被 Mac 的 Terminal 中的 Bash 程式讀取到，需要設定 &lt;code&gt;/usr/local/bin&lt;/code&gt; 與 &lt;code&gt;/usr/local/sbin&lt;/code&gt; 至環境變數。&lt;/p&gt;
&lt;p&gt;建立一個 &lt;code&gt;.bash_profile&lt;/code&gt; 或是 &lt;code&gt;.profile&lt;/code&gt; （如果已有其中一個檔案則不需再次建立）在自己的家目錄下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&amp;gt; &lt;span class="nb"&gt;cd&lt;/span&gt; ~ &lt;span class="c1"&gt;# 移動到家目錄&lt;/span&gt;
$&amp;gt; vim .bash_profile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;並且在檔案中新增此行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/bin:/usr/local/sbin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或是可以透過 Shell 的另一種語法雙引號來設定，如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;PATH=/usr/local/bin:/usr/local/sbin:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;設定完成後，&lt;strong&gt;關閉 Terminal 應用程式重開&lt;/strong&gt; 或是 &lt;strong&gt;直接在 Terminal 中輸入以下指令啟動&lt;/strong&gt; &lt;code&gt;.bash_profile&lt;/code&gt; 或 &lt;code&gt;.profile&lt;/code&gt; 啟動即可（以下以 &lt;code&gt;.bash_pofile&lt;/code&gt; 為例 ）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&amp;gt; &lt;span class="nb"&gt;source&lt;/span&gt; ~/.bash_pofile &lt;span class="c1"&gt;# 以 source 指令啟動檔案執行並生效&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果原先 Mac 中的預設 PATH 環境變數已有其中一個路徑則可以只需要把剩餘沒有的補上即可，或是兩個皆有即可忽略。&lt;/p&gt;
&lt;p&gt;例如我的 Mac 透過 &lt;code&gt;export&lt;/code&gt; 指令發現 PATH 系統環境變數中缺少 &lt;code&gt;/usr/local/sbin&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190306-mac-install-homebrew/show-env-by-export.png" alt="show-env-by-export" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;則編輯 &lt;code&gt;~/.bash_profile&lt;/code&gt; 補上去，如下圖：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190306-mac-install-homebrew/append-missing-envpath.png" alt="append-missing-envpath" width="320px"/&gt;&lt;/p&gt;
&lt;p&gt;完成後，重新開啟 Terminal 應用程式，再次透過 export 檢查，會發現剛剛補上去的 &lt;code&gt;/usr/local/sbin&lt;/code&gt; 已經作用在系統環境中：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190306-mac-install-homebrew/show-env-by-export.png" alt="show-env-by-export" width="480px"/&gt;&lt;/p&gt;
&lt;h2&gt;步驟三：測試 brew 指令&lt;/h2&gt;
&lt;p&gt;可以透過輸入 brew 來做所有跟 Homebrew 有關的套件管理操作行為，如下圖：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190306-mac-install-homebrew/show-brew-test.png" alt="show-brew-test" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;到此即表示安裝順利完成囉！&lt;/p&gt;
&lt;h2&gt;安裝套件：以 wget 為例&lt;/h2&gt;
&lt;p&gt;如果要安裝套件裝在 Mac 上，可以透過 &lt;code&gt;brew install&lt;/code&gt; 指令再補上要安裝的套件名即可，例如以下以 &lt;code&gt;wget&lt;/code&gt; 可為例，&lt;code&gt;wget&lt;/code&gt; 是一個可以用來直接在終端機上安裝網路上的檔案內容指令工具：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&amp;gt; brew install wget
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="../images/20190306-mac-install-homebrew/brew-install-sample.png" alt="brew-install-sample" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;Homebrew 資料夾目錄介紹&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;在上述中所提到的環境變數設定步驟，Homebrew 會在安裝完後放在 &lt;code&gt;/usrl/local&lt;/code&gt; 下，所以透過 Homebrew 下載安裝或管理套件時，實際上會影響到的有  &lt;code&gt;/usrl/local&lt;/code&gt;  下這幾個目錄：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Caskroom  Frameworks  bin  include  opt   share
Cellar    Homebrew    etc  lib      sbin  var
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cellar&lt;/code&gt;：此文件夾存放的是所有包安裝所在路徑，包括二進制，文檔和配置文件。並且會依照 &lt;code&gt;Cellar/套件名稱/版本號/&lt;/code&gt; 的形式與為規範放置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;opt&lt;/code&gt;：由於版本號隨著跟新而改變的，所以需要一個固定不變的路徑作為我們訪問二進制和文檔的路徑，這就是 &lt;code&gt;opt&lt;/code&gt; 的作用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Homebrew&lt;/code&gt;：brew 程序所在路徑.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bin&lt;/code&gt;：所有包安裝之後二進制都會鏈接到這個路徑下&lt;/li&gt;
&lt;li&gt;&lt;code&gt;share&lt;/code&gt;：所有包安裝之後的文檔都會鏈接到這個路徑下&lt;/li&gt;
&lt;li&gt;&lt;code&gt;etc&lt;/code&gt;：同上，所有套件的配置文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lib&lt;/code&gt;：同上，所有套件相關庫文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Caskroom&lt;/code&gt;：使用 Homebrew Cask 安裝的應用程式 app 的相關資訊或設定的文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;參考文件&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.jianshu.com/p/8ad7056b243f"&gt;Homebrew 总结&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Mac"></category><category term="Homebrew"></category></entry><entry><title>透過 Github Page 上傳靜態網站</title><link href="https://note.koko.guru/build-static-website-to-github-page.html" rel="alternate"></link><published>2019-02-08T00:00:00+08:00</published><updated>2019-02-08T00:00:00+08:00</updated><author><name>kokokuo</name></author><id>tag:note.koko.guru,2019-02-08:/build-static-website-to-github-page.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;靜態網站 (Static Site)&lt;/strong&gt; 因為檔案結構單純，架設的伺服器空間選擇比較多，因為不需要建置資料庫，也沒有後端的語言，只需要一個空間與簡單的伺服器軟體即可。&lt;/p&gt;</summary><content type="html">&lt;p&gt;但是要自己架設主機花時間也需要一些專業知識，而且或多或少會需要收取一些費用，如果我們希望簡單又能夠不花費的話，要怎麼辦呢？ 此時就要來了解一下什麼是 &lt;strong&gt;Github Page&lt;/strong&gt; 啦，接著我們就來瞧瞧！&lt;/p&gt;
&lt;h1&gt;前言&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;我們提到了要架設一個網站時，一定或多或少會去想一下，這個網站是什麼用途，要怎麼架設與架設在哪裡。&lt;/p&gt;
&lt;p&gt;如果你要架設的網站功能會比較複雜，例如你需要會員註冊、一些預約功能、購物車下單、線上刷卡、即時訊息、編輯檔案並保存等功能，那麼就會需要有資料庫，此外需要透過後端的網頁語言，專門的伺服器來處理，本篇無法為你解決困擾。&lt;/p&gt;
&lt;p&gt;但若你只要單純的呈現訊息，例如個人網頁、部落格、公司官網，那麼也許你只需要架設一個 &lt;strong&gt;靜態網站 (Static Site)&lt;/strong&gt; ，此時你可以繼續往下閱讀。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;靜態網站 (Static Site)&lt;/strong&gt; 因為檔案結構單純( 只有 HTML/CSS/JS 這類檔案 )，架設的伺服器空間選擇比較多，因為不需要建置資料庫，也沒有後端的語言，只需要一個空間與簡單的伺服器軟體即可。&lt;/p&gt;
&lt;p&gt;我們可以架設一台自己的伺服器電腦並透過 SSH 或 FTP 上傳檔案架設完成，又或是使用 Dropbox 空間，雲端 AWS 與 Google Cloud, Azure 提供的服務完成架設。&lt;/p&gt;
&lt;p&gt;但是上述中，要自己架設主機花時間也需要一些專業知識，使用 Dropbox、雲端服務的空間或多或少會需要收取一些費用，如果我們希望簡單又能夠不花費的話，要怎麼辦呢？&lt;/p&gt;
&lt;p&gt;是的，這就是在這裡我介紹 &lt;strong&gt;Github Page&lt;/strong&gt; 的原因，因為透過 &lt;strong&gt;Github Page&lt;/strong&gt; 不僅容易，並且還不用花費任何半毛錢，另外因為 &lt;strong&gt;Github Page&lt;/strong&gt; 是 &lt;strong&gt;Github&lt;/strong&gt; 的服務之一，因此支援版本控制系統，簡單來說就是能夠幫你記錄每一次上傳更新的所有紀錄，能方便你還原上一版。&lt;/p&gt;
&lt;h1&gt;什麼是 Github Page&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://pages.github.com/"&gt;Github Page&lt;/a&gt; 是全球最多開發者使用的版本控管程式碼託管服務 - Github 旗下的產品服務。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190208-build-static-website-to-github-page/github-page-website.png" alt="github-page-website" /&gt;&lt;/p&gt;
&lt;p&gt;之所以會有 Github Page ，是因為 Github 雖然託管了許多來自世界各地的程式碼專案並起開源給任何人使用，但由於程式碼本身便不易理解也難以知道其意圖外，Github 更希望不僅是這些程式碼，有任何的點子或想法的人也能夠在上面分享。&lt;/p&gt;
&lt;p&gt;因此有了 Github Page - 希望提供一個可以簡單架設靜態網站的服務，不僅讓這些程式碼專案都有自己的網頁介紹外，Github Page 也提供給每個用戶或是組織企業的帳號可以架設一個自己帳號用的的靜態網站，來分享自己在做的事情或是想法、經歷，而且不用自己架設架設伺服器維護，只要把想放上去呈現的檔案上傳就好，也不用花錢不是該來試試看嗎？&lt;/p&gt;
&lt;h1&gt;一、創建一個存放靜態網站的 Github 倉儲庫 (Repository)&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;首先我們需要在 Github 建立一個 Github Page 用的 Repository ，第一次使用 Github 的朋友可以先去註冊一個。&lt;/p&gt;
&lt;p&gt;這個 Github Page 用的 Repository 會專門用來放置的靜態網誌的檔案：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190208-build-static-website-to-github-page/build-github-page-repository.png" alt="build-github-page-repository" width="480px" /&gt;&lt;/p&gt;
&lt;p&gt;需要特別注意的部分是，我們的 Repository 名稱需要照個 Github Page 的教學指示，建立一個格式為 username.github.io 的名稱，而這個 &lt;code&gt;username&lt;/code&gt; 必須是你的 Github 使用者名稱，如此 Github Page 才會知道你要建立屬於自己帳戶用的靜態網站，例如我的名稱是 &lt;code&gt;kokokuo&lt;/code&gt; 所以我建立的 Repository 名稱為 &lt;code&gt;kokokuo.github.io&lt;/code&gt;，如果不照著此方式，是無法作用建立的。&lt;/p&gt;
&lt;p&gt;而 Repository 的權限、 &lt;code&gt;README&lt;/code&gt; 與 &lt;code&gt;.gitignore&lt;/code&gt;，看個人需要，例如我設定為 Public，並且有 README。&lt;/p&gt;
&lt;p&gt;建立完後，你的 Repository 會如此畫面：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190208-build-static-website-to-github-page/default-repository.png" alt="github-page-default-repository" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;附註一下，因為我有使用 README，Github Repository 的 README 會把剛剛建立時輸入的 Description 直接自動填上。&lt;/p&gt;
&lt;p&gt;完成後這個網站便可以馬上作用囉，只要在網址上輸入你建立的 &lt;code&gt;username.github.io&lt;/code&gt; 名稱，例如我是 &lt;code&gt;kokokuo.github.io&lt;/code&gt;，則輸入 https://kokokuo.github.io，就會看到這個 Github Page 的網站呈現了我剛剛建立的 &lt;code&gt;README&lt;/code&gt; 內容。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190208-build-static-website-to-github-page/default-readme-show-on-website.png" alt="default-readme-show-on-website" /&gt;&lt;/p&gt;
&lt;p&gt;再來我們也來測試一下上傳一個 HTML 檔案作為該靜態網站的預設頁面。&lt;/p&gt;
&lt;p&gt;點擊在 Repository 中的一個 &lt;strong&gt;create new file&lt;/strong&gt; 按鈕，並建立一個叫做 &lt;code&gt;index.html&lt;/code&gt; 的網頁檔案， Github Page 會偵測名為 &lt;code&gt;index.html&lt;/code&gt; 自動作為 https://username.github.io 的預設讀取入口檔。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190208-build-static-website-to-github-page/add-html-file-to-github.png" alt="add-html-file-to-github" /&gt;&lt;/p&gt;
&lt;p&gt;如上所述，我們建立一個簡單的 HTML 檔案，並且輸入要 Commit 的描述與內容，來完成建立。&lt;/p&gt;
&lt;p&gt;這邊稍微提一下，所謂的 Commit 表示提交，也就是提交此次新增、編輯或刪除的動作，而 Git 版本控管會記錄你每一次的 Commit，換句話說就是紀錄你每次的修改，有點像是遊戲的存擋，或是 Google 文件與 Word 會記錄你每次的新增、編輯或刪除的動作，因此未來你也可以讀取回到原先的動作與紀錄，這又稱作 &lt;strong&gt;「版本控制系統」&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;而整個 Github 的服務都是以 &lt;strong&gt;Git&lt;/strong&gt; 這套版本控制系統為核心的，所以不管是架設 Github Page 還是把程式碼放到 Repository 上都需要稍微了解一下 &lt;strong&gt;Git 版本控制系統&lt;/strong&gt; ，而同時 &lt;strong&gt;Git 版本控制系統&lt;/strong&gt; 也是目前全世界最多人用的版本控制系統。&lt;/p&gt;
&lt;p&gt;若想要深入了解的人可以查一查 &lt;strong&gt;Git 版本控管系統&lt;/strong&gt; 的用途。&lt;/p&gt;
&lt;p&gt;上傳完後，會看到以下的檔案內容：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190208-build-static-website-to-github-page/github-page-html-files.png" alt="github-page-html-files" /&gt;&lt;/p&gt;
&lt;p&gt;再次輸入網址 https://kokokuo.github.io，如下顯示的內容也改變了：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190208-build-static-website-to-github-page/test-github-page.png" alt="test-github-page" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;不過上述的方式只是單純在 Github Page 的 Repository 上做一個簡單的測試而已，接下來我們要在自己電腦本機上建立與編輯的檔案，並上傳到 Github Page 的 Repository 上。&lt;/p&gt;
&lt;h1&gt;二、透過 Git 版本控管上傳靜態網站的檔案&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;在 Github 中提供了兩種方式，第一種是透過 &lt;strong&gt;終端機(Terminal)&lt;/strong&gt; 下指令，另外一種是下載他們提供的工具 &lt;strong&gt;Github Desktop&lt;/strong&gt;，以視窗介面的形式上傳。&lt;/p&gt;
&lt;p&gt;不管是使用 Terminal 或是 &lt;strong&gt;Github Desktop&lt;/strong&gt;，都需要安裝 Git 指令工具，但只有使用 Terminal 需要手動下載一下，至於 &lt;strong&gt;Github Desktop&lt;/strong&gt; 會順便安裝進去，以下我們分別介紹：&lt;/p&gt;
&lt;h2&gt;1. 透過終端機 Terminal 指令上傳檔案&lt;/h2&gt;
&lt;p&gt;由於本人使用的是 Mac ，所以我們採用 &lt;strong&gt;Homebrew&lt;/strong&gt; 下載，不曉得 Homebrew 的人可以看一下我的這篇文章 &lt;a href="https://note.koko.guru/mac-install-homebrew.html"&gt;Homebrew (1) - Mac 上安裝 Homebrew 套件管理工具&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先我們要安裝 &lt;code&gt;git&lt;/code&gt; 這個指令工具，&lt;code&gt;git&lt;/code&gt; 也就是前面提到的「版本控制系統」，而由於在 Github 上其網站的核心與提供的功能都已經包含，所以不用特別安裝。&lt;/p&gt;
&lt;p&gt;但是在我們自己的電腦上，為了可以跟 Github 溝通並上傳檔案，所以需要安裝，不過因為 &lt;code&gt;git&lt;/code&gt; 這套系統其實只需要指令就可以執行，所以在 Mac 上我們可以直接以指令工具的形式安裝即可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; brew install git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安裝完後，我們來把我們在 Github 上的 Repository 抓下來，點選 Reposiotry 右側的 &lt;strong&gt;Clone or download&lt;/strong&gt; 並複製字串：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190208-build-static-website-to-github-page/clone-repository-url.png" alt="clone-repository-url" /&gt;&lt;/p&gt;
&lt;p&gt;在我們的終端機找好一個目錄位置把他抓下來，例如 Desktop 下面：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&amp;gt; &lt;span class="nb"&gt;cd&lt;/span&gt; ~/Desktop
Desktop/&amp;gt; git clone https://github.com/kokokuo/kokokuo.github.io.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="../images/20190208-build-static-website-to-github-page/git-clone-repository.png" alt="git-clone-repository" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;此時你便可以發現  &lt;code&gt;koko.github.io&lt;/code&gt; 這個目錄與檔案被抓下來：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190208-build-static-website-to-github-page/show-clone-repository.png" alt="show-clone-repository" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;再來我們便可以在這個目錄下新增或編輯我們要的網頁，在這裡我使用 VSCode 這套工具來編輯，我們嘗試加入一個檔案叫做 &lt;code&gt;about.html&lt;/code&gt; 在同層目錄下，並且讓 &lt;code&gt;index.html&lt;/code&gt; 加入一個連結可以跳到這個 &lt;code&gt;about.html&lt;/code&gt; 中：&lt;/p&gt;
&lt;p&gt;加入 &lt;code&gt;about.html&lt;/code&gt;：
&lt;img src="../images/20190208-build-static-website-to-github-page/add-about-html.png" alt="add-about-html" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;設定 &lt;code&gt;about.html&lt;/code&gt; 的連結：
&lt;img src="../images/20190208-build-static-website-to-github-page/add-about-link.png" alt="add-about-link" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;再來我們把修改過的結果往 &lt;code&gt;kokokuo.github.io&lt;/code&gt; 的 Repository 丟上去，透過以下幾個指令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Desktop/&lt;span class="o"&gt;(&lt;/span&gt;master&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt; git status
Desktop/&lt;span class="o"&gt;(&lt;/span&gt;master&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt; git add .
Desktop/&lt;span class="o"&gt;(&lt;/span&gt;master&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt; git config &lt;span class="nb"&gt;local&lt;/span&gt; --email &lt;span class="s2"&gt;&amp;quot;你註冊的 Github 信箱&amp;quot;&lt;/span&gt;
Desktop/&lt;span class="o"&gt;(&lt;/span&gt;master&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt; git config &lt;span class="nb"&gt;local&lt;/span&gt; --name &lt;span class="s2"&gt;&amp;quot;你註冊的 Github 用戶名稱 Username&amp;quot;&lt;/span&gt;
Desktop/&lt;span class="o"&gt;(&lt;/span&gt;master&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt; git commit -m &lt;span class="s2"&gt;&amp;quot;加入 about.html 並從 inde.html 建立 Link 到 about.html&amp;quot;&lt;/span&gt;
Desktop/&lt;span class="o"&gt;(&lt;/span&gt;master&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt; git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這邊來稍微介紹一下上述這些指令的用途，首先是 &lt;code&gt;git status&lt;/code&gt; ，這個可以透來檢查目前你做了哪些修改，所以他你輸入後，你會看到如下圖，紀錄了我們修改一個檔案 &lt;code&gt;index.html&lt;/code&gt; ，另外有一個是新加入還沒有被紀錄追蹤的檔案 &lt;code&gt;about.html&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190208-build-static-website-to-github-page/git-status.png" alt="git-status" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;然後 &lt;code&gt;git add&lt;/code&gt; 就可以用來告訴 Git 哪些變更的動作要被放到暫存區準備提交保存的，其中 &lt;code&gt;git add .&lt;/code&gt; 表示所有變更的動作都要保存：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190208-build-static-website-to-github-page/git-check-add-statue.png" alt="git-check-add-statue" width="320px"/&gt;&lt;/p&gt;
&lt;p&gt;接著透過 &lt;code&gt;git config local --email&lt;/code&gt; 與 &lt;code&gt;git config local --name&lt;/code&gt; 來設定在我們這個本機上對這個專案變更的用戶是誰，另外若設定的用戶名稱與 Email 是 Github 上註冊過的帳戶，上傳後還會顯示這個帳號在 Github 的資訊與連結哦！&lt;/p&gt;
&lt;p&gt;設定完後再透過 &lt;code&gt;git commit&lt;/code&gt; 把剛剛因為 &lt;code&gt;git add&lt;/code&gt; 指令，放到暫存區的所有變更動作提交保存，這樣未來要是出了什麼問題，只要本機上的整個專案目錄不刪除，都能回到之前的版本哦。&lt;/p&gt;
&lt;p&gt;最後我們以 &lt;code&gt;git push origin master&lt;/code&gt; 指令把這些提交變更上傳到我們剛剛抓下來的 Github Repository 上傳回去 Github Repository：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190208-build-static-website-to-github-page/git-push-master.png" alt="git-push-master" /&gt;&lt;/p&gt;
&lt;p&gt;接著我們回到 Github Page 存放的 Repository ，此時修改與新的檔案已經在此，輸入 https://kokokuo.github.io 也能看到新的內容出現了！&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190208-build-static-website-to-github-page/updated-repository.png" alt="updated-repository" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190208-build-static-website-to-github-page/new-index-html.png" alt="new-index-html" width="320px"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190208-build-static-website-to-github-page/new-about-html.png" alt="new-about-html" width="320px"/&gt;&lt;/p&gt;
&lt;p&gt;而且使用 &lt;code&gt;git push&lt;/code&gt; 指令上傳到 Github Repository 還能幫忙備份檔案，讓你在本機上刪除專案目錄後，也能再次下載還原，一舉數得。&lt;/p&gt;
&lt;p&gt;好的，到此完成使用 &lt;strong&gt;Terminal 終端機與指令&lt;/strong&gt; 上傳與架設靜態 Github Page 網站囉，再來我們要介紹比較簡單的 &lt;strong&gt;Github Desktop&lt;/strong&gt; ，讓不熟悉或懼怕指令的朋友們也能輕鬆上手。&lt;/p&gt;
&lt;h2&gt;2. 透過 Github Desktop 軟體上傳靜態網站的檔案&lt;/h2&gt;
&lt;p&gt;在上半部我們講完了如何使用 &lt;strong&gt;Terminal 終端機與指令&lt;/strong&gt; 上傳與架設靜態 Github Page 網站，接下來我們要介紹如何使用 &lt;strong&gt;Github Desktop&lt;/strong&gt; 軟體一樣做到上傳檔案與架設靜態的 Github Page 網站。&lt;/p&gt;
&lt;p&gt;不使用指令的人可以在 &lt;strong&gt;一、創建一個存放靜態網站的 Github 倉儲庫 (Repository)&lt;/strong&gt; 完成後，不於電腦上安裝 &lt;code&gt;git&lt;/code&gt; ，而是選擇安裝 Github 提供的一個圖形化的版本控制軟體，叫做 &lt;strong&gt;Github Desktop&lt;/strong&gt; 來加入檔案、 Commit 提交或是推送到 Github Respository 上。( 如果你對這類工具很熟悉，你也可以選擇其他類的工具，例如： SourceTree )。&lt;/p&gt;
&lt;p&gt;首先開始搜尋 Github Desktop 會進入下載的連結頁面，如下圖你會看到一個 Mac OS 的版本可以下載。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190208-build-static-website-to-github-page/github-desktop-website.png" alt="github-desktop-website" /&gt;&lt;/p&gt;
&lt;p&gt;安裝後開啟程式，會需要你登入自己的 Github 帳戶，如下圖：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190208-build-static-website-to-github-page/signin-github-account.png" alt="signin-github-account" /&gt;&lt;/p&gt;
&lt;p&gt;再來選擇你放在 Github 上要 Clone 抓下來的 Repository，在這邊我們選擇自己 Github Page 所存放的 Repository：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190208-build-static-website-to-github-page/clone-repo-desktop.png" alt="clone-repo-desktop" /&gt;&lt;/p&gt;
&lt;p&gt;選擇後可以設定抓下來放在本機端的位置：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190208-build-static-website-to-github-page/clone-local-path-desktop.png" alt="clone-local-path-desktop" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;抓下來後 Github Desktop 會進入工作畫面（如下圖），此頁面會告知若專案更改時，會有哪些變動的檔案，我們可以點選 &lt;strong&gt;Show in Finder&lt;/strong&gt; 直接找到下載下來的 Repository 目錄並接著編輯：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190208-build-static-website-to-github-page/dashboard-click-show-finder.png" alt="dashboard-click-show-finder" /&gt;&lt;/p&gt;
&lt;p&gt;我們繼續編輯 &lt;strong&gt;1. 透過終端機 Terminal 指令上傳檔案&lt;/strong&gt; 之後的檔案內容：&lt;/p&gt;
&lt;p&gt;加入一個 &lt;code&gt;profolio.html&lt;/code&gt; 並且在 &lt;code&gt;index.html&lt;/code&gt; 頁面加入一個作品集的連結，在更新一下 &lt;code&gt;README.md&lt;/code&gt; 檔案&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190208-build-static-website-to-github-page/add-profolio-html.png" alt="add-profolio-html" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;回到 Github Desktop，你會看到更動的檔案與結果會被呈現出來，接著在左下角輸入要 Commit 的訊息並 Commit 提交此次的變更：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190208-build-static-website-to-github-page/commit-new-action-desktop.png" alt="commit-new-action-desktop" /&gt;&lt;/p&gt;
&lt;p&gt;提交後再按下 &lt;strong&gt;Push Origin&lt;/strong&gt; 送出到 Repository 上就大功告成囉。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190208-build-static-website-to-github-page/push-in-desktop.png" alt="push-in-desktop" /&gt;&lt;/p&gt;
&lt;p&gt;最後輸入 Github Page 的網址，例如我的是 https://kokokuo.github.io 就會看到更新的結果：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190208-build-static-website-to-github-page/desktop-page-result.png" alt="desktop-page-result" width="320px"/&gt;&lt;/p&gt;
&lt;h1&gt;後記&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;透過 Github Page 你可以快速且免費的搭建簡易的靜態網站，不過上述自己撰寫 HTML/CSS 等網頁是比較費時間的，此時你不妨可以考慮使用 &lt;strong&gt;態網站產生器 (Static Site Generator)&lt;/strong&gt; 來快速搭建你的靜態網站，在直接上傳到 Github Page 上。&lt;/p&gt;
&lt;p&gt;而且目前靜態網站產生器的選擇上非常多樣化，如果你想要知道哪裡可以選擇靜態網站，以及更加認識什麼是靜態網站，可以接著閱讀 &lt;a href="https://note.koko.guru/what-is-static-site-generator-and-when-to-use.html"&gt;什麼是靜態網站 (Static Site) 與 靜態網站產生器 (Static Site Generator)&lt;/a&gt; 來了解更多。&lt;/p&gt;</content><category term="靜態網站產生器"></category></entry><entry><title>使用 Github Page 作為靜態網誌的空間 - 以 Pelican 為例</title><link href="https://note.koko.guru/deploy-pelican-static-webiste-to-github-page.html" rel="alternate"></link><published>2019-02-05T00:00:00+08:00</published><updated>2019-02-05T00:00:00+08:00</updated><author><name>kokokuo</name></author><id>tag:note.koko.guru,2019-02-05:/deploy-pelican-static-webiste-to-github-page.html</id><summary type="html">&lt;p&gt;在前一篇 &lt;a href="https://note.koko.guru/mac-using-pelican-build-static-website.html"&gt;在 Mac 上使用 Python 的 Pelican 建立靜態個人網誌&lt;/a&gt; 中介紹了如何在本機端，安裝 Pelican 並建立自己的個人網誌，但是這個網誌卻只能在自己的電腦中呈現，並沒有放到網路上，因為我們缺少了可以存放 Pelican 網誌的伺服器。&lt;/p&gt;</summary><content type="html">&lt;p&gt;這篇我們特別記錄了使用 Pelican 靜態網站時，如何部署到 Github Page 的過程，因為只要把檔案上傳即可，並且還不用花費任何半毛錢，接著我們就來了解。&lt;/p&gt;
&lt;h1&gt;前言&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;在前一篇 &lt;a href="https://note.koko.guru/mac-using-pelican-build-static-website.html"&gt;在 Mac 上使用 Python 的 Pelican 建立靜態個人網誌&lt;/a&gt; 中介紹了如何在本機端，安裝 Pelican 並建立自己的個人網誌，但是這個網誌卻只能在自己的電腦中呈現，並沒有放到網路上，因為我們缺少了可以存放 Pelican 網誌的伺服器。&lt;/p&gt;
&lt;p&gt;不過因為靜態網站只有 HTML/CSS/JS 這類單純的檔案結構，需要建置資料庫，也沒有後端的語言因此可以選擇架設的選擇性也比較多樣，因為只需要一個空間與簡單的伺服器軟體即可，所以我們可以架設一台自己的伺服器電腦透過 SSH 或 FTP 上傳，又或是使用 Dropbox 空間，雲端 AWS 與 Google Cloud, Azure 提供的服務。&lt;/p&gt;
&lt;p&gt;但是上述中，要自己架設主機花時間也需要一些專業知識，使用 Dropbox、雲端服務的空間或多或少會需要收取一些費用，如果我們希望簡單又能夠不花費的話，要怎麼辦呢？&lt;/p&gt;
&lt;p&gt;因此這裡我們就要選擇 &lt;strong&gt;Github Page&lt;/strong&gt; ，因為只要把檔案上傳即可，並且還不用花費任何半毛錢，以及因為 &lt;strong&gt;Github Page&lt;/strong&gt; 是 &lt;strong&gt;Github&lt;/strong&gt; 的服務之一，因此支援版本控制系統，簡單來說就是能夠幫你記錄每一次上傳更新的所有紀錄，能方便你還原上一版。&lt;/p&gt;
&lt;p&gt;而這篇我們特別記錄了使用 Pelican 靜態網站時，如何部署到 Github Page 的過程。&lt;/p&gt;
&lt;h1&gt;一、創建一個 Github Page 的倉儲庫 (Repository)&lt;/h1&gt;
&lt;p&gt;首先我們需要在 Github 建立一個 Github Page 用的 Repository ，第一次使用 Github 的朋友可以先去註冊一個。&lt;/p&gt;
&lt;p&gt;這個 Github Page 用的 Repository 會專門用來放置的靜態網誌的檔：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190205-deploy-pelican-static-website-to-github-page/build-github-page-repository.png" alt="build-github-page-repository" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;需要特別注意的部分是，我們的 Repository 名稱需要照個 Github Page 的教學指示，建立一個格式為 username.github.io 的名稱，而這個 &lt;code&gt;username&lt;/code&gt; 必須是你的 Github 使用者名稱，如此 Github Page 才會知道你要建立屬於自己的個人網站並且作用，例如我的名稱是 &lt;code&gt;kokokuo&lt;/code&gt; 所以我建立的 Repository 名稱為 &lt;code&gt;kokokuo.github.io&lt;/code&gt;，如果不照著此方式，是無法作用建立的。&lt;/p&gt;
&lt;p&gt;而 Repository 的權限、 &lt;code&gt;README&lt;/code&gt; 與 &lt;code&gt;.gitignore&lt;/code&gt;，看個人需要，例如我設定為 Public，定且有 README 與 Python 的 .gitnore (因為使用 Pelican)。&lt;/p&gt;
&lt;p&gt;建立完後，你的 Repository 會如此畫面：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190205-deploy-pelican-static-website-to-github-page/github-page-default-repository.png" alt="github-page-default-repository" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;附註：因為我有使用 README，Github Repository 的 README 會把剛剛建立時輸入的 Description 直接自動填上。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;完成後這個網站便可以馬上作用囉，只要在網址上輸入你建立的 &lt;code&gt;username.github.io&lt;/code&gt; 名稱，例如我是 &lt;code&gt;kokokuo.github.io&lt;/code&gt;，則輸入 https://kokokuo.github.io，就會看到這個 Github Page 的網站呈現了我剛剛建立的 &lt;code&gt;README&lt;/code&gt; 內容。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190205-deploy-pelican-static-website-to-github-page/default-readme-show-on-website.png" alt="default-readme-show-on-website" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;二、 Git 版管與 Repository 來源設定&lt;/h1&gt;
&lt;p&gt;再來就是第二部步驟，上傳檔案，而 Github 提供了兩種方式，第一種是透過 &lt;strong&gt;終端機(Terminal)&lt;/strong&gt; 下指令，另外一種是下載他們提供的工具 &lt;strong&gt;Github Desktop&lt;/strong&gt;，以視窗介面的形式上傳。&lt;/p&gt;
&lt;p&gt;不過在操作上，由於 Pelican 有提供一些指令的部署工具，因此在此部分我們統一使用 Terminal 以指令的方式操作。&lt;/p&gt;
&lt;p&gt;開始之前我們先確認是否有進到靜態網誌的專案目錄下，並且透過 Pipenv 或 Virtualenv 進入到虛擬環境下（這裡以 Pipenv 為例子），同時確認是否有執行或把 &lt;strong&gt;output&lt;/strong&gt; 目錄中的 HTML 檔更新到最新，如果沒有則再次執行 &lt;code&gt;make html&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; &lt;span class="nb"&gt;cd&lt;/span&gt; kokokuo-note
kokokuo-note&amp;gt; pipenv shell
&lt;span class="o"&gt;(&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;)&lt;/span&gt;kokokuo-note&amp;gt; make html
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;1. 安裝 Git 指令工具&lt;/h2&gt;
&lt;p&gt;首先我們要安裝 Git 指令工具，由於本人使用的是 Mac ，所以我們採用 &lt;strong&gt;Homebrew&lt;/strong&gt; 下載，不曉得 Homebrew 的人可以看一下我的這篇文章 &lt;a href="https://note.koko.guru/mac-install-homebrew.html"&gt;Homebrew (1) - Mac 上安裝 Homebrew 套件管理工具&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; brew install git
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2. 設定 Github Page Repository 的來源位置至 Git 中&lt;/h2&gt;
&lt;p&gt;再來我們要把在 Github 上我們剛建立好的 Github Page Repository 與我們的 Pelican 網誌做一個繫結。&lt;/p&gt;
&lt;p&gt;首先點選建立的 Repository 的 &lt;strong&gt;Clone or Download&lt;/strong&gt;，並複製顯示的 URL:&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190205-deploy-pelican-static-website-to-github-page/clone-repository-url.png" alt="clone-repository-url" /&gt;&lt;/p&gt;
&lt;p&gt;回到 Terminal 下，輸入以下指令，先在自己的 Pelican 網誌目錄下透過 &lt;code&gt;git init&lt;/code&gt; 建立 Git 版本控管功能，Git 會預設幫我們建立一個 &lt;code&gt;master&lt;/code&gt; 分支並在此分支下工作。&lt;/p&gt;
&lt;p&gt;之後把剛剛的 URL 透過 &lt;code&gt;git remote add origin&lt;/code&gt; 把網誌專案與 Repository 完成繫結：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;)&lt;/span&gt;kokokuo-note&amp;gt; git init
&lt;span class="o"&gt;(&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;)&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;(&lt;/span&gt;master&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt; git remote add origin https://github.com/kokokuo/kokokuo.github.io.git
&lt;span class="o"&gt;(&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;)&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;(&lt;/span&gt;master&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt; git status &lt;span class="c1"&gt;# 確認是否有新增修改編輯刪除的檔案動作還沒被提交&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如下圖，其中我們透過 &lt;code&gt;git status&lt;/code&gt; 確認是否 &lt;code&gt;git init&lt;/code&gt; 有無作用，或是來確認此次的變動修改有哪些檔案： &lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190205-deploy-pelican-static-website-to-github-page/git-init-add-remote.png" alt="git-init-add-remote" /&gt;&lt;/p&gt;
&lt;p&gt;完成上述步驟，這個網誌目錄就與剛剛建立的 Github Repository 有了一個聯繫，之後我們便可以開始把整個 &lt;strong&gt;kokokuo&lt;/strong&gt; 目錄透過 Git 提交儲存，再提交之前，我們先在專案目錄下建立一個 &lt;code&gt;.gitignore&lt;/code&gt; 檔案並填入以下來榮。透過這個 &lt;code&gt;.gitignore&lt;/code&gt; 檔案來過濾掉一些不必要上傳的檔案：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 過濾掉 Mac 的 DS_Store&lt;/span&gt;
.DS_Store

&lt;span class="c1"&gt;# 過濾掉 VSCode 的設定檔案&lt;/span&gt;
.vscode/*

&lt;span class="c1"&gt;# 過濾 Pipenv 的虛擬環境&lt;/span&gt;
.venv/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;完成上述的 &lt;code&gt;.gitignore&lt;/code&gt; 後便可以開始透過以下指令步驟提交，可以發現再次下 &lt;code&gt;git status&lt;/code&gt; 時，我們原本的 &lt;code&gt;.venv&lt;/code&gt; 這個目錄消失了，因為我們把它也放在 &lt;code&gt;.gitignore&lt;/code&gt; 中讓此目錄不需要被提交存擋：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190205-deploy-pelican-static-website-to-github-page/git-status.png" alt="git-status" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;再來我們要設定 &lt;code&gt;git config&lt;/code&gt;，因為需要告訴 Git 這個提交的作者是誰，才能追朔後續的歷史紀錄與變動，因此如果沒有設定，後半段的 Commit 也無法成功。&lt;/p&gt;
&lt;p&gt;另外如果這個作者的信箱有註冊在 Github 中，那麼後續上傳到 Github 上時也能看到這個使用者。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;)&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;(&lt;/span&gt;master&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt; git config &lt;span class="nb"&gt;local&lt;/span&gt; --email &lt;span class="s2"&gt;&amp;quot;你註冊的 Github 信箱&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;)&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;(&lt;/span&gt;master&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt; git config &lt;span class="nb"&gt;local&lt;/span&gt; --name &lt;span class="s2"&gt;&amp;quot;你註冊的 Github 用戶名稱 Username&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下來我們就要接著提交，並且發布上傳到 Github Page 上。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;三、Github Page 發布的分支設定&lt;/h1&gt;
&lt;p&gt;之所以我們的 Github Page 能顯示 &lt;code&gt;README&lt;/code&gt; 檔案的內容，是因為 Github Page Repository 預設會去尋找 &lt;code&gt;master&lt;/code&gt; 或 &lt;code&gt;gh-pages&lt;/code&gt; 分支底下的 &lt;code&gt;index.html&lt;/code&gt; 檔案，作為 https://username.github.io 呈現的內容。&lt;/p&gt;
&lt;p&gt;不過對於個用戶或組織的帳戶建立的 Github Page 網頁，只能在 &lt;code&gt;master&lt;/code&gt; 分支生效 (e.g: &lt;code&gt;username.github.io&lt;/code&gt; 這種格式），而 &lt;code&gt;gh-pages&lt;/code&gt;，則針對在程式碼專案的部分&lt;/p&gt;
&lt;p&gt;另外若是都沒有 &lt;code&gt;index.html&lt;/code&gt; 的話，則會優先顯示 &lt;code&gt;README&lt;/code&gt; 這個檔案的內容。&lt;/p&gt;
&lt;p&gt;而在此篇我們介紹個人用戶的靜態網站，所以會以 &lt;code&gt;master&lt;/code&gt; 為主，至於專案的 &lt;code&gt;gh-pages&lt;/code&gt; 以後會再介紹。&lt;/p&gt;
&lt;h2&gt;使用 master 作為發布分支的設定&lt;/h2&gt;
&lt;p&gt;由於 Pelican 產生出來的 HTML/CSS 這些靜態檔案是放在 &lt;strong&gt;output&lt;/strong&gt; 目錄中的，因此如果整個 Pelican 專案上傳到預設的 &lt;code&gt;master&lt;/code&gt; 分支 時，因為靜態檔案被放在 &lt;strong&gt;output&lt;/strong&gt; ，所以會無法讀取顯示成功。&lt;/p&gt;
&lt;p&gt;因此我們需要把這些 &lt;strong&gt;output&lt;/strong&gt; 中的靜態檔案放到 &lt;code&gt;master&lt;/code&gt; 中，而原本包含了 &lt;strong&gt;content&lt;/strong&gt; 目錄、Makefile 與 pelicanconf.py 等的這些建立 Pelican 檔案時的來源檔案，我們要放到另外一個分支作為網存與記錄用。&lt;/p&gt;
&lt;p&gt;在這邊我們會以 &lt;code&gt;develop&lt;/code&gt; 作為我們 Pelican 靜態網站的來源檔案：&lt;/p&gt;
&lt;h3&gt;(1.) 建立 Pelican 來源檔案變動與保存的分支 - 以 &lt;code&gt;develop&lt;/code&gt; 分支為例&lt;/h3&gt;
&lt;p&gt;首先透過 &lt;code&gt;git checkout -b&lt;/code&gt; 建立 &lt;code&gt;develop&lt;/code&gt; 分支：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;)&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;(&lt;/span&gt;master&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt; git checkout -b develop &lt;span class="c1"&gt;# 建立一個新的分支 develop，並把現在的檔案都遷移到此分支下。&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;)&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;(&lt;/span&gt;develop&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt; git status # 查看現在狀態
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如下圖會看到我們已經搬移到 &lt;code&gt;develop&lt;/code&gt; 中了：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190205-deploy-pelican-static-website-to-github-page/checkout-develop.png" alt="checkout-develop" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;再來我們要把這些檔案 Commit 到此 &lt;code&gt;develop&lt;/code&gt; 分支上：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;)&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;(&lt;/span&gt;develop&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt; git add . &lt;span class="c1"&gt;# 告訴 Git 這個目錄下所有的檔案將要被上傳到 Repository 上&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;)&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;(&lt;/span&gt;develop&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt; git commit -m &lt;span class="s2"&gt;&amp;quot;生成所有 Pelican 網誌的檔案&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;# 準備提交所有的編輯動作完成存擋，透過 -m 給予此次提交的訊息內容&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;提交完後，上傳這個 &lt;code&gt;develop&lt;/code&gt; 分支與存檔到 Repository 上，來保存我們的來源內容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;)&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;(&lt;/span&gt;develop&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt; git push origin develop
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;(2.) 使用 &lt;code&gt;make github&lt;/code&gt; 指令把 output 靜態檔案上傳到 &lt;code&gt;master&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;當我們建立了 develop 分支並提交到 Repository 保存好我們的 Pelican 專案來源檔案後，再來我們就要使用到 Pelican 提供的 Makefile 檔案中的一個指令 &lt;code&gt;make github&lt;/code&gt;。透過這個 &lt;code&gt;make github&lt;/code&gt; 會自動執行 &lt;code&gt;make html&lt;/code&gt; 產生在 &lt;strong&gt;output&lt;/strong&gt; 目錄下的靜態 HTML 檔案，獨立推送上傳到 &lt;code&gt;master&lt;/code&gt; 分支中。&lt;/p&gt;
&lt;p&gt;不過為何會是推送到 &lt;code&gt;master&lt;/code&gt; 呢？ 因為這個 &lt;code&gt;make github&lt;/code&gt; 是讀取 Makefile 中設定好的預設上傳分支參數 &lt;code&gt;GITHUB_PAGES_BRANCH&lt;/code&gt;，而預設就是 &lt;code&gt;master&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190205-deploy-pelican-static-website-to-github-page/makefile-content.png" alt="makefile-content" /&gt;&lt;/p&gt;
&lt;p&gt;接下來在正式使用 &lt;code&gt;make github&lt;/code&gt; 指令前，我們需要先安裝這個 Makefile 在執行 &lt;code&gt;make github&lt;/code&gt; 所使用到的一個套件，叫做 &lt;code&gt;ghp-import&lt;/code&gt; ，這個套件需要用到 &lt;code&gt;pip&lt;/code&gt; 安裝，而因為我使用 Pipenv 所以如下執行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;)&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;(&lt;/span&gt;develop&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt; pipenv install ghp-import
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="../images/20190205-deploy-pelican-static-website-to-github-page/pipenv-install-ghp-import.png" alt="pipenv-install-ghp-import" width="480px" /&gt;&lt;/p&gt;
&lt;p&gt;安裝完後我們再次更新 Commit 提交：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;)&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;(&lt;/span&gt;develop&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt; git add .
&lt;span class="o"&gt;(&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;)&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;(&lt;/span&gt;develop&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt; git commit -m &lt;span class="s2"&gt;&amp;quot;安裝 ghp-import&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="../images/20190205-deploy-pelican-static-website-to-github-page/add-ghp-import-and-commit.png" alt="add-ghp-import-and-commit" width="480px" /&gt;&lt;/p&gt;
&lt;p&gt;提交完後，我們便可以開始執行 &lt;code&gt;make github&lt;/code&gt; ：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;)&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;(&lt;/span&gt;develop&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt; make github
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="../images/20190205-deploy-pelican-static-website-to-github-page/pelican-develop-make-github-push.png" alt="pelican-develop-make-github-push" /&gt;&lt;/p&gt;
&lt;p&gt;你會看到 &lt;code&gt;make github&lt;/code&gt; 以 Makefile 中指定的 &lt;code&gt;master&lt;/code&gt; 作為分支參數，自己幫我們把輸出的 &lt;strong&gt;output&lt;/strong&gt; 檔案推送到 Makefile 中指定的 &lt;code&gt;master&lt;/code&gt; 分支上。&lt;/p&gt;
&lt;p&gt;之後切換到 Github Page 的 Repository 查看，如下圖你會看到 &lt;strong&gt;output&lt;/strong&gt; 目錄下的 HTML 等靜態檔案都已在此 &lt;code&gt;master&lt;/code&gt; 的 Repository 中：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190205-deploy-pelican-static-website-to-github-page/pelican-make-push-master-files.png" alt="pelican-make-push-master-files" /&gt;&lt;/p&gt;
&lt;p&gt;同時輸入網址，會看到我們的網頁內容，例如我是 https://kokokuo.github.io：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190205-deploy-pelican-static-website-to-github-page/final-finish-deploy-pelican.png" alt="final-finish-deploy-pelican" /&gt;&lt;/p&gt;
&lt;p&gt;到此大功告成囉！&lt;/p&gt;
&lt;p&gt;&lt;em&gt;補充：在執行 &lt;code&gt;make github&lt;/code&gt; 指令時，會在本機端建立 &lt;code&gt;master&lt;/code&gt; 分支並提交推送，如果在 Github Page 的 Repository 有較早推送的檔案，會一併刪除舊檔案請注意。&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;參考來源&lt;/h1&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/"&gt;Configuring a publishing source for GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/39978856/unable-to-change-source-branch-in-github-pages"&gt;PUBLIC Stack Overflow Tags Users Jobs Teams Q&amp;amp;A for work Learn More Unable to change source branch in GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://chenjiee815.github.io/pelicanru-men-zhi-nan.html"&gt;Pelican 入门指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.xycoding.com/articles/2013/11/21/blog-create/"&gt;使用 Pelican 和 GitHub Pages 搭建个人博客 —— 基础篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.getpelican.com/en/stable/content.html"&gt;Pelican Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Python"></category><category term="Pelican"></category><category term="Github"></category><category term="靜態網站產生器"></category></entry><entry><title>什麼是靜態網站 (Static Site) 與 靜態網站產生器 (Static Site Generator)</title><link href="https://note.koko.guru/what-is-static-site-generator-and-when-to-use.html" rel="alternate"></link><published>2019-01-28T00:00:00+08:00</published><updated>2019-01-28T00:00:00+08:00</updated><author><name>kokokuo</name></author><id>tag:note.koko.guru,2019-01-28:/what-is-static-site-generator-and-when-to-use.html</id><summary type="html">&lt;p&gt;當我們要架設一個網站時，一定或多或少會去想一下，這個網站是什麼用途，要怎麼架設與架設在哪裡。&lt;/p&gt;</summary><content type="html">&lt;p&gt;而如果你的網站只是要單純呈現內容與介紹資訊為主，那麼你的網站可能有單純的靜態內容，此時我們也稱這類型的網站為 &lt;strong&gt;靜態網站 (Static Site)&lt;/strong&gt;，此時你可以考慮使用 &lt;strong&gt;靜態網站產生器 (Static Site Generator)&lt;/strong&gt; 來製作。&lt;/p&gt;
&lt;p&gt;那麼什麼是 &lt;strong&gt;靜態網站 (Static Site)&lt;/strong&gt;，什麼又是 &lt;strong&gt;靜態網站產生器 (Static Site Generator)&lt;/strong&gt; 呢？&lt;/p&gt;
&lt;p&gt;以下我們就來談談與介紹。&lt;/p&gt;
&lt;h1&gt;前言&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;當我們要架設一個網站時，一定或多或少會去想一下，這個網站是什麼用途，要怎麼架設與架設在哪裡。&lt;/p&gt;
&lt;p&gt;而如果你的網站只是要單純呈現內容與介紹資訊為主，那麼你的網站可能有單純的靜態內容，此時我們也稱這類型的網站為 &lt;strong&gt;靜態網站 (Static Site)&lt;/strong&gt;，此時你可以考慮使用 &lt;strong&gt;靜態網站產生器 (Static Site Generator)&lt;/strong&gt; 來製作。&lt;/p&gt;
&lt;p&gt;那麼什麼是 &lt;strong&gt;靜態網站 (Static Site)&lt;/strong&gt;，什麼又是 &lt;strong&gt;靜態網站產生器 (Static Site Generator)&lt;/strong&gt; 呢？&lt;/p&gt;
&lt;p&gt;以下我們就來談談與介紹。&lt;/p&gt;
&lt;h1&gt;靜態網站產生器 (Static Site Generator)&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;要談到「靜態網站產生器」，需要先分別介紹何謂「靜態網站」、「內容管理系統 CMS」。&lt;/p&gt;
&lt;h3&gt;靜態網站 (Static Site)&lt;/h3&gt;
&lt;p&gt;雖然英文是寫 Static Site，但是其實這裡的 Site 是指 WebSite ，一般所謂的靜態網站通常是指該網站的網頁與資料組成都是以 HTML/CSS/JS 檔案組成。&lt;/p&gt;
&lt;p&gt;除此之外，像是能有資料庫儲存，或是其他複雜功能如會員功能、用戶登入、發布文章，或是如購物結帳刷卡等功能，由於都是透過後端語言（諸 PHP, Ruby, Python, Java, Node.js, C# ...等等）完成的，因此也不是靜態網站能做到的事情。 通常具備上述這些特色的都稱動態網站。&lt;/p&gt;
&lt;p&gt;所以像是一般耳熟能詳的 Wordpress 因為具備後台編寫、會員購物車等擴充功能、使用 PHP 語言，需要資料庫等條件，就不屬於靜態網站，而是所謂的動態網站。&lt;/p&gt;
&lt;h3&gt;內容管理系統 (CMS)&lt;/h3&gt;
&lt;p&gt;內容管理系統可以新增、編輯與發佈內容文章外，也能透過目錄與標籤等功能協助分類管理，並能選擇主題來呈現不同的外觀，如 Wordpress ，通常內容管理系統會透過後端程式語言與資料庫來建置與運作。&lt;/p&gt;
&lt;p&gt;然而上述的內容管理系統(CMS) 正需因要有資料庫與後端語言搭建的服務，因此在建置與使用上需要額外花些時間學習與維護，也有不好遷移或轉移到不同的 CMS 管理系統，因此才有了靜態網站產生器的出現。&lt;/p&gt;
&lt;h3&gt;靜態網站產生器 (Static Site Generator)&lt;/h3&gt;
&lt;p&gt;靜態網站產生器一樣擁有能做到新增，編輯與發佈文章，也能標籤與分類管理或更換主題樣式，但是這一切只要由 Markdown 格式的檔案編寫，再透過產生器產出只需要 HTML/CSS/JS 檔案組成靜態網站即可，因此所有的文章都只要以 Markdown 格式的檔案保存在目錄即可，也能直接編輯，在透過產生器自動建置產生即可。&lt;/p&gt;
&lt;h1&gt;使用靜態網站的優點&lt;/h1&gt;
&lt;hr&gt;
&lt;h2&gt;優點&lt;/h2&gt;
&lt;h3&gt;操作簡單&lt;/h3&gt;
&lt;p&gt;你不需要學習後端程式語言，學習資料庫語法，或是複雜的架設伺服器等方式，你只需要 HTML / CSS 或是許多靜態網站的工具會使用 Markdown 語法撰寫，因此非常快上手。&lt;/p&gt;
&lt;h3&gt;快速&lt;/h3&gt;
&lt;p&gt;因為靜態網站的內容都是 HTML/CSS/JS 等檔案，所以不需要有資料庫，也不需要從資料庫查詢資料，也沒有伺服器做請求，頁面也不用樣板渲染，因此速度上會非常快速。&lt;/p&gt;
&lt;h3&gt;安全&lt;/h3&gt;
&lt;p&gt;你不用擔心伺服器與資料庫被攻擊，因為你只有前端的靜態檔案，而且這些檔案因為是 HTML 所以你再架設時的內容自然都是對外的資訊。&lt;/p&gt;
&lt;h3&gt;便宜&lt;/h3&gt;
&lt;p&gt;因為不用架設資料庫，也不用架設動態網站所需要的伺服器，所以擺設你的靜態網站檔案的主機費用可以很低，甚至有許多的服務提供免費的架設，如 Github Page。&lt;/p&gt;
&lt;h2&gt;缺點&lt;/h2&gt;
&lt;h3&gt;功能極度受限&lt;/h3&gt;
&lt;p&gt;因為是靜態網站，只有 HTML/CSS/JS，所以能做的事情非常受限，例如沒有辦法製作會員功能，提供註冊、登入與登出，沒有辦法輸入資料保存，也沒有辦法提供像是購物、刷卡等功能等等；靜態網站只能拿來以顯示內容為主，加上一些簡易的網頁前端的動態效果（如漸層、滑動...等等）。&lt;/p&gt;
&lt;h3&gt;沒有 real-time content&lt;/h3&gt;
&lt;p&gt;因為都是靜態的內容，所以也沒會有自動出現或產生的內容存在，不像一般的網站可以在網頁上新增、編輯或刪除內容。&lt;/p&gt;
&lt;h1&gt;何時選擇使用靜態網站&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;若你的網站只要呈現個人的基本資訊作為履歷，或是以呈現、寫文章 Blog 等內容為主，那麼可以選擇使用靜態網站來快速建置達成你的蜜標。&lt;/p&gt;
&lt;h1&gt;如何選擇靜態網站產生器&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;雖然靜態網站產生器都有 CMS 的功能，不過在預設的用途定義上還是有些區分，例如有些是用在專案的文件製作，而有些是以網誌為主自己選擇由熟悉，有些除了 Markdown 外還支援別的格式編寫，或是有其他的功能特色，如回覆留言，RSS 訂閱，Google Analytics ..等。&lt;/p&gt;
&lt;p&gt;並且產生器所使用的程式語言都不太相同 (e.g: Ruby, Node.js, Python, PHP ...)，因此會建議參考 &lt;a href="https://www.staticgen.com/"&gt;StaticGen&lt;/a&gt; 網站來選擇，並對每一個靜態網站研究。&lt;/p&gt;
&lt;p&gt;&lt;img alt="staticgen-site" src="../images/20190128-what-is-static-site-generator-and-when-to-use/staticgen-site.png"&gt;&lt;/p&gt;
&lt;h1&gt;參考文章&lt;/h1&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.staticgen.com/"&gt;StaticGen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.cloudcannon.com/jekyll/why-use-a-static-site-generator/"&gt;Why use a static site generator?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wsvincent.com/what-is-a-static-site-generator/"&gt;What is a Static Site Generator?&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="靜態網站產生器"></category></entry><entry><title>在 Mac 上使用 Python 的 Pelican 建立靜態個人網誌</title><link href="https://note.koko.guru/mac-using-pelican-build-static-website.html" rel="alternate"></link><published>2019-01-13T00:00:00+08:00</published><updated>2019-01-13T00:00:00+08:00</updated><author><name>kokokuo</name></author><id>tag:note.koko.guru,2019-01-13:/mac-using-pelican-build-static-website.html</id><summary type="html">&lt;p&gt;以前雖然使用 Wordpress 作為網誌，但是由於自己的網誌用途單純以寫作為主，加上先前遇到架設的 Wordpress 後來有轉移主機的情形，但轉移與重建過程繁瑣外，再次架設還需要還原資料庫，甚至新的 Wordpress 格式跑掉。&lt;/p&gt;</summary><content type="html">&lt;p&gt;因此這次決定採用 &lt;strong&gt;markdown 格式撰寫為主的靜態網誌產生器 ( Static Site Generator )&lt;/strong&gt; 來產生部落格，這樣的好處除了未來要轉移時檔案都會以 markdown 檔案攜帶保存外，在本機端也能隨時編輯與閱讀，呈現格式也比較不用擔心跑掉需要重新設定（例如 Wordpress 升級或是主題更新或更換主題跑版）！&lt;/p&gt;
&lt;p&gt;這麼神奇的方式要怎麼使用，接著們我就來了解。&lt;/p&gt;
&lt;h1&gt;前言&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;自從工作超過一年後便開始停擺了自己的習慣，不過伴隨著逐漸的累積過程，最近有了想要重新撰寫網誌的想法，再加上自己不僅喜歡分享外，也認為取之網路回饋網路。&lt;/p&gt;
&lt;p&gt;以前雖然使用 Wordpress 作為網誌，但是由於自己的網誌用途單純以寫作為主，加上先前遇到架設的 Wordpress 後來有轉移主機的情形，但轉移與重建過程繁瑣外，再次架設還需要還原資料庫，甚至新的 Wordpress 格式跑掉。&lt;/p&gt;
&lt;p&gt;因此這次決定採用 &lt;strong&gt;markdown 格式撰寫為主的靜態網誌產生器 ( Static Site Generator )&lt;/strong&gt; 來產生部落格，這樣的好處除了未來要轉移時檔案都會以 markdown 檔案攜帶保存外，在本機端也能隨時編輯與閱讀，呈現格式也比較不用擔心跑掉需要重新設定（例如 Wordpress 升級或是主題更新或更換主題跑版），程式語言也只要稍微了解一些就好（像是以前的無名小站）。&lt;/p&gt;
&lt;p&gt;所以我們接著來學習吧！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;使用 Pelican 靜態網站產生器架設靜態網站&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;目前靜態網站產生器的選擇上非常多樣化，參考 &lt;a href="https://www.staticgen.com/"&gt;StaticGen&lt;/a&gt; 可以看到許多使用不同程式語言開發的產生器，並且每個產生器都有特別的特色。&lt;/p&gt;
&lt;p&gt;而自己則是使用熟悉的 Python 語言所開發的 Pelican 作為個人的網誌，同時該產生器提供的樣式主題豐富外，在設定上也只需要編輯 &lt;code&gt;pelicanconf.py&lt;/code&gt; 與 &lt;code&gt;publishconf.py&lt;/code&gt; 即可，能夠自己定義新的頁面（如 About Me, 作品集...等)，擁有標籤與分類目錄的工能，並能安插 Google Analystic、 Twitter, Facebook 、留言版、RSS 等外部功能，非常豐富，也只要透過一個 &lt;code&gt;Makefile&lt;/code&gt; 檔案就可以生成靜態網站，或是在自己的本機電腦產生預覽模式觀看。&lt;/p&gt;
&lt;p&gt;那麼以下來介紹安裝與使用步驟：&lt;/p&gt;
&lt;h2&gt;1.安裝 Pelican 套件&lt;/h2&gt;
&lt;p&gt;在安裝 Pelican 前請先確認自己的 Mac 環境具有 Python 2.6 以上或是 Python 3.3 以上，由於未來 Python 2.x 將會淘汰，建議直接使用 Python 3.x 版本。&lt;/p&gt;
&lt;h3&gt;(1.) 建立網誌目錄&lt;/h3&gt;
&lt;p&gt;首先準備要用來建立網誌的目錄，如下為 &lt;code&gt;kokokuo-note&lt;/code&gt;，另外為了避免不影響主要電腦的 Python 環境，當我們進入到目錄中會接下著建立 Pelican 用的虛擬環境再安裝 Pelican 套件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; mkdir kokokuo-note
&amp;gt; &lt;span class="nb"&gt;cd&lt;/span&gt; kokokuo-note
kokokuo-note/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;當進入目錄後，我們便可以安裝虛擬環境，並且裝載 Pelican ，以下的安裝步驟會分別紀錄採用 &lt;code&gt;virtualenv&lt;/code&gt; 與 &lt;code&gt;pipenv&lt;/code&gt; 兩種不同的虛擬環境工具。&lt;/p&gt;
&lt;h3&gt;(2.1) 建立虛擬環境 Virtualenv 安裝 Pelican&lt;/h3&gt;
&lt;p&gt;如果你採用 &lt;code&gt;virtualenv&lt;/code&gt; 作為虛擬環境，那麼首先我們要透過 &lt;code&gt;virtualenv&lt;/code&gt; 的指令建立虛擬環境的目錄，並進入虛擬環境中，才能 &lt;code&gt;pip&lt;/code&gt; 指令安裝 Pelican，若對 Python 的虛擬環境 virtualenv 有更多想要知道的部分可以參考此篇 &lt;a href="https://note.koko.guru/python-virtualenv-install-and-usage.html"&gt;Python - 隔離開發環境的利器，安裝虛擬環境工具 virtualenv&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kokokuo-note/&amp;gt; virtualenv venv &lt;span class="c1"&gt;# 採用 virtualenv 建立虛擬環境目錄&lt;/span&gt;
kokokuo-note/&amp;gt; &lt;span class="nb"&gt;source&lt;/span&gt; venv/bin/activate  &lt;span class="c1"&gt;# 進入虛擬環境&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;kokokuo-note/&amp;gt; pip install pelican &lt;span class="c1"&gt;# 當顯示 (venv) 後表示我們已經在許你環境中，安裝 Pelican &lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;kokokuo-note/&amp;gt; pip install markdown # 安裝 markdowan ，使 Pelican 的 markdown 語法作用，務必安裝
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;kokokuo-note/&amp;gt; pip install typogrify &lt;span class="c1"&gt;# 安裝 typogrify，使 Pelican 的網誌在生成 HTML 時可以有更多樣化的排版，務必安裝&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如下圖：&lt;/p&gt;
&lt;h3&gt;(2.2) 建立虛擬環境 Pipenv 安裝 Pelican&lt;/h3&gt;
&lt;p&gt;如果你採用 &lt;code&gt;pipenv&lt;/code&gt; 作為操作虛擬環境指令工具，則採用以下步驟：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kokokuo-note/&amp;gt; mkdir .venv &lt;span class="c1"&gt;# 建立等等 Pipenv 安裝虛擬環境時所存放的目錄&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="../images/20190113-how-to-start-pelican/pipenv-create-virtualenv.png" alt="pipenv-create-virtualenv" width="480px"/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kokokuo-note/&amp;gt; pipenv shell &lt;span class="c1"&gt;# 進入虛擬環境&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;)&lt;/span&gt;kokokuo-note/&amp;gt; pipenv install pelican &lt;span class="c1"&gt;# 當顯示 (kokokuo-note) 後表示我們已經在 kokokuo-note 這個專案目錄的虛擬環境中，安裝 Pelican &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="../images/20190113-how-to-start-pelican/pipenv-install-pelican.png" alt="pipenv-install-pelican" width="360px"/&gt;&lt;/p&gt;
&lt;p&gt;再來還需要安裝 markdown 與 typogrify：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;)&lt;/span&gt;kokokuo-note/&amp;gt; pipenv install markdown &lt;span class="c1"&gt;# 安裝 markdowan ，使 Pelican 的 markdown 語法作用，務必安裝，務必安裝&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;)&lt;/span&gt;kokokuo-note/&amp;gt; pipenv install typogrify  &lt;span class="c1"&gt;# 安裝 typogrify，使 Pelican 的網誌在生成 HTML 時可以有更多樣化的，務必安裝排版&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="../images/20190113-how-to-start-pelican/pipenv-install-markdown.png" alt="pipenv-install-markdown" width="360px"/&gt;&lt;/p&gt;
&lt;p&gt;若是想要更多了解 &lt;code&gt;pipenv&lt;/code&gt;，可以參考此篇 &lt;a href="https://note.koko.guru/python-pipenv-install-and-usage.html"&gt;Python - 使用 Pipenv 建立虛擬環境與安裝套件&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;(3.) 透過 Pelican 指定產生靜態網站檔案&lt;/h3&gt;
&lt;p&gt;當我們安裝好 Pelican 與所需要的套件後，再來便可以透過 Pelican 提供的指令 &lt;code&gt;pelican-quickstart&lt;/code&gt; 來產生後續我們要的靜態網站範本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;)&lt;/span&gt;kokokuo-note/&amp;gt; pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之後 Pelican 會如下圖，依序詢問幾個問題，來幫忙建立屬於你要的範本：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190113-how-to-start-pelican/pipenv-pelican-to-generate.png" alt="pipenv-pelican-to-generate" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;上圖中的幾個問題分別是解說如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; What will be the title of this web site?  &lt;span class="c1"&gt;# 輸入你的網站名稱，未來也可以再改&lt;/span&gt;
&amp;gt; Who will be the author of this web site? &lt;span class="c1"&gt;# 輸入網站的作者名稱，未來也可以再改&lt;/span&gt;
&amp;gt; What will be the default language of this web site? &lt;span class="o"&gt;[&lt;/span&gt;zh&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# 輸入你的預設語系 e.g 這邊預設是 zh，未來也可以再改&lt;/span&gt;
&amp;gt; Do you want to specify a URL prefix? e.g., https://example.com   &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; n  &lt;span class="c1"&gt;# 是否要指定網誌的網址 URL，若目前沒有可以輸入 n，未來也可以再改&lt;/span&gt;
&amp;gt; Do you want to &lt;span class="nb"&gt;enable&lt;/span&gt; article pagination? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; Y &lt;span class="c1"&gt;# 是否要設定分頁功能，未來也可以再改&lt;/span&gt;
&amp;gt; How many articles per page &lt;span class="k"&gt;do&lt;/span&gt; you want? &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;  &lt;span class="c1"&gt;# 分頁功能的預設頁數，未來也可以再改&lt;/span&gt;
&amp;gt; What is your &lt;span class="nb"&gt;time&lt;/span&gt; zone? &lt;span class="o"&gt;[&lt;/span&gt;Europe/Paris&lt;span class="o"&gt;]&lt;/span&gt; Asia/Taipei &lt;span class="c1"&gt;# 設定所在時區，例如這裡我設定 亞洲台北時區，未來也可以再改&lt;/span&gt;
&amp;gt; Do you want to generate a tasks.py/Makefile to automate generation and publishing? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; Y # 是否要有 Makefile 或 task.py 等腳本檔案，幫變你自動產生靜態 HTML 網站與協助部署，建議要
&amp;gt; Do you want to upload your website using FTP? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; N &lt;span class="c1"&gt;# 網站是否要透過 FTP 上傳呈現，因為之後要用 Github Page 所以這裡回答 N&lt;/span&gt;
&amp;gt; Do you want to upload your website using SSH? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; N &lt;span class="c1"&gt;# 網站是否要透過 SSH 上傳呈現，因為之後要用 Github Page 所以這裡回答 N&lt;/span&gt;
&amp;gt; Do you want to upload your website using Dropbox? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; N &lt;span class="c1"&gt;# 網站是否要透過 Dropbox 上傳呈現，因為之後要用 Github Page 所以這裡回答 N&lt;/span&gt;
&amp;gt; Do you want to upload your website using S3? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; N &lt;span class="c1"&gt;# 網站是否要透過 AWS 的 S3 儲存庫 上傳呈現，因為之後要用 Github Page 所以這裡回答 N&lt;/span&gt;
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; N &lt;span class="c1"&gt;# 網站是否要透過 Rackspace Cloud 上傳呈現，因為之後要用 Github Page 所以這裡回答 N&lt;/span&gt;
&amp;gt; Do you want to upload your website using GitHub Pages? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; y &lt;span class="c1"&gt;# 網站是否要透過 Github Pages 上傳呈現，因為這是本篇網誌的架設方式，所以選擇 y&lt;/span&gt;
&amp;gt; Is this your personal page &lt;span class="o"&gt;(&lt;/span&gt;username.github.io&lt;span class="o"&gt;)&lt;/span&gt;? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; y &lt;span class="c1"&gt;# 因為採用 Github Page 作為個人網誌，所以為y，如果你架設的目的是專案文件，則輸入 N&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上述關於時區的部分，可以參考 &lt;a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones"&gt;wikipedia 的 List of tz database time zones&lt;/a&gt;，裡面詳列的各國的時區碼供設定參考。&lt;/p&gt;
&lt;p&gt;完成後便會看到產生的檔案：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190113-how-to-start-pelican/pelican-default-files.png" alt="pelican-defult-files" width="360px"/&gt;&lt;/p&gt;
&lt;h3&gt;(4.) Pelican 目錄檔案功用介紹&lt;/h3&gt;
&lt;p&gt;在上圖中，會看到 &lt;code&gt;pelican-quickstart&lt;/code&gt; 執行並回答完問題後，會產生一些檔案與目錄，這些檔案與目錄便是之後這個網誌的架構，以下分別介紹每個目錄與檔案的作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;content&lt;/strong&gt; : 此目錄為 Pelican 預設提供給我們用來存放 markdown 邊寫完的網誌，因為是預設，也代表我們可以額外更改擺放位置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;output&lt;/strong&gt; : 因為靜態網站產生器的構造是透過 markdown 撰寫我們的網誌內容後，在透過一些功能，產生具有 HTML/CSS/JS 的網頁呈現，因此會需要有一個目錄擺放這些 HTML/CSS/JS 檔案，而在 Pelican 便是 &lt;code&gt;output&lt;/code&gt; 這個目錄。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;task.py 與 Makefile&lt;/strong&gt; : 則是剛剛在回答 &lt;code&gt;pelican-quickstart&lt;/code&gt; 的問題中詢問的問題，這兩個檔案很有用，Pelican 提供他們來協助我們寫完每篇網誌後，可以用來產生 HTML/CSS/JS 這些靜態檔案，除此之外還能在自己的本機電腦跑出類似預覽功能觀看與檢查的&lt;strong&gt;本機端伺服器&lt;/strong&gt;作測試，也能協助我們把完成並測試預覽後的網誌直接的以 FTP, SSH, 或是 Github Page 等方式放上去。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pelicanconf.py&lt;/strong&gt; : 這也是一個很重要的檔案，該檔案是 &lt;code&gt;.py&lt;/code&gt; 結尾，也就是 Python 的程式碼。剛剛在回答 &lt;code&gt;pelican-quickstart&lt;/code&gt; 中的問題如設定網站名稱、作者、語言、時區、分頁等等功能，包含未來其他的更換網誌樣板，或是設定網址要擺放的目錄，都會在此設定。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;publishconf.py&lt;/strong&gt; : 這個檔案會作用在我們要把網誌擺到伺服器上時，如剛剛問題中提問的  FTP, SSH, 或是 Github Page 等方式，因此只有在部署時會需要。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;(5.) 開始使用 Pelican 撰寫第一篇網誌&lt;/h3&gt;
&lt;p&gt;完成上半部分後，我們終於可以開始編寫網誌了，一個 Pelican 用 Markdown 寫的網誌，簡易結構會如下：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190113-how-to-start-pelican/first-markdown-example.png" alt="first-markdown-example" width="640px"/&gt;&lt;/p&gt;
&lt;p&gt;下半部的部分就是我們一般的 markdown 內容，也就是我們要寫的文章，而上半部的 Title, Date, Category, Tags, Slug, Authors, Summary 都是 Pelican 的 Metadata 關鍵字，這些關鍵字可以有也可以不提供，每一個關鍵字都會有其特殊的用途，以下常用的有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Title&lt;/strong&gt; : 文章的表題&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Date&lt;/strong&gt; : 文章的發表日期&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Modified&lt;/strong&gt; : 文章的修改日期&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Category&lt;/strong&gt; : 此篇文章所屬的分類目錄名稱&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tags&lt;/strong&gt; : 此篇文章的標籤&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Slugs&lt;/strong&gt; : 文章的連結路徑名稱&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Summary&lt;/strong&gt; : 使用 RSS 或是網站目錄時呈現的簡介&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他更多的設定可以參考 &lt;a href="https://docs.getpelican.com/en/stable/content.html"&gt;Pelican Document - Write Content&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;(6.) 產生 HTML 的靜態網頁&lt;/h3&gt;
&lt;p&gt;當寫好我們的第一個範例後，我們便可以開始來預覽我們寫的文章了，這個步驟很容易，只要在我們所建立的專案目錄下，如我是 &lt;code&gt;kokokuo-note&lt;/code&gt; 輸入以下指令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;)&lt;/span&gt;kokokuo-note/&amp;gt; make html &lt;span class="c1"&gt;# 產生 HTML 檔案&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;透過上述的指令 &lt;code&gt;make html&lt;/code&gt;  會幫助我們把剛剛所寫完的 markdown 文章，轉換並生出成 HTML 網頁，如下圖：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190113-how-to-start-pelican/pelican-make-html.png" alt="pelican-make-html" width="640px"/&gt;&lt;/p&gt;
&lt;p&gt;而產生後，我們可以進一步到 &lt;strong&gt;output&lt;/strong&gt; 目錄下，會看到生出了許多的子目錄與檔案，包含 HTML/CSS 與 圖像檔案。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190113-how-to-start-pelican/pelican-output-html.png" alt="pelican-output-html" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;output&lt;/code&gt; 目錄中，會看到一個檔案是 &lt;code&gt;mac-using-pelican-build-static-website.html&lt;/code&gt; ，這個檔案便是我們剛剛在寫 &lt;code&gt;hello-pelican&lt;/code&gt; 第一篇網誌時，所設定的 &lt;code&gt;Slug&lt;/code&gt; 網址名稱，而 Pelican 會幫我們以此為檔名產生出來。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190113-how-to-start-pelican/pelican-html-sample.png" alt="pelican-html-sample" width="640px"/&gt;&lt;/p&gt;
&lt;p&gt;而這個 &lt;code&gt;make html&lt;/code&gt; 實際上便是最早在回答 &lt;code&gt;pelican-quickstart&lt;/code&gt; 問題時其中提到的 &lt;em&gt;Do you want to generate a tasks.py/Makefile to automate generation and publishing? (Y/n)&lt;/em&gt;，由於回答了 Yes，所以 &lt;code&gt;Pelican&lt;/code&gt; 協助我們提供了 &lt;code&gt;task.py&lt;/code&gt; 與 &lt;code&gt;Makefile&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;而上述的這兩個檔案是相輔相成的，核心功能寫在 &lt;code&gt;task.py&lt;/code&gt;，並再透過 &lt;code&gt;Makefile&lt;/code&gt; 來產生 &lt;code&gt;make html&lt;/code&gt; 的功能。&lt;/p&gt;
&lt;p&gt;另外除了 &lt;code&gt;make html&lt;/code&gt; 以外，這個 &lt;code&gt;task.py&lt;/code&gt; 與 &lt;code&gt;Makefile&lt;/code&gt; 還提供了很多其他的能力，我們可以在目錄下輸入 &lt;code&gt;make&lt;/code&gt; 即可看到：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;kokokuo-note&lt;span class="o"&gt;)&lt;/span&gt;kokokuo-note/&amp;gt; make  &lt;span class="c1"&gt;# 顯示 Help 功能，所有的指令與用途。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="../images/20190113-how-to-start-pelican/pelican-make-commands.png" alt="pelican-make-commands" width="640px"/&gt;&lt;/p&gt;
&lt;p&gt;以下介紹最常用的有幾個：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;make html&lt;/strong&gt; : 把 &lt;strong&gt;content&lt;/strong&gt; 下所有的 Markdown 檔案轉為 HTML 網頁。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;make publish&lt;/strong&gt; : 如同 &lt;code&gt;make html&lt;/code&gt; 指令一樣是把 &lt;strong&gt;content&lt;/strong&gt; 下所有的 Markdown 檔案轉為 HTML 網頁，但唯一的差異在於透過此指令，會使用 &lt;code&gt;publishconf.py&lt;/code&gt; 的設定檔案，這個好處是幫助我們可以把撰寫測試中的設定與正式發佈網站的設定隔離。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;make clean&lt;/strong&gt; : 清除掉 &lt;strong&gt;output&lt;/strong&gt; 目錄下的所有內容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;make regenerate&lt;/strong&gt; : 若是使用 &lt;code&gt;make html&lt;/code&gt; ，則每次更改 Markdown 文章內容或寫新的文章時，都要再次執行 &lt;code&gt;make html&lt;/code&gt; 才能產生看到的 HTML 內容並被看到，有時還需要搭配 &lt;code&gt;make clean&lt;/code&gt; 才會乾淨會頗麻煩，因此透過 &lt;code&gt;make regenerate&lt;/code&gt; 可以讓 Pelican 自動偵測檔案的改變並產生出 HTML 內容，如此便可以節省手動建置 HTML 的時間。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;make serve PORT=[port]&lt;/strong&gt; : 建立本機端的伺服器(Local Server)，方便可以在網頁上透過 https://localhost:[port] 來預覽與測試文章有無格式或排版問題，如果不指定 &lt;code&gt;PORT&lt;/code&gt; 的話預設會是 &lt;code&gt;8000&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;make devserver&lt;/strong&gt; : 啟動開發用的本機伺服器，&lt;code&gt;與 make serve&lt;/code&gt; 的差別在於，每次修改 Markdown 或是新增刪除文章時，Pelican 都會自己偵測並更新重跑伺服器，相當於合併 &lt;code&gt;make regenerate&lt;/code&gt; 與 &lt;code&gt;make serve&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;(7.) 預覽編寫完的 Markdown 網誌&lt;/h3&gt;
&lt;p&gt;當完成 &lt;code&gt;make html&lt;/code&gt; 產生網頁後，再來只要輸入 &lt;code&gt;make serve&lt;/code&gt; 便可以預覽寫完的網頁：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190113-how-to-start-pelican/pelican-make-serve.png" alt="pelican-make-serve" width="640px"/&gt;&lt;/p&gt;
&lt;p&gt;透過瀏覽器輸入 https://localhost:8000 便可以看到呈現的網頁：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190113-how-to-start-pelican/show-pelican-localhost-site.png" alt="show-pelican-localhost-site" width="640px"/&gt;&lt;/p&gt;
&lt;p&gt;至此變完成的安裝 Pelican &amp;gt; 撰寫 Markdown 文章 &amp;gt; 產生 HTML 與預覽 的過程。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;後記&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;雖然上述介紹了如何使用 Pelican 來編寫 Markdown 與產生的 HTML 網頁。&lt;/p&gt;
&lt;p&gt;但是這一切都是在自己的電腦本機端，我們仍然需要真的伺服器空間，來把我們的網誌與文章放上去才行。&lt;/p&gt;
&lt;p&gt;因此接下來我們會介紹一開始在執行 &lt;code&gt;pelican-quickstart&lt;/code&gt; 時，選擇使用 &lt;strong&gt;Github Page&lt;/strong&gt; 的後續部署網誌步驟，請參考 &lt;a href="https://note.koko.guru/deploy-pelican-static-webiste-to-github-page.html"&gt;使用 Github Page 作為靜態網誌的空間 - 以 Pelican 為例&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;參考文章&lt;/h1&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://chenjiee815.github.io/pelicanru-men-zhi-nan.html"&gt;Pelican 入门指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.xycoding.com/articles/2013/11/21/blog-create/"&gt;使用 Pelican 和 GitHub Pages 搭建个人博客 —— 基础篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.getpelican.com/en/stable/content.html"&gt;Pelican Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Python"></category><category term="Pelican"></category></entry><entry><title>Python - 使用 py2exe 製作 Python exe 執行檔</title><link href="https://note.koko.guru/build-python-exe-using-py2exe%20Authors:%20kokokuo.html" rel="alternate"></link><published>2015-01-03T00:00:00+08:00</published><updated>2015-01-03T00:00:00+08:00</updated><author><name>kokokuo</name></author><id>tag:note.koko.guru,2015-01-03:/build-python-exe-using-py2exe Authors: kokokuo.html</id><summary type="html">&lt;p&gt;用 Python 做開發程式，最後都會需要釋出來使用，但是一個可以給人使用的程式對使用者來說，特別是在 Windows 上，是需要可執行檔的。因此會需要把 Python 的 Script 檔案製作成 exe 執行檔。 並且最好的是，到了使用者的環境上不需要安裝任何 Python 的環境，也就是所有使用的套件包含 Python 環境都打包好了，而 Python 是一個有強大社群與 API 工具的語言，此文章這邊我先選擇 py2exe 做使用與測試。&lt;/p&gt;</summary><content type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;用 Python 做開發程式，最後都會需要釋出來使用，但是一個可以給人使用的程式對使用者來說，特別是在 Windows 上，是需要可執行檔的。因此會需要把 Python 的 Script 檔案製作成 exe 執行檔。
並且最好的是，到了使用者的環境上不需要安裝任何 Python 的環境，也就是所有使用的套件包含 Python 環境都打包好了，而 Python 是一個有強大社群與 API 工具的語言，而這邊我先選擇 py2exe 做使用與測試。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;Python 的製作安裝執行檔工具介紹&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;在 PyPI 上有介紹幾款知名的製作執行檔的工具，這邊並且有支援開發 PyQt，有興趣的話可以去了解看看 – &lt;a href="https://wiki.python.org/moin/PyQt/Deploying_PyQt_Applications"&gt;Deploying PyQt Applications&lt;/a&gt;，但是在這邊先以介紹 py2exe 為主。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;事前環境準備&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;我所使用的環境如下：
1. Windows 8.1 x64
2. Python 2.7.9 32bit
3. py2exe-0.6.9.win32-py2.7&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;安裝步驟&lt;/h1&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;下載並選擇與 Python 對應的位元檔(32bit 或 64bit)，並且安裝好 py2exe。&lt;/li&gt;
&lt;li&gt;把開發的 Python 專案所在目錄打開，新建一個 setup.py 檔案在此目錄下(也就是與你編寫所要打包成 exe 的 Python .py 檔案還有你寫的 module、package 等等)，例如寫了一個 Script 是 Hello.py，並且放置在 HelloPy 目錄下，則 setup.py 也是在 HelloPy 下。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;製作 Console 程式的執行檔&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;py2exe 可以製作 GUI 與 Console 的 exe 執行檔，以下分別介紹：&lt;/p&gt;
&lt;h2&gt;撰寫 setup.py 設定檔案&lt;/h2&gt;
&lt;h3&gt;1. 先 import 使用 p2exe 製作 setup 的所需要的 Package&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;distutils.core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;py2exe&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2. 加入要產生 exe 的 py 檔&lt;/h3&gt;
&lt;p&gt;接著對 &lt;code&gt;Hello.py&lt;/code&gt; 寫了一個簡單的 Hello World 程式如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello,welcome to Python world!,who are you?&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;My name is:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Nice to meet you!! &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之後在 &lt;code&gt;setup.py&lt;/code&gt; 中要對告訴 py2exe 要變為執行檔的是 &lt;code&gt;Hello.py&lt;/code&gt;，並且再補上 &lt;code&gt;setup&lt;/code&gt; 參數，變成：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;distutils.core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;py2exe&lt;/span&gt;
&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;console&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3. 執行 py2exe&lt;/h3&gt;
&lt;p&gt;進到 &lt;code&gt;setup.py&lt;/code&gt; 所在的目錄下，然後在 CMD 執行：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20150103-build-python-exe-using-py2exe/1-bundle-exe-process-in-console.png" alt="1-bundle-exe-process-in-console"/&gt;&lt;/p&gt;
&lt;p&gt;完成後會有兩個資料夾分別叫做 &lt;code&gt;build&lt;/code&gt; 與 &lt;code&gt;dist&lt;/code&gt;
其中 &lt;code&gt;build&lt;/code&gt; 資料夾為一些編譯過程的中間檔，而完成的結果則是在 &lt;code&gt;dist&lt;/code&gt; 資料夾中，換句話說我們只需要 &lt;code&gt;dist&lt;/code&gt; 目錄下的檔案。
接著打開後會如下圖，會夾帶了許多的檔案，接著我們便可以整個目錄帶走使用，這邊要切記，如果沒有這些目錄下的所有檔案，&lt;code&gt;.exe&lt;/code&gt; 是無法作用的哦，如果想要解決這個問題可以接著往下看。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20150103-build-python-exe-using-py2exe/2-bundled-files-result.png" alt="2-bundled-files-result"/&gt;&lt;/p&gt;
&lt;p&gt;以下是執行 &lt;code&gt;Hello.exe&lt;/code&gt; 的結果：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20150103-build-python-exe-using-py2exe/3-run-exe-file-show-result.png" alt="3-run-exe-file-show-result"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;py2exe 製作 setup 的其他設定參數&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;在 py2exe 中有提供一個 Option，而 Option 中許多其他的參數用來協助你編寫 &lt;code&gt;setup.py&lt;/code&gt;，可以參考此 &lt;a href="http://www.py2exe.org/index.cgi/ListOfOptions"&gt;py2exe ListOfOptions&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;打包成單一執行檔&lt;/h2&gt;
&lt;p&gt;如上的 Console 製作 exe 檔案，你會發現 &lt;code&gt;dist&lt;/code&gt; 中還有許多其他的檔案存在，如果希望那些 &lt;code&gt;.pyd&lt;/code&gt; 或 &lt;code&gt;.dll&lt;/code&gt; 檔都打包進去，可以一個檔案著走，我們可以使用 Option 中的 &lt;code&gt;bundle_files&lt;/code&gt; 參數，解說如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;bundle dlls in the zipfile or the exe. Valid values for &lt;code&gt;bundle_files&lt;/code&gt; are: 3 = don’t bundle (default) 2 = bundle everything but the Python interpreter 1 = bundle everything, including the Python interpreter&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以我們修改一下 &lt;code&gt;setup.py&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;distutils.core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;py2exe&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;py2exe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;bundle_files&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}},&lt;/span&gt;
    &lt;span class="n"&gt;console&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再次執行打包後(記得先刪掉原先的打包後 &lt;code&gt;build&lt;/code&gt;與 &lt;code&gt;dist&lt;/code&gt; 資料夾)&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20150103-build-python-exe-using-py2exe/4-bundle-to-zipfile.png" alt="4-bundle-to-zipfile"/&gt;&lt;/p&gt;
&lt;p&gt;這次就少了很多檔案，可是怎麼還是有 &lt;code&gt;library.zip&lt;/code&gt; 呢？
這是因為剛剛那些檔案都被打包到這個 &lt;code&gt;library.zip&lt;/code&gt; 檔案中了，那麼是否有辦法把 &lt;code&gt;library.zip&lt;/code&gt; 也拿掉呢? 可以。&lt;/p&gt;
&lt;p&gt;我們使用另一個參數叫做 &lt;code&gt;zipfile&lt;/code&gt;，此參數如果設為 &lt;code&gt;None&lt;/code&gt; 就可以打包到 exe 了!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;name of shared zipfile to generate; may specify a subdirectory; defaults to &lt;code&gt;library.zip&lt;/code&gt;. If zipfile is set to None, the files will be bundled within the executable instead of &lt;code&gt;library.zip&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以我們再加上此行到 &lt;code&gt;setup.py&lt;/code&gt; 中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;distutils.core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;py2exe&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;py2exe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;bundle_files&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}},&lt;/span&gt;
    &lt;span class="n"&gt;console&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;
    &lt;span class="n"&gt;zipfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;結果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20150103-build-python-exe-using-py2exe/5-bundle-none-zipfile.png" alt="5-bundle-none-zipfile"/&gt;&lt;/p&gt;
&lt;p&gt;等等!? 可是你會發現還有一個執行檔叫做 &lt;code&gt;w9xpopen.exe&lt;/code&gt;，這又是什麼?
他其實是用來針對在 &lt;code&gt;Windows95&lt;/code&gt;或 &lt;code&gt;Windows98&lt;/code&gt; 下的可以使用 &lt;code&gt;os.popen&lt;/code&gt; 所用的執行檔，透過&lt;code&gt;os.popen&lt;/code&gt; 來調用外部程序，因此如果不需要在 95/98 下執行，便不需要這個檔案，所以最後這個 &lt;code&gt;Hello.exe&lt;/code&gt; 就是我們可以攜帶用的執行檔囉！&lt;/p&gt;
&lt;h3&gt;注意&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;如果安裝的 py2exe 是 64 位元，目前則無法使用 bundle_files，只能保持預設 bundle_files = 3 的模式。&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;為你的 exe 檔案加上 Icon&lt;/h2&gt;
&lt;p&gt;為了美觀你的 exe 檔案在 Windows 上顯示時有小圖示，所以也有提供這個參數 &lt;code&gt;icon_resources&lt;/code&gt;，使用方式如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把你的 icon 放置在同樣專案的目錄下(如這裡是與 &lt;code&gt;setup.py&lt;/code&gt;, &lt;code&gt;Hello.py&lt;/code&gt; 一樣)&lt;/li&gt;
&lt;li&gt;加入 &lt;code&gt;icon_resources&lt;/code&gt; 參數在 &lt;code&gt;console&lt;/code&gt; 陣列設定中&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;distutils.core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;py2exe&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;py2exe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;bundle_files&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;compressed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}},&lt;/span&gt;
    &lt;span class="n"&gt;console&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;icon_resources&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;your_icon.ico&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]}],&lt;/span&gt;
    &lt;span class="n"&gt;zipfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;結果如下圖 (圖片來源自 iconfinder)：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20150103-build-python-exe-using-py2exe/6-add-icon-by-py2exe.png" alt="6-add-icon-by-py2exe"/&gt;&lt;/p&gt;
&lt;h2&gt;error: MSVCP90.dll: No such file or directory&lt;/h2&gt;
&lt;p&gt;如果出現此問題，代表你的電腦沒有此 DLL 檔案，可以下載 &lt;code&gt;MSVCP90.dll&lt;/code&gt; 並加入至 Python 目錄下的 DLLs 資料夾下即可(如我的是 &lt;code&gt;C:\Python27\DLLs&lt;/code&gt;)
或是下載 &lt;a href="https://www.microsoft.com/en-us/download/details.aspx?displaylang=en&amp;amp;id=29"&gt;Microsoft Visual C++ 2008 Redistributable Package (x86)&lt;/a&gt; 並安裝後，複製此 &lt;code&gt;MSVCP90.dll&lt;/code&gt; 加入至 Python 目錄下的 DLLs。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;參考資料&lt;/h1&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.108kb.com/index.php/archives/64"&gt;w9xpopen.exe 是干什么的&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.py2exe.org/index.cgi/ListOfOptions"&gt;List of Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Python/M.1278481498.A.403.html"&gt;PPT python2exe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mf99coding.logdown.com/posts/206237-package-your-python-script-into-exe-executable"&gt;將 Python script 打包成 exe 執行檔&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/112698/py2exe-generate-single-executable-file#113014"&gt;py2exe - generate single executable file&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Python"></category><category term="py2exe"></category></entry><entry><title>Vundle 安裝與安裝 Plugin 時的注意事項</title><link href="https://note.koko.guru/install-vundle-and-notice.html" rel="alternate"></link><published>2015-01-02T00:00:00+08:00</published><updated>2015-01-02T00:00:00+08:00</updated><author><name>kokokuo</name></author><id>tag:note.koko.guru,2015-01-02:/install-vundle-and-notice.html</id><summary type="html">&lt;p&gt;剛開始學習使用 Vim，因為習慣了 GUI 的 IDE 特別是剛從號稱 Windows 的地表最強 IDE - Visual Studio 跳過來，整個好不容易，所以這裡記錄了一些剛使用 Vundle 時下載 Plugin 的小須知&lt;/p&gt;</summary><content type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;剛開始學習使用 Vim，因為習慣了 GUI 的 IDE 特別是剛從號稱 Windows 的地表最強 IDE - Visual Studio 跳過來，整個非常不容易，所以這裡記錄了一些剛使用 Vundle 時下載 Plugin 的小須知&lt;/p&gt;
&lt;h1&gt;安裝 Vundle&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;要安裝 Vundle 的方式便是透過 Git 下載來安裝：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下載好後，在 Home 目錄下修改 &lt;code&gt;.vimrc&lt;/code&gt; (如果沒有就新建出來此檔案)，可以先參考&lt;a href="https://github.com/gmarik/vundle"&gt;Github 上 Vundle 的介紹&lt;/a&gt;，使用它的 Configuration 範例完成安裝。&lt;/p&gt;
&lt;h1&gt;&lt;a href="http://vim-scripts.org/vim/scripts.html"&gt;vim-script&lt;/a&gt; 下載時要注意名稱含有 .vim&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;在 &lt;code&gt;vim-script&lt;/code&gt; 上的有些 Repository 名稱會包含 &lt;code&gt;.vim&lt;/code&gt;，如 &lt;code&gt;taglist.vim&lt;/code&gt; 等
所以在編輯 .vimrc 時,要記得補上 &lt;code&gt;.vim&lt;/code&gt;，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Plugin &lt;span class="s1"&gt;&amp;#39;taglist.vim&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;使用 Vundle 提供的 &lt;code&gt;vimrc&lt;/code&gt; 範例小注意&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;在 Github 中提供的 &lt;code&gt;.vimrc&lt;/code&gt; 範例有兩行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; Git plugin not hosted on GitHub&lt;/span&gt;
&lt;span class="s2"&gt;Plugin &amp;#39;git://git.wincent.com/command-t.git&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; git repos on your &lt;span class="nb"&gt;local&lt;/span&gt; machine &lt;span class="o"&gt;(&lt;/span&gt;i.e. when working on your own plugin&lt;span class="o"&gt;)&lt;/span&gt;
Plugin &lt;span class="s1"&gt;&amp;#39;file:///home/gmarik/path/to/plugin&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第二行則表示如果你是自己下載 Plugin Repository 到自己主機上，才需要去指定 local 端自己電腦的下載下來放置的 Repository 位置
所以預設如果有裝 Git，沒有下載下來 Plugin，此行是不需要的。&lt;/p&gt;
&lt;p&gt;而第一行的 &lt;code&gt;git.wincent.com/command-t.git&lt;/code&gt; 是一種套件，名叫 &lt;strong&gt;CommandT&lt;/strong&gt;，詳細資訊可以參考&lt;a href="github.com/wincent/Command-T"&gt;官方&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Plugin &amp;amp; Bundle 指令&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;目前 Vundle 已經把指令都改成 Plugin 開頭，但仍支援 Bundle 指令，以下用 &lt;code&gt;taglist.vim&lt;/code&gt; 作為例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Plugin &lt;span class="s1"&gt;&amp;#39;taglist.vim&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上述是新的 Plugin 語法，但是若要使用 Bundle 語法也沒問題，只是不建議，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Bundle &lt;span class="s1"&gt;&amp;#39;taglist.vim&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;參考資料&lt;/h1&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.gtwang.org/2014/04/vundle-vim-bundle-plugin-manager.html"&gt;Vundle：Vim Plugin 自動下載、安裝、更新與管理工具（Vim Bundle）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/20394142/error-in-installing-bundle-for-vim"&gt;Error in installing Bundle for Vim&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Vim"></category></entry></feed>