<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>koko's Note - Python</title><link href="https://note.koko.guru/" rel="alternate"></link><link href="https://note.koko.guru/feeds/python.atom.xml" rel="self"></link><id>https://note.koko.guru/</id><updated>2019-03-12T00:00:00+08:00</updated><subtitle>
Code / Web / Architecture
&lt;br/&gt;
&lt;br/&gt;
你需要非常多的努力
&lt;br/&gt;
才能看起來毫不費力
</subtitle><entry><title>安裝 Python 2 在 Mac 上 (Python2.7.15 為例）</title><link href="https://note.koko.guru/posts/python-install-python2-on-mac" rel="alternate"></link><published>2019-03-12T00:00:00+08:00</published><updated>2019-03-12T00:00:00+08:00</updated><author><name>kokokuo</name></author><id>tag:note.koko.guru,2019-03-12:/posts/python-install-python2-on-mac</id><summary type="html">&lt;p&gt;對於使用 Mac 的開發者而言，雖然 Python 都會有內建在系統中，但是可能因為 Mac 出產時間，所以版本會過舊，如果想要自己安裝 Python 的話，可以參考此篇文章，如何在 Mac 上安裝 Python 2 到系統中，並且可以被讀取到安裝的 Python 版本，而不是系統原本內建的。&lt;/p&gt;</summary><content type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;對於使用 Mac 的開發者而言，雖然 Python 都會有內建在系統中，但是可能因為 Mac 出產時間，所以版本會過舊，如果想要自己安裝 Python 的話，可以參考此篇文章，如何在 Mac 上安裝 Python 2 到系統中，並且可以被讀取到安裝的 Python 版本，而不是系統原本內建的。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;安裝步驟&lt;/h1&gt;
&lt;hr&gt;
&lt;h2&gt;步驟一：安裝 XCode 或 Xcode 命名行工具&lt;/h2&gt;
&lt;p&gt;這是開發 Mac 或 iPhone 等 iOS 程式所用的開發工具，安裝此工具的原因是因為，在安裝 XCode 時， 也會依同安裝 C 編譯器，而 Python 的底層是以 C 編寫成，所以會需要 C 的 Compiler 來驅動。&lt;/p&gt;
&lt;p&gt;開啟 Terminal App ，並且輸入以下指令安裝 Xcode 的命名行工具：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&amp;gt; xcode-select --install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src="../images/20190312-python-install-python2-on-mac/1-Install-XCode-Tool.png" alt="1-Install-XCode-Tool" /&gt;&lt;/p&gt;
&lt;p&gt;除了上述的方式，也可以透過 Mac 上的 App Store 安裝完全版的 XCode 開發工具。&lt;/p&gt;
&lt;h2&gt;步驟二：安裝 Homebrew&lt;/h2&gt;
&lt;p&gt;Homebrew 是 Mac 專用的套件管理工具，如同 Linux 中的 &lt;code&gt;apt&lt;/code&gt; 或是 &lt;code&gt;yum&lt;/code&gt; 工具，後續透過 Homebrew 來安裝 Python ，進入 Homebrew 官網，依照步驟，在 Terminal 輸入下列此串：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&amp;gt; /usr/bin/ruby -e &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src="../images/20190312-python-install-python2-on-mac/2-Install-Homebrew.png" alt="2-Install-Homebrew" /&gt;&lt;/p&gt;
&lt;h2&gt;步驟三：設定讀取 Homebrew 指令的環境變數&lt;/h2&gt;
&lt;p&gt;安裝完後，為了要使 Homebrew 的指令可以被 Mac 的 Terminal 中的 Bash 程式讀取到，需要設定 &lt;code&gt;/usr/local/bin&lt;/code&gt; 與 &lt;code&gt;/usr/local/sbin&lt;/code&gt; 至環境變數。&lt;/p&gt;
&lt;p&gt;建立一個 &lt;code&gt;.bash_profile&lt;/code&gt; 或是 &lt;code&gt;.profile&lt;/code&gt; （如果已有其中一個檔案則不需再次建立）並且在檔案中新增此行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/bin:/usr/local/sbin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;或是可以透過 Shell 的另一種語法雙引號來設定&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;PATH=/usr/local/bin:/usr/local/sbin:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;設定完成後，關閉 Terminal 應用程式重開 或是直接在 Terminal 中輸入以下指令啟動 &lt;code&gt;.bash_profile&lt;/code&gt; 或 &lt;code&gt;.profile&lt;/code&gt; 啟動即可（以下以 &lt;code&gt;.bash_pofile&lt;/code&gt; 為例 ）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&amp;gt; &lt;span class="nb"&gt;source&lt;/span&gt; ~/.bash_pofile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;接著便可以透過輸入 &lt;code&gt;brew&lt;/code&gt; 來做所有跟 Homebrew 有關的套件管理操作行為了！ &lt;/p&gt;
&lt;p&gt;例如要對 Homrbew 診斷可以輸入以下指令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&amp;gt; brew doctor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;更詳細的 Hombrew 安裝可以參考 &lt;a href="https://note.koko.guru/posts/mac-install-homebrew"&gt;Homebrew (1) - Mac 上安裝 Homebrew 套件管理工具&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;步驟四：透過 Homebrew 安裝 Python&lt;/h2&gt;
&lt;p&gt;安裝 Python 其實除了透過 Homebrew 的方式外，也可以透過 Python 官方網站，下載 &lt;code&gt;.pkg&lt;/code&gt; 的安裝包，但是因為安裝完後檔案的路徑會分別在：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;位置一：&lt;/strong&gt; &lt;code&gt;/Library/Frameworks/Python.framework&lt;/code&gt;
&lt;strong&gt;位置二：&lt;/strong&gt; &lt;code&gt;/usr/local/bin/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;這兩個位置，位置二是一個 symlink。另外，安裝包也會附帶 IDLE、PythonLauncher 這兩個軟體，安裝在 Application 資料夾。&lt;/p&gt;
&lt;p&gt;因此需要除了自己紀錄位置外，刪除時，也要自己去找尋上述兩個位置與 IDLE、PythonLauncher 分別刪除，所以不推薦。&lt;/p&gt;
&lt;p&gt;而透過 Homebrew 安裝除了， Homebrew 會列出 Python 的安裝位置外，也會把其他未來安裝的套件放在同一處，移除與升級都可以透過指令達成，因此非常便利，所以推薦在 Mac 上使用 Homebrew 安裝。&lt;/p&gt;
&lt;p&gt;在 Homebrew 中， 目前 Python 2 會以 &lt;code&gt;python@2&lt;/code&gt; 的套件名稱呈現，如下執行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&amp;gt; brew install python@2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Homebrew 會一同連 &lt;code&gt;pip&lt;/code&gt; 也安裝進去，如下安裝完的結果與訊息：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python-install-python2-on-mac/3-install-python2-by-homebrew.png" alt="3-install-python2-by-homebrew" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;安裝完後 Homebrew 會自動為放在 &lt;code&gt;Cellar&lt;/code&gt; 的 &lt;code&gt;Python@2&lt;/code&gt; 在 Mac 的 &lt;code&gt;/usr/local/opt&lt;/code&gt; 與 &lt;code&gt;/usr/local/bin&lt;/code&gt; 分別建置 link 檔案，如下為 &lt;code&gt;/usr/local/opt&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python-install-python2-on-mac/4-installed-python2-location-1.png" alt="4-installed-python2-location-1" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/usr/local/bin&lt;/code&gt; 也有：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python-install-python2-on-mac/4-installed-python2-location-2.png" alt="4-installed-python2-location-2" /&gt;&lt;/p&gt;
&lt;p&gt;因此，雖然在另一篇在 &lt;a href="http://pythonguidecn.readthedocs.io/zh/latest/starting/install/osx.html"&gt;Mac OS X 上安装 Python 2&lt;/a&gt; 有提及需要設定以下 &lt;code&gt;/usr/local/opt/python@2&lt;/code&gt; 在環境變數：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/local/opt/python@2/libexec/bin:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;但因為 Homebrew 也會在 &lt;code&gt;/usr/local/bin&lt;/code&gt; 中建立 Python2 的 Link 環境，因此其實不需要再去設定 &lt;code&gt;/usr/local/opt/python@2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;除非今天環境中也有安裝 Python 3 ，並且希望可以透過 &lt;code&gt;.bash_profile&lt;/code&gt; 明確區分 Mac 優先以 python 讀取的指令是來自 Python 3 或 Python 2 時，可以放進去，參考 &lt;a href="https://note.koko.guru/posts/python2-python3-run-on-mac"&gt;Python2 與 Python 3 共存的設定 (以 Mac 為例)&lt;/a&gt; 中文章&lt;/p&gt;
&lt;p&gt;而當安裝完後， 重新開啟 Terminal 直接輸入 Python 時，會讀取到 Homebrew 安裝的 Python 嗎？ &lt;/p&gt;
&lt;p&gt;答案是根據在 &lt;code&gt;~/.bash_profile&lt;/code&gt; 中 PATH 設定的順序。&lt;/p&gt;
&lt;p&gt;因為再設定環境變數時，系統內建的環境變數 &lt;code&gt;$PATH&lt;/code&gt; 是放在後頭， /&lt;code&gt;usr/local/bin&lt;/code&gt; 是在前面，因此輸入 Python 指令時 Bash 讀取 &lt;code&gt;~/.bash_profile&lt;/code&gt; 會先讀到 &lt;code&gt;/usr/local/bin&lt;/code&gt; 底下 &lt;code&gt;python@2&lt;/code&gt; 的 &lt;code&gt;python&lt;/code&gt; 指令 Link 檔，因而找到 Homebrew 安裝的 Python 2。&lt;/p&gt;
&lt;p&gt;因此我們透過透過 &lt;code&gt;python -h&lt;/code&gt; 查看後會發現目前的確讀到 Homebrew 安裝的 Python：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python-install-python2-on-mac/5-python2-help-command.png" alt="5-python2-help-command"/&gt;&lt;/p&gt;
&lt;p&gt;至此已經完成 Python2 的安裝。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;參考文章&lt;/h1&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://medium.com/denix-daily/macos%E4%B8%8A%E7%9A%84python%E8%B7%AF%E5%BE%91%E5%95%8F%E9%A1%8C-%E5%AE%89%E8%A3%9D%E6%96%B9%E6%B3%95-a10c01cc42a"&gt;MacOS 上的 Python 路徑問題＆安裝方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonguidecn.readthedocs.io/zh/latest/starting/install/osx.html"&gt;在 Mac OS X 上安装 Python 2&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Python"></category><category term="Python"></category><category term="Mac"></category><category term="Python2"></category></entry><entry><title>Python - 安裝 Python3 在 Mac 上 (Python 3.6.5 為例）</title><link href="https://note.koko.guru/posts/python-install-python3-on-mac" rel="alternate"></link><published>2019-03-12T00:00:00+08:00</published><updated>2019-03-12T00:00:00+08:00</updated><author><name>kokokuo</name></author><id>tag:note.koko.guru,2019-03-12:/posts/python-install-python3-on-mac</id><summary type="html">&lt;p&gt;由於 Python 2.7 的核心開發團隊公布 2020 年確定會捨棄 2.7 版本，因此會有越來越多人開始轉移到 Python 3 版本，所以下面我們來介紹安裝 Python 3 在 Mac 的話如何處理。&lt;/p&gt;</summary><content type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;由於 Python 2.7 的核心開發團隊公布 2020 年確定會捨棄 2.7 版本，因此會有越來越多人開始轉移到 Python 3 版本，所以下面我們來介紹安裝 Python 3 在 Mac 的話如何處理。&lt;/p&gt;
&lt;h1&gt;安裝步驟&lt;/h1&gt;
&lt;hr&gt;
&lt;h2&gt;步驟一：安裝 XCode 或 Xcode 命名行工具&lt;/h2&gt;
&lt;p&gt;這是開發 Mac 或 iPhone 等 iOS 程式所用的開發工具，安裝此工具的原因是因為，在安裝 XCode 時， 也會依同安裝 C 編譯器，而 Python 的底層是以 C 編寫成，所以會需要 C 的 Compiler 來驅動。&lt;/p&gt;
&lt;p&gt;開啟 Terminal App ，並且輸入以下指令安裝 Xcode 的命名行工具：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&amp;gt; xcode-select --install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src="../images/20190312-python-install-python3-on-mac/1-Install-XCode-Tool.png" alt="1-Install-XCode-Tool" /&gt;&lt;/p&gt;
&lt;p&gt;除了上述的方式，也可以透過 Mac 上的 App Store 安裝完全版的 XCode 開發工具。&lt;/p&gt;
&lt;h2&gt;步驟二：安裝 Homebrew&lt;/h2&gt;
&lt;p&gt;Homebrew 是 Mac 專用的套件管理工具，如同 Linux 中的 &lt;code&gt;apt&lt;/code&gt; 或是 &lt;code&gt;yum&lt;/code&gt; 工具，後續透過 Homebrew 來安裝 Python ，進入 Homebrew 官網，依照步驟，在 Terminal 輸入下列此串：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&amp;gt; /usr/bin/ruby -e &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src="../images/20190312-python-install-python3-on-mac/2-Install-Homebrew.png" alt="2-Install-Homebrew"/&gt;&lt;/p&gt;
&lt;h2&gt;步驟三：設定讀取 Homebrew 指令的環境變數&lt;/h2&gt;
&lt;p&gt;安裝完後，為了要使 Homebrew 的指令可以被 Mac 的 Terminal 中的 Bash 程式讀取到，需要設定 &lt;code&gt;/usr/local/bin&lt;/code&gt; 與 &lt;code&gt;/usr/local/sbin&lt;/code&gt; 至環境變數。&lt;/p&gt;
&lt;p&gt;建立一個 &lt;code&gt;.bash_profile&lt;/code&gt; 或是 &lt;code&gt;.profile&lt;/code&gt; （如果已有其中一個檔案則不需再次建立）並且在檔案中新增此行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/bin:/usr/local/sbin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;或是可以透過 Shell 的另一種語法雙引號來設定&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;PATH=/usr/local/bin:/usr/local/sbin:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;設定完成後，關閉 Terminal 應用程式重開 或是直接在 Terminal 中輸入以下指令啟動 &lt;code&gt;.bash_profile&lt;/code&gt; 或 &lt;code&gt;.profile&lt;/code&gt; 啟動即可（以下以 &lt;code&gt;.bash_pofile&lt;/code&gt; 為例 ）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&amp;gt; &lt;span class="nb"&gt;source&lt;/span&gt; ~/.bash_pofile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;接著便可以透過輸入 &lt;code&gt;brew&lt;/code&gt; 來做所有跟 Homebrew 有關的套件管理操作行為了！ &lt;/p&gt;
&lt;p&gt;例如要對 Homrbew 診斷可以輸入以下指令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&amp;gt; brew doctor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;更詳細的 Hombrew 安裝可以參考 &lt;a href="https://note.koko.guru/posts/mac-install-homebrew"&gt;Homebrew (1) - Mac 上安裝 Homebrew 套件管理工具&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;步驟四：透過 Homebrew 安裝 Python3&lt;/h2&gt;
&lt;p&gt;安裝 Python 其實除了透過 Homebrew 的方式外，也可以透過 Python 官方網站，下載 &lt;code&gt;.pkg&lt;/code&gt; 的安裝包，但是因為安裝完後檔案的路徑會分別在：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;位置一：&lt;/strong&gt; &lt;code&gt;/Library/Frameworks/Python3.framework&lt;/code&gt;
&lt;strong&gt;位置二：&lt;/strong&gt; &lt;code&gt;/usr/local/bin/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;這兩個位置，位置二是一個 symlink。另外，安裝包也會附帶 IDLE、PythonLauncher 這兩個軟體，安裝在 Application 資料夾。&lt;/p&gt;
&lt;p&gt;因此需要除了自己紀錄位置外，刪除時，也要自己去找尋上述兩個位置與 IDLE、PythonLauncher 分別刪除，所以不推薦。&lt;/p&gt;
&lt;p&gt;而透過 Homebrew 安裝除了， Homebrew 會列出 Python 的安裝位置外，也會把其他未來安裝的套件放在同一處，移除與升級都可以透過指令達成，因此非常便利，所以推薦在 Mac 上使用 Homebrew 安裝。&lt;/p&gt;
&lt;p&gt;在 Homebrew 中， 目前 Python 3 會以 python 的套件名稱呈現，如下執行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&amp;gt; brew install python
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Homebrew 會一同連 &lt;code&gt;pip&lt;/code&gt; 也安裝進去，而在 Python3 中 &lt;code&gt;pip&lt;/code&gt; 名稱為 &lt;code&gt;pip3&lt;/code&gt;，如下安裝完的結果與訊息：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python-install-python3-on-mac/3-python-install-python3-by-homebrew.png" alt="3-python-install-python3-by-homebrew"/&gt;&lt;/p&gt;
&lt;p&gt;安裝完後 Homebrew 會自動為放在 &lt;code&gt;Cellar&lt;/code&gt; 的 Python 3，並在 Mac 的 &lt;code&gt;/usr/local/opt&lt;/code&gt; 與 &lt;code&gt;/usr/local/bin&lt;/code&gt; 分別建置 link 檔案，如下為 &lt;code&gt;/usr/local/opt&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python-install-python3-on-mac/4-installed-python3-location-1.png" alt="4-installed-python3-location-1"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/usr/local/bin&lt;/code&gt; 也有：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python-install-python3-on-mac/4-installed-python3-location-2.png" alt="4-installed-python3-location-2"/&gt;&lt;/p&gt;
&lt;h2&gt;步驟五：設定 Python 3 作為預設執行的指令&lt;/h2&gt;
&lt;p&gt;若先前沒有以 Homebrew 安裝 Python 2 的話，那麼當下安裝 Python 3 時，如果從 Terminal 中直接輸入 &lt;code&gt;python&lt;/code&gt;，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&amp;gt; python 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;會出現的是內建的 Mac Python 2.7，這是為何呢？&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python-install-python3-on-mac/4-python2-mac-default-version.png" alt="4-python2-mac-default-version"/&gt;&lt;/p&gt;
&lt;p&gt;我們來查看 &lt;code&gt;/usr/local/bin&lt;/code&gt; 目錄下，你會發現並沒有  Python 3 提供的  &lt;code&gt;python&lt;/code&gt; 可執行檔，而只有 &lt;code&gt;python3&lt;/code&gt; 執行檔，因此當你輸入 &lt;code&gt;python&lt;/code&gt; 時， Mac 因為來到 &lt;code&gt;/usr/local/bin&lt;/code&gt; 目錄下沒有找到 &lt;code&gt;python&lt;/code&gt; 可執行檔，才會保持原先的狀態，近一步往下一個位置找，並找到內建的版本，直接使用內建的 python 2.7。&lt;/p&gt;
&lt;p&gt;只有當輸入 &lt;code&gt;python3&lt;/code&gt;，你才會顯示 Homebrew 的 Python3.6.5&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&amp;gt; python3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果想要讓 Mac Terminal 在輸入 &lt;code&gt;python&lt;/code&gt; 指令時，會自動開啟 Homebrew 安裝的 Python 3，解決辦法是設定 &lt;code&gt;/usr/local/opt&lt;/code&gt; 下的 Homebrew Python 3 來源到系統環境變數前，使 PATH 先讀到 Homebrew 的 Python3：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python-install-python3-on-mac/5-python3-system-path-setting.png" alt="5-python3-system-path-setting" width="480px"/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/local/opt/python/libexec/bin:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;完成後重開 Terminal 或透過 &lt;code&gt;source&lt;/code&gt; 執行，即可成功，如下圖。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python-install-python3-on-mac/6-python3-command.png" alt="6-python3-command"/&gt;&lt;/p&gt;
&lt;p&gt;到此，因為先讀取到的 &lt;code&gt;/usr/local/opt/python/libexec/bin&lt;/code&gt; 下方有提供 Python 3 的 &lt;code&gt;python&lt;/code&gt; 可執行檔案，即可以透過原本的 &lt;code&gt;python3&lt;/code&gt; 或設定好的 &lt;code&gt;python&lt;/code&gt; 指令啟動 Python 3 。另外此設定也會影響到 &lt;code&gt;pip&lt;/code&gt; 指令：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python-install-python3-on-mac/7-show-pip-cource-in-python3.png" alt="7-show-pip-cource-in-python3"/&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;a href="https://note.koko.guru/posts/python2-python3-run-on-mac"&gt;Python2 與 Python 3 共存的設定 (以 Mac 為例)&lt;/a&gt; 此篇中亦有介紹如何設定預設 Mac 的 &lt;code&gt;python&lt;/code&gt; 指令讀取來源。&lt;/p&gt;
&lt;h1&gt;參考文章&lt;/h1&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://medium.com/denix-daily/macos%E4%B8%8A%E7%9A%84python%E8%B7%AF%E5%BE%91%E5%95%8F%E9%A1%8C-%E5%AE%89%E8%A3%9D%E6%96%B9%E6%B3%95-a10c01cc42a"&gt;MacOS 上 的 Python 路徑問題＆安裝方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonguidecn.readthedocs.io/zh/latest/starting/install3/osx.html"&gt;在 Mac OS X 上安装 Python 3&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Python"></category><category term="Python"></category><category term="Mac"></category><category term="Python3"></category></entry><entry><title>Python2 與 Python 3 共存的設定 (以 Mac 為例）</title><link href="https://note.koko.guru/posts/python2-python3-run-on-mac" rel="alternate"></link><published>2019-03-12T00:00:00+08:00</published><updated>2019-03-12T00:00:00+08:00</updated><author><name>kokokuo</name></author><id>tag:note.koko.guru,2019-03-12:/posts/python2-python3-run-on-mac</id><summary type="html">&lt;p&gt;當你的 Mac 系統要同時使用到 Python 2 與 Python 3 的專案時，就會遇到需要同時安裝多個 Python 版本在電腦中，可是此時要如何設定透過指令啟動不同的版本，以下我們以 &lt;strong&gt;Python 2.7.15&lt;/strong&gt; 與 &lt;strong&gt;Python 3.6.5&lt;/strong&gt; 為例子，並舉出兩個常見的 Python 2 與 Python 3 例子。&lt;/p&gt;</summary><content type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;當你的 Mac 系統要同時使用到 Python 2 與 Python 3 的專案時，就會遇到需要同時安裝多個 Python 版本在電腦中，可是此時要如何設定透過指令啟動不同的版本，以下我們以 &lt;strong&gt;Python 2.7.15&lt;/strong&gt; 與 &lt;strong&gt;Python 3.6.5&lt;/strong&gt; 為例子，並舉出兩個常見的 Python 2 與 Python 3 例子。&lt;/p&gt;
&lt;h1&gt;解決方法&lt;/h1&gt;
&lt;hr&gt;
&lt;h2&gt;例子一：Mac 內建 Python 2 與 安裝 Homebrew 的 Python 3&lt;/h2&gt;
&lt;p&gt;若先前沒有以 Homebrew 安裝 Python 2 的話，那麼當下安裝 Python 3 時，如果從 Terminal 中直接輸入 &lt;code&gt;python&lt;/code&gt;，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&amp;gt; python 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;會出現的是內建的 Mac Python 2.7：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python2-python3-run-on-mac/1-python2-command.png" alt="1-python2-command"/&gt;&lt;/p&gt;
&lt;p&gt;這是為何呢？&lt;/p&gt;
&lt;p&gt;我們來查看 &lt;code&gt;/usr/local/bin&lt;/code&gt; 目錄下，你會發現並沒有  Python 3 提供的  &lt;code&gt;python&lt;/code&gt; 可執行檔，而只有 &lt;code&gt;python3&lt;/code&gt; 執行檔，因此當你輸入 &lt;code&gt;python&lt;/code&gt; 時， Mac 因為來到 &lt;code&gt;/usr/local/bin&lt;/code&gt; 目錄下沒有找到 &lt;code&gt;python&lt;/code&gt; 可執行檔，才會保持原先的狀態，近一步往下一個位置找，並找到內建的版本，直接使用內建的 python 2.7。&lt;/p&gt;
&lt;p&gt;只有當輸入 &lt;code&gt;python3&lt;/code&gt;，你才會顯示 Homebrew 的 Python3.6.5&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&amp;gt; python3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src="../images/20190312-python2-python3-run-on-mac/2-python3-command.png" alt="2-python3-command"/&gt;&lt;/p&gt;
&lt;p&gt;如果想要讓 Mac Terminal 在輸入 &lt;code&gt;python&lt;/code&gt; 指令時，會自動開啟 Homebrew 安裝的 Python 3，解決辦法是設定 &lt;code&gt;/usr/local/opt&lt;/code&gt; 下的 Homebrew Python 3 來源到系統環境變數前，使 PATH 先讀到 Homebrew 的 Python3：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python2-python3-run-on-mac/3-python3-system-path-setting.png" alt="3-python3-system-path-setting" width="480px"/&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/local/opt/python/libexec/bin:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;完成後重開 Terminal 或透過 &lt;code&gt;source&lt;/code&gt; 執行，即可成功，如下圖。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python2-python3-run-on-mac/4-python3-command.png" alt="4-python3-command"/&gt;&lt;/p&gt;
&lt;p&gt;到此，可以透過 &lt;code&gt;python3&lt;/code&gt; 或設定好的 &lt;code&gt;python&lt;/code&gt; 指令啟動 Python 3 。&lt;/p&gt;
&lt;h2&gt;例子二： Homebrew 安裝 Python 2 與 Python 3 時&lt;/h2&gt;
&lt;p&gt;當透過 Homebrew 安裝了 Python2 與 Python 3 後，分別查看 &lt;code&gt;/usr/local/bin&lt;/code&gt; 與 &lt;code&gt;/usr/local/opt&lt;/code&gt; 時會發現 &lt;code&gt;/usr/local/bin&lt;/code&gt; 下的 &lt;code&gt;python&lt;/code&gt; 是導向 Homebrew 安裝 Python 2.7.15，如下圖：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python2-python3-run-on-mac/5-python2-and-python3-location.png" alt="5-python2-and-python3-location"/&gt;&lt;/p&gt;
&lt;p&gt;然而 &lt;code&gt;/usr/local/opt&lt;/code&gt; 則是 &lt;code&gt;python&lt;/code&gt; 位置導向 Python3：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python2-python3-run-on-mac/6-opt-location-python-link.png" alt="6-opt-location-python-link"/&gt;&lt;/p&gt;
&lt;p&gt;因此當我們分別輸入以下三種指令情況&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&amp;gt; python
$&amp;gt; python2
$&amp;gt; python3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;會發現內建的 Python 指令會指定 Homebrew 安裝的 Python 2.7.15:&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python2-python3-run-on-mac/7-test-python2-python3-command.png" alt="7-test-python2-python3-command"/&gt;&lt;/p&gt;
&lt;p&gt;此原因透過 &lt;code&gt;export&lt;/code&gt; 會發現， 因為系統 &lt;code&gt;PATH&lt;/code&gt;中會先讀取到的 &lt;code&gt;/usr/local/bin&lt;/code&gt; ，因此 Homebrew 的 Python 會取代掉 Mac 內建的 Python 。
再來因為  &lt;code&gt;/usr/local/bin&lt;/code&gt; 下的 &lt;code&gt;python&lt;/code&gt; 指令是 Link 到 Homebrew 的 &lt;code&gt;python@2&lt;/code&gt; ，因此會是執行 Python 2.7 而非 Python 3。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python2-python3-run-on-mac/8-system-path-order.png" alt="8-system-path-order"/&gt;&lt;/p&gt;
&lt;p&gt;此時，如果想要把預設的 python 替換成 Homebrew 的 Python3 ，那麼便是如同例子一依樣設定 Python 3 所在的位置 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/local/opt/python/libexec/bin:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;到環境變數中，如下後再重新開啟 Terminal 或是透過 &lt;code&gt;source&lt;/code&gt; 啟動即可。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python2-python3-run-on-mac/9-python3-order-first-system-path.png" alt="9-python3-order-first-system-path" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;此時 &lt;code&gt;PATH&lt;/code&gt; 環境變數會先讀取到 Python 3 的位置，並抓取 &lt;code&gt;python&lt;/code&gt; 可執行檔。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python2-python3-run-on-mac/10-python3-order-first-system-path-2.png" alt="10-python3-order-first-system-path-2"/&gt;&lt;/p&gt;
&lt;p&gt;因此當再次測試 &lt;code&gt;python&lt;/code&gt; 指令會發現預設的 &lt;code&gt;python&lt;/code&gt; 已經變為 Python 3 的位置。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&amp;gt; python
$&amp;gt; python2
$&amp;gt; python3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src="../images/20190312-python2-python3-run-on-mac/11-python3-command-first.png" alt="11-python3-command-first"/&gt;&lt;/p&gt;
&lt;p&gt;可以透過 &lt;code&gt;python -h&lt;/code&gt; 查看路徑：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python2-python3-run-on-mac/12-python-command-show-python3-path.png" alt="12-python-command-show-python3-path"/&gt;&lt;/p&gt;
&lt;p&gt;即可設定完成。&lt;/p&gt;
&lt;h1&gt;預設 python 指令對 pip 的影響&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;上述的 &lt;code&gt;python&lt;/code&gt; 指令同時也會對 &lt;code&gt;pip&lt;/code&gt; 造成影響，如果現在預設的 &lt;code&gt;python&lt;/code&gt; 是讀取 Python 3 那麼 &lt;code&gt;pip&lt;/code&gt; 也會是 Python 3 的 &lt;code&gt;pip&lt;/code&gt;，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python2-python3-run-on-mac/13-show-pip-path.png" alt="13-show-pip-path"/&gt;&lt;/p&gt;
&lt;p&gt;如果預設的 &lt;code&gt;python&lt;/code&gt; 是讀取 Python 2 ，那麼 &lt;code&gt;pip&lt;/code&gt; 則會是 Python 2 的 &lt;code&gt;pip&lt;/code&gt; 。&lt;/p&gt;
&lt;h2&gt;明確區分 Homebrew Python 2 的來源&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;上述的設定中，如果想要明確區分  &lt;code&gt;python&lt;/code&gt; 指令加入環境變數的來源，也可以對 Homebrew 的 &lt;code&gt;python@2&lt;/code&gt; 加入環境變數，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/local/opt/python@2/libexec/bin:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;因此未來便可以透過修改 &lt;code&gt;.bash_profile&lt;/code&gt; 去做預設 &lt;code&gt;python&lt;/code&gt; 指令讀取設定的開關：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python2-python3-run-on-mac/14-bash-profile-setting.png" alt="14-bash-profile-setting" width="480px" /&gt;&lt;/p&gt;
&lt;p&gt;最後觀察一下環境變數，分別設定完成。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190312-python2-python3-run-on-mac/15-readable-system-path.png" alt="15-readable-system-path"/&gt;&lt;/p&gt;</content><category term="Python"></category><category term="Python2"></category><category term="Mac"></category><category term="Python3"></category><category term="Python"></category></entry><entry><title>Python - 透過 .venv 管理 Pipenv 虛擬環境的來源</title><link href="https://note.koko.guru/posts/pipenv-use-dot-venv-folder" rel="alternate"></link><published>2019-03-11T00:00:00+08:00</published><updated>2019-03-11T00:00:00+08:00</updated><author><name>kokokuo</name></author><id>tag:note.koko.guru,2019-03-11:/posts/pipenv-use-dot-venv-folder</id><summary type="html">&lt;p&gt;在前一篇 &lt;a href="https://note.koko.guru/posts/python-pipenv-install-and-usage"&gt;Python - 結合 pip 與 virtualenv 的虛擬環境與套件管理的二合一新利器 Pipenv&lt;/a&gt; 中提到透過 Pipenv 建立好的虛擬環境都會放在家目錄下的隱藏路徑統一管理，但是開發時如果使用編輯器像是 VSCode ，則需要一個一個設定以外，如果想要查看檔案也不方，所以能不能夠把建立好的專案虛擬目錄放在自己的專案下呢？答案是可以的，如果你正需要的話可以參考此篇。&lt;/p&gt;</summary><content type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;在前一篇 &lt;a href="https://note.koko.guru/posts/python-pipenv-install-and-usage"&gt;Python - 結合 pip 與 virtualenv 的虛擬環境與套件管理的二合一新利器 Pipenv&lt;/a&gt; 中提到透過 Pipenv 建立好的虛擬環境都會放在用戶家目錄下的 &lt;code&gt;.local/share/ virtualenvs/&lt;/code&gt; 路徑，並且統一管理。&lt;/p&gt;
&lt;p&gt;但是如果用編輯器像是 VSCode 開發時，還要設定虛擬目錄的來源很麻煩（因為每個虛擬目錄的命名都不同）所以能不能夠把建立好的專案虛擬目錄放在自己的專案下呢？答案是可以的，如果你正需要的話可以參考此篇。&lt;/p&gt;
&lt;h1&gt;建立 &lt;code&gt;.venv&lt;/code&gt; 管理你的虛擬環境目錄&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;作法很簡單，只要在建立虛擬環境前，先在你的專案目錄下建立一個 &lt;code&gt;.venv&lt;/code&gt; 的目錄，在照一般建立虛擬環境的方式就好，不管你是用 &lt;code&gt;pipenv install&lt;/code&gt;, &lt;code&gt;pipenv shell&lt;/code&gt; 或是其他指令讓 Pipenv 偵測沒有虛擬環境而建立都可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;parser/&amp;gt; mkdir .venv
parser/&amp;gt; pipenv shell
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如下圖，你會看到虛擬環境被建立在 &lt;code&gt;parser&lt;/code&gt; 這個專案下的 &lt;code&gt;.venv&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190311-pipenv-use-dot-venv-folder/1-pipenv-mkdir-dot.venv-create-virtualenv.png" alt="1-pipenv-mkdir-dot.venv-create-virtualenv" /&gt;&lt;/p&gt;
&lt;p&gt;因為 &lt;code&gt;pipenv shell&lt;/code&gt; 只會建立 &lt;code&gt;Pipfile&lt;/code&gt;，所以我們再透過 &lt;code&gt;pipenv install&lt;/code&gt; 或是 &lt;code&gt;pipenv lock&lt;/code&gt; 建立 &lt;code&gt;Pipfile.lock&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190311-pipenv-use-dot-venv-folder/2-pipenv-show-dot-venv.png" alt="2-pipenv-show-dot-venv" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;此時你會虛擬環境的檔案被建置在 &lt;code&gt;.venv&lt;/code&gt; 下。&lt;/p&gt;
&lt;h1&gt;參考資料&lt;/h1&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://qiita.com/youkidkk/items/b6a6e39ee3a109001c75"&gt;Windows + Python 3.6 + PipEnv + Visual Studio Code でPython 開発環境&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Python"></category><category term="Python"></category><category term="Pipenv"></category><category term="Virtualenv"></category></entry><entry><title>Python - 結合 pip 與 virtualenv 的虛擬環境與套件管理的二合一新利器 Pipenv</title><link href="https://note.koko.guru/posts/python-pipenv-install-and-usage" rel="alternate"></link><published>2019-03-08T00:00:00+08:00</published><updated>2019-03-08T00:00:00+08:00</updated><author><name>kokokuo</name></author><id>tag:note.koko.guru,2019-03-08:/posts/python-pipenv-install-and-usage</id><summary type="html">&lt;p&gt;使用 Python 做開發的人，多數都會使用虛擬環境，特別是 &lt;code&gt;virtualenv&lt;/code&gt; 作為建立開發並隔離環境的方式，但是使用一段時間後都會遇到一些管理或是協作上的問題，為了解決這些困擾，新的套件 &lt;strong&gt;Pipenv&lt;/strong&gt; 誕生了，不僅解決了所有問題，在使用上還非常方便，此篇就來深入了解與學習如何使用  &lt;strong&gt;Pipenv&lt;/strong&gt;  吧&lt;/p&gt;</summary><content type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;使用 Python 做開發的人，多數都會使用虛擬環境，特別是 &lt;code&gt;virtualenv&lt;/code&gt; 作為建立開發並隔離環境的方式，而且這個工作的流程不外乎就是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;透過建立虛擬環境 &lt;code&gt;virtualenv&lt;/code&gt; 來隔離 Python 的開發環境&lt;/li&gt;
&lt;li&gt;進入虛擬環境後，透過 &lt;code&gt;pip&lt;/code&gt; 下載套件&lt;/li&gt;
&lt;li&gt;為了方便後續專案的保存、上版控與移轉，透過建立 &lt;code&gt;requirements.txt&lt;/code&gt; 來保存虛擬環境中透過 &lt;code&gt;pip&lt;/code&gt; 所安裝的套件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但是現有透過建立虛擬環境隔離與產生 &lt;code&gt;requirements.txt&lt;/code&gt; 保存該虛擬環境中所安裝的套件都會有一些問題：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;requirements.txt&lt;/code&gt; 是需要手動更新的，所以當透過 &lt;code&gt;pip&lt;/code&gt; 下載或更新套件後，&lt;code&gt;requirements.txt&lt;/code&gt; 是不會自動更新。因此專案移轉時，若忘記更新 &lt;code&gt;requirements.txt&lt;/code&gt; 會導致新安裝的套件或是更新的套件都沒有被記錄下來，拿到你專案的人也會無法跑起來。
&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;你安裝的套件 A 與套件 B 都相依了套件 C 的 &lt;code&gt;1.1&lt;/code&gt; 版，但某一天你更新了套件 B ，因為套件 B 需要套件 C 的 &lt;code&gt;1.2&lt;/code&gt; 版，所以一併更新了相依的套件 C 到 &lt;code&gt;1.2&lt;/code&gt; 版，但是你的套件 A 卻仍相依套件 C 的 &lt;code&gt;1.1&lt;/code&gt; 版，導致套件 A 反而無法使用。
&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;你透過 &lt;code&gt;pip&lt;/code&gt; 所安裝的套件，並不會特別紀錄哪些是屬於該套件的相依套件，例如今天你下載了一個套件 D ，而套件 D 因為相依所以也下載安裝了套件 E 與 F，但是當你透過 &lt;code&gt;pip list&lt;/code&gt; 查閱時，&lt;code&gt;pip&lt;/code&gt; 卻不會告知你他是相依套件，所以若是此套件的相依一多就無法整理。
&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;因此同事協作開發時，同事若想要查詢你所安裝的套件的文件與手冊，也會因為無法知道你所用的主要套件是哪些，因此難以查尋該套件的相關文章協助開發。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此雖然 &lt;code&gt;virtualenv&lt;/code&gt; 是一個可以幫助我們在開發 Python 專案時，隔離主系統與其他專案環境的好工具，但是 &lt;code&gt;virtualenv&lt;/code&gt; 依然不夠好用。&lt;/p&gt;
&lt;p&gt;所以 &lt;strong&gt;&lt;a href="https://pipenv.readthedocs.io/en/latest/"&gt;Pipenv&lt;/a&gt;&lt;/strong&gt; 便隨之誕生了，一套更強的虛擬環境與套件管理的工具利器。&lt;/p&gt;
&lt;h1&gt;什麼是 Pipenv&lt;/h1&gt;
&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/pipenv-icon.png" alt="pipenv-icon" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://pipenv.readthedocs.io/en/latest/"&gt;Pipenv&lt;/a&gt;&lt;/strong&gt;  是為了解決上述所有現存套件管理與虛擬環境的問題而誕生了，正如其名，Pipenv 整合了 &lt;code&gt;pip&lt;/code&gt; 與 &lt;code&gt;virtualenv&lt;/code&gt;，是一套具備了建立虛擬環境同時能管理件的利器，他能做到並解決原本存在的問題：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;只需要 &lt;code&gt;pipenv&lt;/code&gt; 指令，不在需要分別使用 &lt;code&gt;pip&lt;/code&gt; 與 &lt;code&gt;virtualenv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;改透過 &lt;code&gt;Pipfile&lt;/code&gt; 與 &lt;code&gt;Pipfile.lock&lt;/code&gt; 來自動更新並維護安裝的套件，完全取代原先不完善的 &lt;code&gt;requirements.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;透過對套件做 hash 來做安全性檢查確認，當 hash 的結果不相同，跳出錯誤，防止惡意套件透過安裝侵入你的程式碼。&lt;/li&gt;
&lt;li&gt;可以透過建立一份 &lt;code&gt;.env&lt;/code&gt; 檔案在專案目錄下，來自動載入不同環境變數為你的專案直接使用。&lt;/li&gt;
&lt;li&gt;你安裝的套件 A 與套件 B 即便都相依了套件 C 的 &lt;code&gt;1.1&lt;/code&gt; 版，這個套件 C 也會被隔離成兩份，即便套件 B 的更新連帶更新了套件 C，也不會影響套件 A 所相依安裝的套件 C。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不過上述的感動都沒有親自看到來的高潮，所以讓我們接著來安裝與使用 Pipenv 套件吧！&lt;/p&gt;
&lt;h1&gt;安裝 Pipenv&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;讓我們先在 Python 系統環境下安裝 &lt;code&gt;pipenv&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~/&amp;gt; pip install pipenv
Usage: pipenv &lt;span class="o"&gt;[&lt;/span&gt;OPTIONS&lt;span class="o"&gt;]&lt;/span&gt; COMMAND &lt;span class="o"&gt;[&lt;/span&gt;ARGS&lt;span class="o"&gt;]&lt;/span&gt;...

Options:
  --where             Output project home information.
  --venv              Output virtualenv information.
  --py                Output Python interpreter information.
  --envs              Output Environment Variable options.
  --rm                Remove the virtualenv.
  --bare              Minimal output.
  --completion        Output completion &lt;span class="o"&gt;(&lt;/span&gt;to be eval&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;d&lt;span class="o"&gt;)&lt;/span&gt;.
  --man               Display manpage.
  --support           Output diagnostic information &lt;span class="k"&gt;for&lt;/span&gt; use in GitHub issues.
  --site-packages     Enable site-packages &lt;span class="k"&gt;for&lt;/span&gt; the virtualenv.  &lt;span class="o"&gt;[&lt;/span&gt;env var:
                      PIPENV_SITE_PACKAGES&lt;span class="o"&gt;]&lt;/span&gt;
  --python TEXT       Specify which version of Python virtualenv should use.
  --three / --two     Use Python &lt;span class="m"&gt;3&lt;/span&gt;/2 when creating virtualenv.
  --clear             Clears caches &lt;span class="o"&gt;(&lt;/span&gt;pipenv, pip, and pip-tools&lt;span class="o"&gt;)&lt;/span&gt;.  &lt;span class="o"&gt;[&lt;/span&gt;env var:
                      PIPENV_CLEAR&lt;span class="o"&gt;]&lt;/span&gt;
  -v, --verbose       Verbose mode.
  --pypi-mirror TEXT  Specify a PyPI mirror.
  --version           Show the version and exit.
  -h, --help          Show this message and exit.

Commands:
  check      Checks &lt;span class="k"&gt;for&lt;/span&gt; security vulnerabilities and against PEP &lt;span class="m"&gt;508&lt;/span&gt; markers
             provided in Pipfile.
  clean      Uninstalls all packages not specified in Pipfile.lock.
  graph      Displays currently-installed dependency graph information.
  install    Installs provided packages and adds them to Pipfile, or &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; no
             packages are given&lt;span class="o"&gt;)&lt;/span&gt;, installs all packages from Pipfile.
  lock       Generates Pipfile.lock.
  open       View a given module in your editor.
  run        Spawns a &lt;span class="nb"&gt;command&lt;/span&gt; installed into the virtualenv.
  shell      Spawns a shell within the virtualenv.
  sync       Installs all packages specified in Pipfile.lock.
  uninstall  Un-installs a provided package and removes it from Pipfile.
  update     Runs lock, &lt;span class="k"&gt;then&lt;/span&gt; sync.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;由於 Pipenv 會依賴 &lt;code&gt;virtualenv&lt;/code&gt; 與 &lt;code&gt;pip&lt;/code&gt; 套件，所以若是你沒有安裝 &lt;code&gt;virtualenv&lt;/code&gt; 也會一併安裝下來（ &lt;code&gt;pip&lt;/code&gt; 是原本已經內建在 Python 的套件 )&lt;/p&gt;
&lt;h1&gt;使用 Pipenv&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;Pipenv 是一套強大但入手時卻容易混淆的套件，由於 Pipenv 會很貼心的檢查許多狀況，所以使用時許多指令都會連貫性的完成其他單一動作的指令功能，因此你會發現許多指令都會 &lt;strong&gt;達到相同的結果&lt;/strong&gt;，如建置虛擬環境、產生 &lt;code&gt;Pipfile.lock&lt;/code&gt; 等等，導致反而對於指令原有的用途產生混淆。&lt;/p&gt;
&lt;p&gt;以下我們透過一個 &lt;code&gt;parser&lt;/code&gt; 專案做來例子來介紹 Pipenv 中常用的指令，以及觀察 Pipenv 為我們做了什麼神奇的現象。&lt;/p&gt;
&lt;h2&gt;1. 建立虛擬環境&lt;/h2&gt;
&lt;p&gt;進入要開發並準備建立虛擬環境的專案，透過 &lt;code&gt;pipenv install&lt;/code&gt; 來建立虛擬環境，此時 &lt;code&gt;pipenv install&lt;/code&gt; 會偵測你系統預設的 Python 版本環境，並且依照此版本建立虛擬環境：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~/&amp;gt; &lt;span class="nb"&gt;cd&lt;/span&gt; parser
parser/&amp;gt; pipenv install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如下圖你會看到在建置虛擬環境的過程中，Pipenv 使用了系統所提供的 &lt;code&gt;3.7.1&lt;/code&gt; 版，並且建立了虛擬環境出來，只不過與 &lt;code&gt;virtualenv&lt;/code&gt; 不同的是，Pipenv 會自動產生一個 &lt;code&gt;.local/share/ virtualenvs/&lt;/code&gt; 在你的家目錄下，並且把所有專案的虛擬環境統一放置在其中管理，例如 &lt;code&gt;parser&lt;/code&gt; 的虛擬目錄是 &lt;code&gt;parser-hvDw_3KS&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/1-create-virtualenv-by-pipenv.png" alt="1-create-virtualenv-by-pipenv" /&gt;&lt;/p&gt;
&lt;h3&gt;查詢虛擬環境所在位置&lt;/h3&gt;
&lt;p&gt;如果往後你忘了你的虛擬目錄所在位置，可以透過 &lt;code&gt;--venv&lt;/code&gt; 指令查詢哦，進到該目錄看，裡面放了從系統中複製過來 Python 的核心。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/2-virtualenv-path-by-pipenv.png" alt="2-virtualenv-path-by-pipenv" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;當虛擬環境完成後，你會接著發現，&lt;code&gt;pipenv install&lt;/code&gt; 這個指令自動產生了兩個檔案在你的專案中，分別是 &lt;code&gt;Pipfile&lt;/code&gt; 與 &lt;code&gt;Pipfile.lock&lt;/code&gt;，這兩個檔案是圍繞著 Pipenv 的整個核心，以下分別來介紹。&lt;/p&gt;
&lt;h3&gt;Pipfile&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Pipfile&lt;/code&gt; 取代了過去的 &lt;code&gt;requirements.txt&lt;/code&gt;，採用 &lt;a href="https://zh.wikipedia.org/zh-tw/TOML"&gt;TOML&lt;/a&gt; 語法格式，讓紀錄安裝過的套件資訊可以更豐富。&lt;/p&gt;
&lt;p&gt;開頭的 &lt;code&gt;[source]&lt;/code&gt; 記錄了套件安裝的網路來源位置，預設為 PyPI 官網來源，但是也意味著你可以取代成你團隊自己的私有 PyPI 位置，並且可以設定是否使用 SSL 加密協定。下方的 &lt;code&gt;[dev-packages]&lt;/code&gt; 紀錄了只有開發才會用到的安裝套件。 &lt;code&gt;[packages]&lt;/code&gt; 則如同過去我們開發與部署都需要用到的套件，並且紀錄的版本號。最後 &lt;code&gt;[requires]&lt;/code&gt; 紀錄了 Python 的版本號，因此 &lt;code&gt;Pipfile&lt;/code&gt; 的主要目的是用來幫助 Pipenv 紀錄套件的來源與下載的套件版本資訊以及 Python 的環境等設置檔案。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/3-pipenv-create-pipfile.png" alt="3-pipenv-create-pipfile" width="480px"/&gt;&lt;/p&gt;
&lt;h3&gt;Pipfile.lock&lt;/h3&gt;
&lt;p&gt;一般而言當 &lt;code&gt;Pipfile&lt;/code&gt; 產生或是更新後，Pipenv 也會自動也更新 &lt;code&gt;Pipfile.lock&lt;/code&gt;，這是因為 &lt;code&gt;Pipfile.lock&lt;/code&gt; 會依據 &lt;code&gt;Pipfile&lt;/code&gt; 紀錄的套件來源來抓取套件下來，並計算 Hash 值保存和記錄目前的版本號，同時也會把相依而下載的套件一併記錄在此，作為往後再次建立環境抓取套件安裝的依據。&lt;/p&gt;
&lt;p&gt;透過 Hash 計算紀錄作為安全性驗證，避免未來再次下載時，因遠端來源被竄改下載使用入侵系統，同時也能作為往後是否下載新版本的比較依據。這個 Hash 的機制以 pip  8.0 版後的 &lt;a href="https://pip.pypa.io/en/stable/reference/pip_install/#hash-checking-mode"&gt;Hash-Checking Mode&lt;/a&gt; 為基礎實現，可以參考 &lt;a href="https://pipenv.readthedocs.io/en/latest/basics/#pipfile-lock-security-features"&gt;Pipfile.lock Security Features&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/4-pipenv-create-pipfile-lock.png" alt="4-pipenv-create-pipfile-lock" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;2. 啟動虛擬環境&lt;/h2&gt;
&lt;p&gt;當建立好虛擬環境以及 &lt;code&gt;Pipfile&lt;/code&gt;, &lt;code&gt;Pipfile.lock&lt;/code&gt; 後，接著就是要進入虛擬環境中來在環境之下操作，在 Pipenv 中提供了 &lt;code&gt;pipenv shell&lt;/code&gt; 這個指令能使用我進入環境中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;parser/&amp;gt; pipenv shell
&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;進入後會以 &lt;code&gt;(專案名稱)&lt;/code&gt; 為前綴字表示在虛擬環境中，如下圖顯示的是 &lt;code&gt;(parser)parser/&lt;/code&gt; ，此時我們使用 &lt;code&gt;pip list&lt;/code&gt; 可以查閱到該環境下尚未安裝套件。&lt;/p&gt;
&lt;p&gt;然而系統的 Python 環境實際上是安裝了許多套件：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/5-pipenv-shell-enter-virtualenv.png" alt="5-pipenv-shell-enter-virtualenv" /&gt;&lt;/p&gt;
&lt;h3&gt;以 &lt;code&gt;pipenv shell&lt;/code&gt; 指令建立與進入虛擬環境&lt;/h3&gt;
&lt;p&gt;其實，&lt;code&gt;pipenv shell&lt;/code&gt; 這個指令會檢查目前的專案是否有建立虛擬環境，如果沒有的話是會為你的專案直接建立好，並且進入環境中，如下圖：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/6-pipenv-shell-to-install-virtualenv.png" alt="6-pipenv-shell-to-install-virtualenv" /&gt;&lt;/p&gt;
&lt;p&gt;不過比較特別的是，他不會為你也產生 &lt;code&gt;Pipfile.lock&lt;/code&gt;，因為 &lt;code&gt;shell&lt;/code&gt; 的主要動作是進入虛擬環境，所以他最多只會產生 &lt;code&gt;Pipfile&lt;/code&gt; 而已，需要你透過其他指令，來生成 &lt;code&gt;Pipfile.lock&lt;/code&gt; 檔案。&lt;/p&gt;
&lt;h3&gt;退出虛擬環境&lt;/h3&gt;
&lt;p&gt;如果你在虛擬環境中，想要退出的話，可以輸入 &lt;code&gt;deactivate&lt;/code&gt; 或是按下 &lt;code&gt;Ctrl + D&lt;/code&gt; 即可。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;deactivate&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; deactivate
parser/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;按下 &lt;code&gt;Ctrl + D&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt;
parser/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;3. 安裝套件在虛擬環境中&lt;/h2&gt;
&lt;p&gt;在一開頭我們提到了 &lt;code&gt;pipenv install&lt;/code&gt; 這個指令，其實這個指令還夠安裝套件，只要下 &lt;code&gt;pipenv install [套件名稱]&lt;/code&gt; 便可以幫助我們安裝想要的套件到虛擬環境中，以下我們以安裝 &lt;code&gt;requests&lt;/code&gt; 與 &lt;code&gt;beautifulsoup4&lt;/code&gt; 為例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pipenv install requests
&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pipenv install beautifulsoup4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pipenv 也能夠一次對多個操件做相同的行爲，如下一次對多個套件安裝：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pipenv install requests beautifulsoup4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Pipfile 與 Pipfile.lock 的變化&lt;/h3&gt;
&lt;p&gt;接著打開 Pipfile， 你會在 &lt;code&gt;[packages]&lt;/code&gt; 看見剛剛安裝的 &lt;code&gt;requests&lt;/code&gt; 與 &lt;code&gt;beautifulsoup4&lt;/code&gt; 都記錄在此並包含版本號：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/12-pipenv-pipfile-installed-package.png" alt="12-pipenv-pipfile-installed-package" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;而且和以往的 &lt;code&gt;requirements.txt&lt;/code&gt; 眾不同的是，這次他不會再把相依的套件資訊也記錄上去，你會發現 &lt;code&gt;requests&lt;/code&gt; 安裝時會下載的相依套件不在此，這讓我們更一目瞭然的區分哪些才是我們開發與部署都會使用到的套件，並且提升協作時查閱套件的文件效率。&lt;/p&gt;
&lt;p&gt;相依的套件會被詳細記錄在 &lt;code&gt;Pipfile.lock&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/13-pipenv-pipfile-lock-installed-dependance-package.png" alt="13-pipenv-pipfile-lock-installed-dependance-package" /&gt;&lt;/p&gt;
&lt;h3&gt;透過 &lt;code&gt;--dev&lt;/code&gt; 安裝開發環境需要的套件&lt;/h3&gt;
&lt;p&gt;在 Pipenv 中，我們還能區分並安裝只有在開發時才會用到的套件，以避免部署時下載了不需要的套件在其中使專案容量變大，例如 &lt;code&gt;mypy&lt;/code&gt;, &lt;code&gt;pytest&lt;/code&gt; 等套件都是只有開發時才會使用到：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pipenv install pytest --dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/14-pipenv-install-dev-package.png" alt="14-pipenv-install-dev-package" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;只要透過 &lt;code&gt;pipenv install [套件名稱] --dev&lt;/code&gt; 就可以告訴 Pipenv 這個套件我只會在開發時使用，因此安裝後，該套件也會被記錄在 &lt;code&gt;Pipfile&lt;/code&gt; 中的 &lt;code&gt;[dev-packages]&lt;/code&gt; 區塊：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/15-pipfile-dev-package-update.png" alt="15-pipfile-dev-package-update" width="480px"/&gt;&lt;/p&gt;
&lt;h3&gt;更多的認識 &lt;code&gt;pipenv install&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;從前面使用 &lt;code&gt;pipenv install&lt;/code&gt; 這個指令觀察下來，你會注意到這個指令的功用是其實有兩個：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安裝套件到虛擬環境中&lt;/li&gt;
&lt;li&gt;當指令後面不寫套件名稱時，就會檢查是否有 &lt;code&gt;Pipfile&lt;/code&gt; 存在，並且讀取 &lt;code&gt;Pipfile&lt;/code&gt; 更新 &lt;code&gt;Pipfile.lock&lt;/code&gt; ( &lt;code&gt;Pipfile.lock&lt;/code&gt; 不存在則建立 ) 安裝到虛擬環境中；如果沒有 &lt;code&gt;Pipfile&lt;/code&gt; 則會檢查是否有 &lt;code&gt;requirements.txt&lt;/code&gt;，所的話也會讀取安裝的套件並轉換到 &lt;code&gt;Pipfile&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果上述行為，虛擬環境原本就不存在便會建立環境，若是都沒有 &lt;code&gt;Pipefile&lt;/code&gt;, &lt;code&gt;Pipfile.lock&lt;/code&gt; 與虛擬環境目錄，就會建立全新的虛擬環境。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/11-pipenv-install-process.png" alt="11-pipenv-install-process" width="480"/&gt;&lt;/p&gt;
&lt;p&gt;若你不希望 &lt;code&gt;requirements.txt&lt;/code&gt; 因為 &lt;code&gt;pipenv install&lt;/code&gt; 而被讀取安裝到 &lt;code&gt;Pipfile&lt;/code&gt; 的話，建議你先把該檔案移到外面哦！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;4. 查看安裝的套件&lt;/h2&gt;
&lt;p&gt;在 Pipenv 中查看安裝的套件很簡單，只要透過 &lt;code&gt;pipenv graph&lt;/code&gt; 即可，而且還會顯示套件以及相依套件的關聯：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pipenv graph
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/16-pipenv-graph.png" alt="16-pipenv-graph" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;而且你會看到 &lt;code&gt;Flask-SQLAlchemy&lt;/code&gt; 與 &lt;code&gt;Flask-Restful&lt;/code&gt; 都有依賴 &lt;code&gt;Flask&lt;/code&gt;，但是他們安裝的 &lt;code&gt;Flask&lt;/code&gt; 是彼此獨立的，因此這也是開頭提到的，Pipenv 解決了套件彼此相依所產生的版本升級時困擾。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;5. 更新套件&lt;/h2&gt;
&lt;p&gt;如果你要檢查有無新的套件並更新，可以輸入 &lt;code&gt;pipenv update&lt;/code&gt;。 此時 &lt;code&gt;pipenv update&lt;/code&gt; 會先執行 &lt;code&gt;lock&lt;/code&gt; 指令，檢查是否有新的套件，如果有那麼 &lt;code&gt;Pipfile&lt;/code&gt; 與 &lt;code&gt;Pipfile.lock&lt;/code&gt; 都會更新為新的套件紀錄，並且接著透過 &lt;code&gt;sync&lt;/code&gt; 同步下載新套件到虛擬環境中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pipenv update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;6. 解除安裝的套件&lt;/h2&gt;
&lt;p&gt;如果今天想要解除安裝過的套件怎麼辦？ 我們可以透過 &lt;code&gt;pipenv uninstall [套件名稱]&lt;/code&gt; 來做：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pipenv uninstall Flask-SQLAlchemy 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;你也可以一次解安裝多個：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pipenv uninstall Flask-SQLAlchemy Flask-Restful
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;不過相依的套件並不會一併被移除，所以需要一個一個解掉。&lt;/p&gt;
&lt;h3&gt;移除 &lt;code&gt;--dev&lt;/code&gt; 的套件&lt;/h3&gt;
&lt;p&gt;如果你想要移除從 &lt;code&gt;Pipfile&lt;/code&gt; 中的 &lt;code&gt;[dev-packages]&lt;/code&gt; 區塊的套件，可以輸入 &lt;code&gt;pipenv uninstall [套件名稱] --dev&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pipenv uninstall pytest --dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/17-pipenv-uninstall-dev-packages.png" alt="17-pipenv-uninstall-dev-packages" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;7. 還原安裝過套件到虛擬環境&lt;/h2&gt;
&lt;p&gt;如果手上拿到了別人的專案，或是專案要重新建立虛擬環境，只要有 &lt;code&gt;Pipefile&lt;/code&gt;，就能透過 &lt;code&gt;pipenv install&lt;/code&gt; 讀取 &lt;code&gt;Pipefile&lt;/code&gt; 、產生或更新 &lt;code&gt;Pipfile.lock&lt;/code&gt; 後安裝套件還原環境。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 如果 parser 專案是&lt;/span&gt;
parser/&amp;gt; ls
Pipfile Pipfile.lock
parser/&amp;gt; pipenv install &lt;span class="c1"&gt;# 讀取 Pipfile 並且安裝套件還原虛擬環境&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;這也就是 &lt;code&gt;Pipefile&lt;/code&gt; 取代 &lt;code&gt;requiremnets.txt&lt;/code&gt; 的好處。&lt;/p&gt;
&lt;p&gt;過往的 &lt;code&gt;requiremnets.txt&lt;/code&gt; 在安裝新套件後也要下指令手動更新，建立環境時，也要下指令來讀取 &lt;code&gt;requiremnets.txt&lt;/code&gt; 建立與還原，但是這些步驟都會因為遺忘而漏掉；但是 &lt;code&gt;pipenv install [套件名稱]&lt;/code&gt; 安裝套件時不用怕忘記手動更新，因為 &lt;code&gt;Pipfile&lt;/code&gt; 會自動更新，並連同產生與更新&lt;code&gt;Pipfile.lock&lt;/code&gt;，要建立環境時只要有 &lt;code&gt;Pipfile&lt;/code&gt; 也不用在像過去下指令讀取讀取建立。&lt;/p&gt;
&lt;p&gt;順帶一題，使用 &lt;code&gt;pipenv install&lt;/code&gt; 只會讀取 &lt;code&gt;Pipfile&lt;/code&gt; 中 &lt;code&gt;[packages]&lt;/code&gt; 區塊的套件，如果你要為你的專案安裝 &lt;code&gt;[dev-packages]&lt;/code&gt; 的套件到虛擬環境，你要下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;parser/&amp;gt; pipenv install --dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;執行 &lt;code&gt;Pipfile&lt;/code&gt; 與 &lt;code&gt;Pipfile.lock&lt;/code&gt; 的過程&lt;/h3&gt;
&lt;p&gt;建立虛擬環境時，如果有 &lt;code&gt;Pipfile&lt;/code&gt; 、 &lt;code&gt;Pipfile.lock&lt;/code&gt; ，那麼 Pipenv 會有一個讀取與執行的順序：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;如果沒有 &lt;code&gt;Pipfile&lt;/code&gt; 而只有 &lt;code&gt;Pipfile.lock&lt;/code&gt;，那麼建立虛擬環境時，會因為沒有 &lt;code&gt;Pipfile&lt;/code&gt; 產生了新的 &lt;code&gt;Pipfile&lt;/code&gt; 並把沒有安裝套件的 &lt;code&gt;Pipfile&lt;/code&gt; 資訊更新覆蓋掉原本有安裝套件資訊的 &lt;code&gt;Pipfile.lock&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果有 &lt;code&gt;Pipfile&lt;/code&gt; 卻沒有 &lt;code&gt;Pipfile.lock&lt;/code&gt;，那麼建立虛擬環境時，會從 &lt;code&gt;Pipfile&lt;/code&gt; 的資訊中讀取下載套件產生 Pipfile.lock ，所以資訊會保留。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;8. 移除虛擬環境&lt;/h2&gt;
&lt;p&gt;在 Pipenv 中有提供 &lt;code&gt;--rm&lt;/code&gt; 這個參數給 Pipenv 可以直接移除建立的虛擬環境，只要輸入 &lt;code&gt;pipenv --rm&lt;/code&gt; 即可，但是若你在虛擬環境之中，需要先退出才會正常。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; deactivate
parser/&amp;gt; --venv
parser/&amp;gt; pipenv --rm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/19-pipenv-remove-virtualenv.png" alt="19-pipenv-remove-virtualenv" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;9. 使用與產生 requirements.txt&lt;/h2&gt;
&lt;p&gt;前面篇幅提到的都是 &lt;code&gt;Pipfile&lt;/code&gt; 與 &lt;code&gt;Pipfile.lock&lt;/code&gt; ，那如果今天想要從原本的 &lt;code&gt;virtualenv&lt;/code&gt; 換成 &lt;code&gt;pipenv&lt;/code&gt; 指令來使用的話，有沒有辦法讀取原本的 &lt;code&gt;requirements.txt&lt;/code&gt; 來建立 &lt;strong&gt;Pipenv&lt;/strong&gt; 的虛擬環境又能還原本來的套件呢？&lt;/p&gt;
&lt;p&gt;這是可以的，前面提到若是你在執行 &lt;code&gt;pipenv install&lt;/code&gt; 建立虛擬環境時，專案有 &lt;code&gt;requirements.txt&lt;/code&gt; 便會自動被讀取安裝，不過 &lt;strong&gt;Pipenv&lt;/strong&gt; 也提供了 &lt;code&gt;-r&lt;/code&gt; 參數讓你透過 &lt;code&gt;pipenv install&lt;/code&gt; 來指定你要讀取的 &lt;code&gt;requirements.txt&lt;/code&gt; 檔案來還原虛擬環境，並轉移記錄到 &lt;code&gt;Pipfile&lt;/code&gt; 與 &lt;code&gt;Pipfile.lock&lt;/code&gt; 中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;parser/&amp;gt; pipenv install -r &lt;span class="o"&gt;[&lt;/span&gt;你的 &lt;span class="sb"&gt;`&lt;/span&gt;requirements.txt&lt;span class="sb"&gt;`&lt;/span&gt; 路徑位置&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;相反的，如果你想要透過 Pipenv 產生 &lt;code&gt;requirements.txt&lt;/code&gt;，可以透過 &lt;code&gt;pipenv lock -r requirements.txt&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;parser/&amp;gt; pipenv lock -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;使用 &lt;code&gt;pipenv lock&lt;/code&gt; 是因為 &lt;code&gt;lock&lt;/code&gt; 這個指令原本的用途就是拿來產生 &lt;code&gt;Pipfile.lock&lt;/code&gt; 而 &lt;code&gt;Pipfile.lock&lt;/code&gt; 會包含安裝且正確的套件資訊，所以才會使用此指令生成。&lt;/p&gt;
&lt;h2&gt;10. 直接根據虛擬環境執行 Python 指令&lt;/h2&gt;
&lt;p&gt;如果想要測試專案的某個檔案，或是直接進入虛擬環境的 Python 中測試，可以使用 &lt;code&gt;pipenv run [指令]&lt;/code&gt; 來執行。&lt;/p&gt;
&lt;p&gt;例如我要進入虛擬環境中的 Ｐython 下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pipenv run python
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;我要查看虛擬環境中的 Python 版本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pipenv run python &lt;span class="c1"&gt;# 進入虛擬環境中的 Python&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pipenv --py &lt;span class="c1"&gt;# Pipenv 提供的方式&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/18-pipenv-run-python-sample.png" alt="18-pipenv-run-python-sample" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;11. 指定 Python 版本建立虛擬環境&lt;/h2&gt;
&lt;p&gt;如果你的系統中有安裝了多個 Python 版本，例如 &lt;code&gt;Python 2.7.10&lt;/code&gt;, &lt;code&gt;Python 2.7.15&lt;/code&gt;, &lt;code&gt;Python 3.7.1&lt;/code&gt;，如下圖：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/7-pipenv-install-indicate-python-version.png" alt="7-pipenv-install-indicate-python-version" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;因此今天想要指定該專案虛擬環境所用的 Python 版本的話，可以在 &lt;code&gt;pipenv install&lt;/code&gt; 後面透過子參數來設定：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;parser&amp;gt; pipenv install --two &lt;span class="c1"&gt;# 指定系統有安裝，優先使用的 Python 2&lt;/span&gt;
parser&amp;gt; pipenv install --three &lt;span class="c1"&gt;# 指定系統有安裝，優先使用的 Python 3&lt;/span&gt;
parser&amp;gt; pipenv install --python &lt;span class="m"&gt;2&lt;/span&gt;.7.10 &lt;span class="c1"&gt;# 指定系統有安裝，明確的 Python 版本&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在上述中 &lt;code&gt;--two&lt;/code&gt; 與 &lt;code&gt;--three&lt;/code&gt; 會分別尋找你系統中，優先指定的 Python 2 與 Python 3 版本，因為我的 Python 3 只有一個版本號所以會是 &lt;code&gt;3.7.1&lt;/code&gt;，如下圖：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/9-pipenv-install-indicate-python-version-by-three.png" alt="9-pipenv-install-indicate-python-version-by-three" /&gt;&lt;/p&gt;
&lt;p&gt;但是 Python 2 在我的主系統中就有 &lt;code&gt;Python 2.7.10&lt;/code&gt;, &lt;code&gt;Python 2.7.15&lt;/code&gt; 兩個版本，因此 &lt;code&gt;pipenv&lt;/code&gt; 會去抓取我系統中我設定優先讀取的 Python 2 版本：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/8-pipenv-install-indicate-python-version-by-two.png" alt="8-pipenv-install-indicate-python-version-by-two" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;而如果你想要明確指定版本號，可以透過 &lt;code&gt;--python [系統存在的版本號]&lt;/code&gt; 來指定：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190308-python-pipenv-install-and-usage/10-pipenv-install-indicate-python-version-by-python-para.png" alt="10-pipenv-install-indicate-python-version-by-python-para" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;除此之外，因為前面提到了 &lt;code&gt;pipenv shell&lt;/code&gt; 也會偵測你的專案中有無虛擬環境並自動為你建立，因此你也可以拿 &lt;code&gt;pipenv shell&lt;/code&gt; 建立虛擬環境並指定版本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;parser&amp;gt; pipenv shell --two &lt;span class="c1"&gt;# 指定系統有安裝，優先使用的 Python 2&lt;/span&gt;
parser&amp;gt; pipenv shell --three &lt;span class="c1"&gt;# 指定系統有安裝，優先使用的 Python 3&lt;/span&gt;
parser&amp;gt; pipenv shell --python &lt;span class="m"&gt;2&lt;/span&gt;.7.10 &lt;span class="c1"&gt;# 指定系統有安裝，明確的 Python 版本&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;甚至 Pipenv 來能讓你不用下 &lt;code&gt;install&lt;/code&gt; 或 &lt;code&gt;shell&lt;/code&gt; ，而是直接指定 &lt;code&gt;--two&lt;/code&gt;, &lt;code&gt;--three&lt;/code&gt;, &lt;code&gt;--python [系統存在的版本號]&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;parser&amp;gt; pipenv --two &lt;span class="c1"&gt;# 指定系統有安裝，優先使用的 Python 2&lt;/span&gt;
parser&amp;gt; pipenv --three &lt;span class="c1"&gt;# 指定系統有安裝，優先使用的 Python 3&lt;/span&gt;
parser&amp;gt; pipenv --python &lt;span class="m"&gt;2&lt;/span&gt;.7.10 &lt;span class="c1"&gt;# 指定系統有安裝，明確的 Python 版本&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;虛擬環境和 &lt;code&gt;Pipfile&lt;/code&gt;, &lt;code&gt;Pipfile.lock&lt;/code&gt; 建立法則&lt;/h2&gt;
&lt;p&gt;看到了這裡可能有些人為疑惑，這樣子指令的功用不就有些重複了嗎？ 前面的 &lt;code&gt;pipenv install&lt;/code&gt; 與 &lt;code&gt;pipenv shell&lt;/code&gt; 也是，甚至指定版本的部分不需要有 &lt;code&gt;install&lt;/code&gt; 與 &lt;code&gt;shell&lt;/code&gt;，只要直接帶版本號也行？&lt;/p&gt;
&lt;p&gt;這樣的感覺對我當初來說，每個指令的行為非常沒有職責分一的感覺。&lt;/p&gt;
&lt;p&gt;這也就是我在一開頭提到的，Pipenv 很強大，但是對於剛上手的人會在使用中容易混淆。&lt;/p&gt;
&lt;p&gt;其實建立虛擬環境而言，在 Pipenv 中，&lt;strong&gt;&lt;em&gt;除了 &lt;code&gt;pipenv graph&lt;/code&gt; 這個指令外，所有其他的指令在執行時，都會檢查現有的專案目錄下有沒有虛擬環境存在，如果沒有就會為你建立。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以指定版本號也是，除了 &lt;code&gt;pipenv graph&lt;/code&gt; 這個指令外，所有其他的指令在執行時也能指定版本號，那麼沒有虛擬環境時，就會為你建立這個版本的虛擬環境。&lt;/p&gt;
&lt;p&gt;而且呢，對於建立虛擬環境（或是還原虛擬環境），每個指令也不會都產生 &lt;code&gt;Pipfile.lock&lt;/code&gt; 就像 &lt;code&gt;pipenv shell&lt;/code&gt; 的情況一樣。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;會更新與產生 &lt;code&gt;Pipfile&lt;/code&gt;,  &lt;code&gt;Pipfile.lock&lt;/code&gt; 的指令有 &lt;code&gt;install&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, &lt;code&gt;uninstall&lt;/code&gt;, &lt;code&gt;lock&lt;/code&gt;, &lt;code&gt;clean&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;只會產生 &lt;code&gt;Pipfile&lt;/code&gt; 的有 &lt;code&gt;shell&lt;/code&gt;, &lt;code&gt;check&lt;/code&gt;, &lt;code&gt;run&lt;/code&gt;, &lt;code&gt;open&lt;/code&gt; , &lt;code&gt;sync&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;個人習慣模式&lt;/h2&gt;
&lt;p&gt;因為上述有許多種方式建立虛擬環境，所以可能有人看完會不太知道自己想要怎麼做，因此分享一下自己的做法，個人習慣使用 &lt;code&gt;pipenv shell&lt;/code&gt; 建立虛擬環境，同時進入到虛擬環境中，再透過 &lt;code&gt;pipenv install [套件名稱]&lt;/code&gt; 安裝名稱，並且透過 &lt;code&gt;pipenv install&lt;/code&gt; 指令直接產生 &lt;code&gt;Pipfile.lock&lt;/code&gt;；如果本身有 &lt;code&gt;Pipfile&lt;/code&gt;，則透過 &lt;code&gt;pipenv install&lt;/code&gt; 來安裝與產生 &lt;code&gt;Pipfile.lock&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pipenv shell
&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pipenv install &lt;span class="c1"&gt;# 如果已經存在 Pipfile&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;parser&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pipenv install &lt;span class="o"&gt;[&lt;/span&gt;套件名稱 &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;# 如果不存在Pipfile&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;後記&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;寫這篇文章真的花了很多心思 ＠＠ ，因為 &lt;strong&gt;Pipenv&lt;/strong&gt; 雖然貼心與強大，但是也因為指令中很多相似的行為都能做到，導致在思考文章結構與流程上花了很多心思，因為彷彿從任何地方都能切入說，但是很容易迷失在其中，如果有一個順序，又會因為許多方式都能做到，導致越看越模糊。&lt;/p&gt;
&lt;p&gt;雖然還是完成了，但很美中不足啊，不過也希望或多或少能幫助到他人或是未來忘記的自己，對了一但使用 &lt;strong&gt;Pipenv&lt;/strong&gt; 後，建議不要在使用 &lt;code&gt;pip&lt;/code&gt; 指令又在 &lt;strong&gt;Pipenv&lt;/strong&gt; 建立好的虛擬環境下安裝或移除套件，那會讓 Pipenv 的環境管理與 &lt;code&gt;pip&lt;/code&gt; 不同步，也混淆自己哦。&lt;/p&gt;
&lt;h1&gt;參考文章&lt;/h1&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://realpython.com/pipenv-guide/"&gt;Pipenv: A Guide to the New Python Packaging Tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codinganimal.info/%E7%94%A8-pipenv-%E4%BE%86%E7%AE%A1%E7%90%86-python-%E9%96%8B%E7%99%BC%E7%92%B0%E5%A2%83-ce9f619825a2"&gt;用 pipenv 來管理 Python 開發環境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@chihsuan/pipenv-%E6%9B%B4%E7%B0%A1%E5%96%AE-%E6%9B%B4%E5%BF%AB%E9%80%9F%E7%9A%84-python-%E5%A5%97%E4%BB%B6%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-135a47e504f4"&gt;Pipenv 更簡單、更快速的 Python 套件管理工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pipenv.readthedocs.io/en/latest/basics/#pipfile-lock-security-features"&gt;Pipfile.lock Security Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/reference/pip_install/#hash-checking-mode"&gt;Hash-Checking Mode in pip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jianshu.com/p/8c6ae288ba48"&gt;pipenv 的高级用法了解一下&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://crazygit.wiseturtles.com/2018/01/08/pipenv-tour/"&gt;pipenv 使用指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.windrunner.me/python/pip.html"&gt;pip 与 Pipfile&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Python"></category><category term="Python"></category><category term="Pipenv"></category><category term="Virtualenv"></category></entry><entry><title>Python - 隔離開發環境的利器，安裝虛擬環境工具 virtualenv</title><link href="https://note.koko.guru/posts/python-virtualenv-install-and-usage" rel="alternate"></link><published>2019-03-07T00:00:00+08:00</published><updated>2019-03-07T00:00:00+08:00</updated><author><name>kokokuo</name></author><id>tag:note.koko.guru,2019-03-07:/posts/python-virtualenv-install-and-usage</id><summary type="html">&lt;p&gt;在開發 Python 的程式時，時不時就會透過 &lt;code&gt;pip&lt;/code&gt; 從 PyPI 上安許多的套件來 &lt;code&gt;import&lt;/code&gt; 使用，但是因為 Python 是裝在整個電腦的系統環境的，所以當我們之後寫的專案變多，每個不同的專案都因為有各自的需要 &lt;code&gt;pip install&lt;/code&gt; 了不同的套件，最後整個 Python 的系統環境所安裝的套件就會非常多且雜亂！ 那麼要如何讓每個專案安裝的套件都只有自己的專案擁有，且不會弄亂系統的 Python 環境呢？ 這時候就需要虛擬環境了！&lt;/p&gt;</summary><content type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;在開發 Python 的程式時，時不時就會透過 &lt;code&gt;pip&lt;/code&gt; 從 PyPI 上安許多的套件來 &lt;code&gt;import&lt;/code&gt; 使用，但是因為 Python 是裝在整個電腦的系統環境的，所以當我們之後寫的專案變多，每個不同的專案都因為有各自的需要 &lt;code&gt;pip install&lt;/code&gt; 了不同的套件，最後整個 Python 的系統環境所安裝的套件就會非常多且雜亂！ 那麼要如何讓每個專案安裝的套件都只有自己的專案擁有，且不會弄亂系統的 Python 環境呢？ 這時候就需要虛擬環境了！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;虛擬環境介紹&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;虛擬環境的目的使我們可以依據我們每個專案為一個單位，建立出不同虛擬的 Python 環境，來隔離系統的主 Python 環境以及其他專案的 Python 環境。因此當我們在開發不同的專案時，只要進入每個專案所屬的虛擬環境中，接下來所有安裝的插件都會只裝在這個環境中並且被作用，下圖為示意圖：&lt;/p&gt;
&lt;p&gt;&lt;img alt="python-virtualenv-diagram" src="../images/20190307-python-virtualenv-install-and-usage/python-virtualenv-diagram.png"&gt;&lt;/p&gt;
&lt;p&gt;我的主系統 Python 環境中只有安裝 &lt;code&gt;pip&lt;/code&gt; 與 &lt;code&gt;virtualenv&lt;/code&gt; 這個虛擬環境工具套件，而透過 &lt;code&gt;virtualenv&lt;/code&gt; 所分別在這三個專案產生的 &lt;code&gt;env1&lt;/code&gt;, &lt;code&gt;env2&lt;/code&gt;, &lt;code&gt;env3&lt;/code&gt; 除了都有各自獨立的 Python 環境與各自的 &lt;code&gt;pip&lt;/code&gt; 套件外，也都安裝彼此所屬專案在開發上所需要的插件。&lt;/p&gt;
&lt;p&gt;另外若是你的電腦主環境有兩種不同的 Python 版本，例如 &lt;code&gt;Python 2.7&lt;/code&gt; 與 &lt;code&gt;Python 3.7&lt;/code&gt;，那麼在建立虛擬環境時，還可以指定要產生的虛擬環境要以哪個 Python 版本為基底哦！&lt;/p&gt;
&lt;p&gt;另外虛擬環境這個概念不是只有在 Python 中才有，每個程式語言都有類似或自己的虛擬環境工具，而在 Python 中目前最熱門的就是 &lt;code&gt;virtualenv&lt;/code&gt; 以及之後會介紹在 &lt;code&gt;virtualenv&lt;/code&gt; 之後新推出的 &lt;code&gt;pipenv&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;安裝與使用 virtualenv&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;首先透過 Python 內建的 &lt;code&gt;pip&lt;/code&gt; 套件指令下 &lt;code&gt;pip install&lt;/code&gt; 來安裝 &lt;code&gt;virtualenv&lt;/code&gt; 套件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&amp;gt; pip install virtualenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;安裝完後要怎麼使用呢？ 以下一個例子，我的專案是一個爬蟲的專案叫 &lt;code&gt;parser&lt;/code&gt;，我會在這個專案中安裝 &lt;code&gt;requests&lt;/code&gt;, &lt;code&gt;beautifulsoup4&lt;/code&gt; 這兩個套件，那麼首先進入到你要開發的專案目錄下。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~/&amp;gt; mkdir parser
~/&amp;gt; &lt;span class="nb"&gt;cd&lt;/span&gt; parser
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;再透過 &lt;code&gt;virtualenv&lt;/code&gt; 指令來建立一個存放 Python 虛擬環境的目錄，例如下面我透過 &lt;code&gt;virtualenv&lt;/code&gt; 建立了一個 &lt;code&gt;venv&lt;/code&gt; 的目錄，那麼 &lt;code&gt;virtualenv&lt;/code&gt; 就會在這個目錄中把系統的 Python 且是乾淨沒有安裝其他套件的 Python 環境複製裝進去，如此這個虛擬環境就誕生了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;parser/&amp;gt; virtualenv venv &lt;span class="c1"&gt;# 這個 venv 是用來存放虛擬環境建立的 Python 虛擬環境的目錄&lt;/span&gt;
parser/&amp;gt; ls
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src="../images/20190307-python-virtualenv-install-and-usage/create-virtualenv.png" alt="create-virtualenv" /&gt;&lt;/p&gt;
&lt;p&gt;你會看到在 &lt;code&gt;venv&lt;/code&gt; 中是安裝 Python 時產生的目錄與檔案。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;使用 virtualenv&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;建立好 &lt;code&gt;parser&lt;/code&gt; 專用的虛擬環境後，此時先不要太快直接透過 &lt;code&gt;pip&lt;/code&gt; 安裝套件，因為我們只是建立好環境，但我們「還未進入」到這個虛擬環境中，因此若此時直接安裝，還是會以系統中使用 Python 的 &lt;code&gt;pip&lt;/code&gt; 插件安裝下去。我們要先進入到虛擬環境中，也就是 &lt;code&gt;venv&lt;/code&gt; 所建立的 Python 下，再用虛擬環境中內建的 &lt;code&gt;pip&lt;/code&gt; 安裝套件，這些套件才會被裝在虛擬環境下。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;parser/&amp;gt; source/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pip list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src="../images/20190307-python-virtualenv-install-and-usage/source-virtualenv-pip-list.png" alt="source-virtualenv-pip-list" width="320px"/&gt;&lt;/p&gt;
&lt;p&gt;如上圖你會看到這個 &lt;code&gt;pip list&lt;/code&gt; 出來的套件都是一開始安裝 Python 時最乾淨的環境，即便你作業系統中安裝的 Python 已經有裝了其他套件，在這裡都會以最乾淨的方式呈現，因為 &lt;code&gt;virtualenv&lt;/code&gt; 只會複製一份 Python 核心，不會連作業系統中的 Python 所安裝的套件也一併抓過來，此時我們可以透過 &lt;code&gt;python --version&lt;/code&gt; 來看看 Python 的路徑以及版本，以下我的 Python 是安裝 &lt;code&gt;3.7.1&lt;/code&gt; 版本的，此時透過進入 Python 環境下，透過 &lt;code&gt;sys.path&lt;/code&gt; 就可以看到來源是 &lt;code&gt;venv&lt;/code&gt; 中：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190307-python-virtualenv-install-and-usage/show-virtualenv-python-path.png" alt="show-virtualenv-python-path" /&gt;&lt;/p&gt;
&lt;p&gt;接著回過頭來，我們來安裝套件 &lt;code&gt;requests&lt;/code&gt; 與 &lt;code&gt;beautifulsoup4&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pip install requests
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pip install beautifulsoup4
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pip list
Package        Version
-------------- ----------
beautifulsoup4 &lt;span class="m"&gt;4&lt;/span&gt;.7.1
certifi        &lt;span class="m"&gt;2018&lt;/span&gt;.11.29
chardet        &lt;span class="m"&gt;3&lt;/span&gt;.0.4
idna           &lt;span class="m"&gt;2&lt;/span&gt;.8
pip            &lt;span class="m"&gt;19&lt;/span&gt;.0.3
requests       &lt;span class="m"&gt;2&lt;/span&gt;.21.0
setuptools     &lt;span class="m"&gt;40&lt;/span&gt;.8.0
soupsieve      &lt;span class="m"&gt;1&lt;/span&gt;.8
urllib3        &lt;span class="m"&gt;1&lt;/span&gt;.24.1
wheel          &lt;span class="m"&gt;0&lt;/span&gt;.33.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;大功告成囉！對了對了如果我們使用完專案想要離開怎麼辦？那麼我們只需要透過 &lt;code&gt;deactivate&lt;/code&gt; 退出虛擬環境就好囉。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; deactivate
parser/&amp;gt; pip list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;退出後你就會看到 &lt;code&gt;(venv)&lt;/code&gt; 的標示不存在了，就是退出虛擬環境成功，此時你可以在透過 &lt;code&gt;pip list&lt;/code&gt; 看看，就會發現虛擬環境中安裝的套件不在了：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190307-python-virtualenv-install-and-usage/system-pip-list.png" alt="system-pip-list" width="320px"/&gt;&lt;/p&gt;
&lt;p&gt;但是因為他好好的放在 &lt;code&gt;venv&lt;/code&gt; 目錄下，所以下次要使用只要再透過 &lt;code&gt;source venv/bin/activate&lt;/code&gt; 進入即可囉！&lt;/p&gt;
&lt;p&gt;另外若是你今天在使用虛擬環境時完髒了，要刪除要怎麼做呢？ 我們只要先用 &lt;code&gt;deactivate&lt;/code&gt; 退出虛擬環境後，在做 &lt;code&gt;rm -rf&lt;/code&gt; 把虛擬環境的目錄刪掉就好，豈不是很容易？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; deactivate
parser/&amp;gt; rm -rf venv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;紀錄專案在 virtualenv 中所安裝的所有套件&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;安裝了 Python 的套件在虛擬環境中雖然很好，但是如果要做版本控制放到 Github, Bitbucket, GitLab 上，又或是專案的檔案要攜帶著走、分享給別人，那麼這些安裝好的環境要如何也攜帶走呢？ 可能你會說，那我們把剛剛建立放置虛擬環境的目錄 &lt;code&gt;venv&lt;/code&gt; 也一起丟到版本控管空間呀，轉移專案目錄時也是一起帶著走就好了，但是這是不行的，因為兩個原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;虛擬環境目錄認「絕對路徑」&lt;/strong&gt;：換句話說，即便你有一起把 &lt;code&gt;venv&lt;/code&gt; 帶著走，但若你的專案目錄改名了、把自己的目錄檔案放到別的位置下或複製傳給別人，都會因為絕對位置跑掉，導致下次再透過 &lt;code&gt;source&lt;/code&gt; 進入虛擬環境時找不到路徑而失敗！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;虛擬環境目錄檔案太大&lt;/strong&gt;：虛擬環境目錄因為要保存隔離 Python 的整個核心檔案以及未來安裝的 Python 套件，會導致目錄的檔案越來越多，所以一般來說就算路徑都不改，我們也不會攜帶走或丟到版本控管空間，因為會很大很肥。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那麼不帶著虛擬環境的目錄走，要怎麼保有這些安裝套件的紀錄呢？ 這裡就要仰賴到 &lt;code&gt;pip freeze&lt;/code&gt; 這個指令了！ 透過 &lt;code&gt;pip freeze &amp;gt; 保存的檔名&lt;/code&gt; 來建立一份所有該虛擬環境所安裝的套件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pip freeze &amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src="../images/20190307-python-virtualenv-install-and-usage/pip-freeze-requirements.png" alt="pip-freeze-requirements" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;如上圖，會建立了 &lt;code&gt;requriements.txt&lt;/code&gt; 檔案，這個檔名可以隨意命名，不過一般在使用 &lt;code&gt;virtualenv&lt;/code&gt; 中，使用 &lt;code&gt;requriements.txt&lt;/code&gt; 已經變成 Python 的一種 Convention ，所以若是去瀏覽大多是 Github 的 Reposiotry 都會看到。&lt;/p&gt;
&lt;p&gt;當我們產生了 &lt;code&gt;requriements.txt&lt;/code&gt; 後，專案變只要帶著這個 &lt;code&gt;requriements.txt&lt;/code&gt; 即可，上傳版控也一樣，並可以用 &lt;code&gt;.gitignore&lt;/code&gt; 過濾掉 &lt;code&gt;venv&lt;/code&gt; 目錄。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;使用 &lt;code&gt;requirements.txt&lt;/code&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;當該專案來到新的環境下或從 Github 上 Clone 下來時，要使用虛擬環境並再次安裝套件的話，就只要再次把虛擬環境的目錄建立，進入後，透過以下指令，就可以還原該專案原先所以用的 Python 套件囉，以下再次以乾淨的 &lt;code&gt;parser&lt;/code&gt; 專案為例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 假設目前在新的環境下，先建立虛擬環境，在安裝套件&lt;/span&gt;
parser/&amp;gt; virtualenv venv
parser/&amp;gt; &lt;span class="nb"&gt;source&lt;/span&gt; venv/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;parser/&amp;gt; pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src="../images/20190307-python-virtualenv-install-and-usage/pip-install-by-requirments.png" alt="pip-install-by-requirments" /&gt;&lt;/p&gt;
&lt;p&gt;如上圖，再次安裝 Python 套件完成囉。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;指定 Python 版本的虛擬環境&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;如果今天你的作業系統中有多個 Python 版本，例如我一開頭提到的 &lt;code&gt;Python 2.7&lt;/code&gt; 與 &lt;code&gt;Python 3.7&lt;/code&gt;，那麼在建立虛擬環境時，還可以指定要產生的虛擬環境要以哪個 Python 版本為基底哦！ 以下接著介紹如何設定：&lt;/p&gt;
&lt;p&gt;首先先看到一下範例：以下是我的 &lt;code&gt;Python 2.7.15&lt;/code&gt; 版本以及 &lt;code&gt;Python 3.7.1&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190307-python-virtualenv-install-and-usage/system-multi-python-version.png" alt="system-multi-python-version" /&gt;&lt;/p&gt;
&lt;p&gt;在上述因為我預設的優先讀取版本是 Python 3.7.1 ，所以輸入 &lt;code&gt;python&lt;/code&gt; 會是呈現 &lt;code&gt;3.7.1&lt;/code&gt; 版本（因此我的系統下 &lt;code&gt;pip&lt;/code&gt; 時出來的也會是以放在預設的 &lt;code&gt;Python 3.7.1&lt;/code&gt; 中套件)&lt;/p&gt;
&lt;p&gt;除此之外當我在創建虛擬環境時，也因此我的預設 Python 環境會是 &lt;code&gt;3.7.1&lt;/code&gt;，例如先前的 &lt;code&gt;partser&lt;/code&gt; 專案。&lt;/p&gt;
&lt;p&gt;那麼今天如果要指定虛擬環境中要用的 Python 版本要如何設定？ 很容易地只要透過 &lt;code&gt;-p&lt;/code&gt; 參數後面帶入你指定的 Python 執行檔所在的路徑就好，不過因為路徑往往不好記。&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190307-python-virtualenv-install-and-usage/virtualenv-python2-path.png" alt="virtualenv-python2-path" /&gt;&lt;/p&gt;
&lt;p&gt;所以只要以指令代替即可，例如因為我的環境只有 &lt;code&gt;2.7.15&lt;/code&gt; 與 &lt;code&gt;3.7.1&lt;/code&gt; ，因此執行的 Python 指令就只有 &lt;code&gt;python2&lt;/code&gt; 與 &lt;code&gt;python3&lt;/code&gt; 而已，因此我要指定 &lt;code&gt;Python 2.7.15&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190307-python-virtualenv-install-and-usage/virtualenv-python2-command.png" alt="virtualenv-python2-command" /&gt;&lt;/p&gt;
&lt;p&gt;最後以 &lt;code&gt;parser&lt;/code&gt; 專案以及另外一個新建的 &lt;code&gt;flask-sample&lt;/code&gt; 專案作為作為不同專案各有自己的虛擬環境的例子，如下 &lt;code&gt;parser&lt;/code&gt; 以 &lt;code&gt;python 2.7.15&lt;/code&gt; 為環境安裝了 &lt;code&gt;requests&lt;/code&gt; 與 &lt;code&gt;beautifulsoup4&lt;/code&gt; ；而 &lt;code&gt;flask-sample&lt;/code&gt; 以 &lt;code&gt;Python 3.7.1&lt;/code&gt; 為環境並安裝了 &lt;code&gt;flask&lt;/code&gt;，如下圖：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20190307-python-virtualenv-install-and-usage/multi-virtualenv.png" alt="multi-virtualenv" /&gt;&lt;/p&gt;</content><category term="Python"></category><category term="Python"></category><category term="虛擬環境"></category></entry><entry><title>Python - 在 Windows 上使用 PyQt 開發 Python 視窗程式</title><link href="https://note.koko.guru/posts/windows-pyqt-install-develop-python-gui" rel="alternate"></link><published>2015-01-05T00:00:00+08:00</published><updated>2015-01-05T00:00:00+08:00</updated><author><name>kokokuo</name></author><id>tag:note.koko.guru,2015-01-05:/posts/windows-pyqt-install-develop-python-gui</id><summary type="html">&lt;p&gt;Python 上最常用來開發 GUI 視窗的有 &lt;code&gt;thinker&lt;/code&gt;、&lt;code&gt;PyGTK&lt;/code&gt;、&lt;code&gt;wxPython&lt;/code&gt; 與 &lt;code&gt;PyQt&lt;/code&gt; / &lt;code&gt;PySide&lt;/code&gt; 等等。&lt;/p&gt;</summary><content type="html">&lt;p&gt;而其中由於 Qt 的資源很多，也是可以跨平台開發與使用，而 在 Python 上開發 Qt 則有 &lt;code&gt;PyQt&lt;/code&gt; 可以選擇，如果有商業用途，則可以選擇 &lt;code&gt;PySide&lt;/code&gt; －提供和 &lt;code&gt;PyQt&lt;/code&gt; 類似的功能，並相容 API。但與 &lt;code&gt;PyQt&lt;/code&gt; 不同處為使用 LGPL 授權，所以可以作為商業用途的軟體引用開發。&lt;/p&gt;
&lt;p&gt;而本文即是使用 &lt;code&gt;PyQt&lt;/code&gt; 作為 GUI 的開發。&lt;/p&gt;
&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;Python 上最常用來開發 GUI 視窗的有 &lt;code&gt;thinker&lt;/code&gt;、&lt;code&gt;PyGTK&lt;/code&gt;、&lt;code&gt;wxPython&lt;/code&gt; 與 &lt;code&gt;PyQt&lt;/code&gt; / &lt;code&gt;PySide&lt;/code&gt; 等等。
而其中由於 Qt 的資源很多，也是可以跨平台開發與使用，而 在 Python 上開發 Qt 則有 &lt;code&gt;PyQt&lt;/code&gt; 可以選擇，如果有商業用途，則可以選擇 &lt;code&gt;PySide&lt;/code&gt; －提供和 &lt;code&gt;PyQt&lt;/code&gt; 類似的功能，並相容 API。但與 &lt;code&gt;PyQt&lt;/code&gt; 不同處為使用 LGPL 授權，所以可以作為商業用途的軟體引用開發。&lt;/p&gt;
&lt;p&gt;而本文即是使用 &lt;code&gt;PyQt&lt;/code&gt; 作為 GUI 的開發。&lt;/p&gt;
&lt;h1&gt;ㄧ、安裝 PyQt&lt;/h1&gt;
&lt;p&gt;對照安裝好的 Python 版本是 2.7 還是 3.3 與位元版本 選擇對應的 PyQt，這邊我的環境是 Python 2.7.9 32bit，所以選擇 &lt;code&gt;PyQt4&lt;/code&gt; 的 &lt;a href="http://sourceforge.net/projects/pyqt/files/PyQt4/PyQt-4.11.3/PyQt4-4.11.3-gpl-Py2.7-Qt4.8.6-x32.exe/download"&gt;PyQt4-4.11.3-gpl-Py2.7-Qt4.8.6-x32&lt;/a&gt;，此安裝檔內已經包含 SIP 與 &lt;code&gt;Qt4.8.6&lt;/code&gt;，所以事先不需要安裝 SIP 與 Qt&lt;/p&gt;
&lt;p&gt;安裝完後，預設會自動在系統環境變數中加入 PyQt 的路徑:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;C:&lt;span class="se"&gt;\P&lt;/span&gt;ython27&lt;span class="se"&gt;\L&lt;/span&gt;ib&lt;span class="se"&gt;\s&lt;/span&gt;ite-packages&lt;span class="se"&gt;\P&lt;/span&gt;yQt4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src="../images/20150105-windows-pyqt-install-develop-python-gui/system-env-path.png" alt="system-env-path" width="320px"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;二、使用 Qt 的 &lt;code&gt;.ui&lt;/code&gt; 檔做 UI 設計&lt;/h1&gt;
&lt;p&gt;如果要開發給 Python 用的 UI 檔案，可以使用 &lt;strong&gt;Qt Creator&lt;/strong&gt; 來設計 UI，在 PyQt 中會提供 &lt;code&gt;designer.exe&lt;/code&gt; 這個程式，該程式是 Qt 的一部分，一起提供進來方便做 UI 的開發，如下兩圖：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20150105-windows-pyqt-install-develop-python-gui/design-exe.png" alt="design-exe" width="ˇ240px"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20150105-windows-pyqt-install-develop-python-gui/qt-designer-view.png" alt="qt-designer-view" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;三、轉換 &lt;code&gt;.ui&lt;/code&gt; 檔為 &lt;code&gt;.py&lt;/code&gt; 檔作為 module 使用&lt;/h1&gt;
&lt;p&gt;產生完後的 &lt;code&gt;.ui&lt;/code&gt; 檔，&lt;code&gt;PyQt&lt;/code&gt; 還提供一個 Command 指令可以把 ui 檔案轉換成 &lt;code&gt;.py&lt;/code&gt; 檔，方便我們直接在 Python 中調用。使用 CMD 切換到設計好的 ui 所在目錄下，執行此指令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;pyuic4&lt;/span&gt; &lt;span class="n"&gt;your_qt_ui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ui&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;output_name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;即可產生出 py 檔，&lt;code&gt;pyuic4&lt;/code&gt; 是 PyQt 預設代的指令，此檔案的路徑在 &lt;code&gt;C:\Python27\Lib\site-packages\PyQt4&lt;/code&gt; 中，為一個 &lt;code&gt;.bat&lt;/code&gt; 檔案，但是實際調用的是 &lt;code&gt;C:\Python27\Lib\site-packages\PyQt4\uic\&lt;/code&gt; 下的 &lt;code&gt;pyuic.py&lt;/code&gt; 檔案。&lt;/p&gt;
&lt;h2&gt;載入 UI 的範例&lt;/h2&gt;
&lt;p&gt;這邊我把原先的 &lt;code&gt;.ui&lt;/code&gt; 檔案名稱改為 &lt;code&gt;fmwp_mainwindow.ui&lt;/code&gt;，產生完的名稱是 &lt;code&gt;fmwp_mainwindow.py&lt;/code&gt;，這邊我的主要 Script 檔案為 &lt;code&gt;FMWPModel.py&lt;/code&gt;
於是在 &lt;code&gt;FMWPModel.py&lt;/code&gt; 中一開始使用 &lt;code&gt;fmwp_mainwindow.py&lt;/code&gt; 的程式如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;fmwp_mainwindow&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fmwp_mainwindow&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Ui_MainWindow&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PyQt4.QtGui&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;QMainWindow&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QMainWindow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Ui_MainWindow&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MainWindow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setupUi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fmwp_mainwindow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QtGui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QApplication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MainWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如此即可完成，再執行 &lt;code&gt;FMWPModel.py&lt;/code&gt; 就會顯示 GUI 視窗了！&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;參考資料&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://href.li/?http://stackoverflow.com/questions/18429452/convert-pyqt-ui-to-python"&gt;Convert pyQt UI to python&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Python"></category><category term="Python"></category><category term="Windows"></category><category term="PyQt"></category></entry><entry><title>Python - 使用 PyQt 與 py2exe 製作 GUI 視窗應用程式的 exe 執行檔</title><link href="https://note.koko.guru/posts/python-build-gui-app-pyqt-using-py2exe" rel="alternate"></link><published>2015-01-04T00:00:00+08:00</published><updated>2015-01-04T00:00:00+08:00</updated><author><name>kokokuo</name></author><id>tag:note.koko.guru,2015-01-04:/posts/python-build-gui-app-pyqt-using-py2exe</id><summary type="html">&lt;p&gt;在前一篇 &lt;a href="https://note.koko.guru/posts/build-python-exe-using-py2exe Authors: kokokuo"&gt;Python - 使用 py2exe 製作 Python exe 執行檔&lt;/a&gt; 介紹了製作 exe 與初步認識，但是今天如果要製作的檔案是 GUI 執行檔，可就需要再修改了，此篇介紹如何產生 GUI 視窗程式用的 exe 執行檔，透過 PyQt 開發的視窗應用程式做一個基本的 exe 製作&lt;/p&gt;</summary><content type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;在前一篇 &lt;a href="https://note.koko.guru/posts/build-python-exe-using-py2exe Authors: kokokuo"&gt;Python - 使用 py2exe 製作 Python exe 執行檔&lt;/a&gt; 介紹了製作 exe 與初步認識，但是今天如果要製作的檔案是 GUI 執行檔，可就需要再修改了，此篇介紹如何產生 GUI 視窗程式用的 exe 執行檔，透過 PyQt 開發的視窗應用程式做一個基本的 exe 製作&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;Python 環境&lt;/h1&gt;
&lt;p&gt;我所使用的環境如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Windows 8.1 x64&lt;/li&gt;
&lt;li&gt;Python 2.7.9 32bit&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sourceforge.net/projects/pyqt/files/PyQt4/PyQt-4.11.3/PyQt4-4.11.3-gpl-Py2.7-Qt4.8.6-x32.exe/download"&gt;PyQt4-4.11.3-gpl-Py2.7-Qt4.8.6-x32&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sourceforge.net/projects/py2exe/files/py2exe/0.6.9/py2exe-0.6.9.win32-py2.7.exe/download?use_mirror=nchc&amp;amp;download="&gt;py2exe-0.6.9.win32-py2.7&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;使用 PyQt 製作 GUI 視窗的 &lt;code&gt;setup.py&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;以下我以這隻協助尋找 Windows 上連線並儲存過 WiFi 密碼的尋找程式 - &lt;a href="https://github.com/kokokuo/PyQt-FMWPTools"&gt;PyQt-FMWPTools&lt;/a&gt; 為例。&lt;/p&gt;
&lt;p&gt;我需要製作成可執行檔的檔案名稱叫做 &lt;code&gt;FWMPModel.py&lt;/code&gt;，而我會另外 import 同在 &lt;code&gt;FWMPModel.py&lt;/code&gt; 路徑資料夾下的 &lt;code&gt;fmwp_mainwindow.py&lt;/code&gt;.
&lt;code&gt;fmwp_mainwindow.py&lt;/code&gt; 此檔案是 Qt 的 ui 檔，經過 PyQt 的轉換指令產生的 &lt;code&gt;.py&lt;/code&gt; 檔案，檔案位在 &lt;code&gt;FWMPTools&lt;/code&gt; 資料夾下，如下圖：&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20150104-python-build-gui-app-pyqt-using-py2exe/pyqt-code-files.png" alt="pyqt-code-files" width="200px"/&gt;&lt;/p&gt;
&lt;p&gt;需要改變的地方有：&lt;/p&gt;
&lt;h2&gt;1. 把 console 改成 windows 程式&lt;/h2&gt;
&lt;p&gt;把原本的 console 改成 windows 後則不會有命令提示字元出現，而是只剩下程式本身的視窗，否則視窗與命令提示字元都會出現&lt;/p&gt;
&lt;h2&gt;2. 使用 &lt;code&gt;PyQt&lt;/code&gt; 製作的 GUI 程式需要 &lt;code&gt;sip&lt;/code&gt; 這個模組&lt;/h2&gt;
&lt;p&gt;要製作 &lt;code&gt;PyQt&lt;/code&gt; 開發的程式需要 &lt;code&gt;sip&lt;/code&gt; 這個模組。 在 &lt;a href="https://zh.wikipedia.org/wiki/PyQt"&gt;Wiki 的 PytQt&lt;/a&gt; 中有提到 SIP 為是一個自動為 C 和 C++ 庫生成 Python 擴充功能模組的工具。 為了方便開發 PyQt，SIP 於 1998 被「Riverbank Computing」公司創造出來。不過，SIP 不專用於 PyQt，而是適用於所有的 C 和 C++庫 ( 其他介紹可以參考 &lt;a href="https://riverbankcomputing.com/software/sip/intro"&gt;PyQt&lt;/a&gt; 網站與 &lt;a href="https://wiki.python.org/moin/SIP"&gt;PyPI&lt;/a&gt; )。&lt;/p&gt;
&lt;p&gt;所以 SIP 可以說是 PyQt 的底層，沒有這隻檔案便無法製作 exe 執行檔。不過我們不需要另外下載，因為 SIP 已經包含在 PyQt 中，我們只需要在 &lt;code&gt;setup.py&lt;/code&gt; 中把它放到 &lt;code&gt;includes&lt;/code&gt; 參數。&lt;/p&gt;
&lt;h2&gt;3. 加入打包的其他引入 Python 檔案&lt;/h2&gt;
&lt;p&gt;因為我有在 &lt;code&gt;FMWPModel.py&lt;/code&gt; 中透過 &lt;code&gt;import&lt;/code&gt; 加入視窗的 UI 定義檔案  &lt;code&gt;fmwp_mainwindow.py&lt;/code&gt;，因此也需要把此檔案加入至 &lt;code&gt;includes&lt;/code&gt; 中。 &lt;code&gt;includes&lt;/code&gt; 只需要加入所有打包檔需要的其他 &lt;code&gt;module&lt;/code&gt; 檔案即可，並且只需標示名稱 - &lt;strong&gt;list of module names to include&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;所以 &lt;code&gt;setup.py&lt;/code&gt; 如下: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;distutils.core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;py2exe&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;py2exe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;bundle_files&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;compressed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;includes&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fmwp_mainwindow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}},&lt;/span&gt;
    &lt;span class="n"&gt;windows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;FMWPModel.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;icon_resources&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;find.ico&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]}],&lt;/span&gt;
    &lt;span class="n"&gt;zipfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;結果畫面 :&lt;/p&gt;
&lt;p&gt;&lt;img src="../images/20150104-python-build-gui-app-pyqt-using-py2exe/result.png" alt="result" width="480px"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;參考資料&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.py2exe.org/index.cgi/Py2exeAndPyQt"&gt;Py2exeAndPyQt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pythoner.com/111.html"&gt;使用 Py2exe 将 PyQt 程序打包为 exe 文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pythontips.com/2014/03/03/using-py2exe-the-right-way/"&gt;Using py2exe the right way&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Python"></category><category term="Python"></category><category term="py2exe"></category><category term="PyQt"></category></entry></feed>